{"data/planning/igibson/medium/sorting_books_medium.pddl_Pomaria_1_int_0": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(book_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable book_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable book_1": ["yes", 5.699956023667851e-13, 2.8378409106140368e-14, "The image shows a robotic arm (the agent) and a book (book_1) on the floor. To determine if the book is in reach, I need to assess the distance between the agent's gripper and the book. Visually, the book appears to be relatively close to the agent, and within the range of motion of the robotic arm. Therefore, it is likely that the book is in reach.", true, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a book (book_1) on the floor. To determine if the book is in reach, I need to assess the distance between the agent's gripper and the book. Visually, the book appears to be relatively close to the agent, and within the range of motion of the robotic arm. Therefore, it is likely that the book is in reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"reachable hardback_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}, "reachable shelf_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(book_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable book_1": ["yes", 5.699956023667851e-13, 2.8378409106140368e-14, "The image shows a robotic arm (the agent) and a book (book_1) on the floor. To determine if the book is in reach, I need to assess the distance between the agent's gripper and the book. Visually, the book appears to be relatively close to the agent, and within the range of motion of the robotic arm. Therefore, it is likely that the book is in reach.", true, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a book (book_1) on the floor. To determine if the book is in reach, I need to assess the distance between the agent's gripper and the book. Visually, the book appears to be relatively close to the agent, and within the range of motion of the robotic arm. Therefore, it is likely that the book is in reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding hardback_1": [true, false, false], "all_correct": true}, "effects_results": {"holding book_1": ["yes", 1.6969890390908932e-13, 2.9489245382619336e-14, "The image shows a robotic arm holding a white object that appears to be a book. The object has images on it, suggesting it is a book. The object is being held by the robotic arm, which is the agent. Therefore, the agent is holding the book.", true, "Question: Is the agent holding the book_1\n<explanation>\nThe image shows a robotic arm holding a white object that appears to be a book. The object has images on it, suggesting it is a book. The object is being held by the robotic arm, which is the agent. Therefore, the agent is holding the book.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"ontop book_1,hardback_1": {"before": false, "after": false}, "ontop book_1,table_1": {"before": false, "after": false}, "ontop book_1,shelf_1": {"before": false, "after": false}, "ontop book_1,book_1": {"before": null, "after": false}, "nextto book_1,hardback_1": {"before": false, "after": false}, "nextto book_1,table_1": {"before": false, "after": false}, "nextto book_1,shelf_1": {"before": false, "after": false}, "nextto book_1,book_1": {"before": null, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(hardback_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable hardback_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable hardback_1": ["yes", 1.922940837595019e-13, 1.2292950199986087e-14, "The image shows a robotic arm (agent) holding a book. The question asks if the object labeled \"hardback_1\" is within the agent's reach. \"hardback_1\" is a book on a small table in front of the agent. Since the agent is currently holding a book, it is reasonable to assume it was able to reach the table and pick up the book. Therefore, \"hardback_1\" is in reach of the agent.", true, "Question: Is the hardback_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (agent) holding a book. The question asks if the object labeled \"hardback_1\" is within the agent's reach. \"hardback_1\" is a book on a small table in front of the agent. Since the agent is currently holding a book, it is reasonable to assume it was able to reach the table and pick up the book. Therefore, \"hardback_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_1": ["yes", 1.349847425675954e-13, 2.6580073455824763e-14, "The image shows a robotic arm (the agent) holding an object. The question asks if table_1 is within reach of the agent. Table_1 is the table with the book on it, which is in the foreground. The agent is holding an object directly above table_1. Therefore, table_1 is in reach of the agent.", false, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The question asks if table_1 is within reach of the agent. Table_1 is the table with the book on it, which is in the foreground. The agent is holding an object directly above table_1. Therefore, table_1 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable book_1": ["yes", 2.6637001523770187e-13, 2.4776272748933473e-14, "The image shows a robotic arm (the agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently held by the agent. Since the agent is holding \"book_1\", it is clearly within reach.", false, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently held by the agent. Since the agent is holding \"book_1\", it is clearly within reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable shelf_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(shelf_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable shelf_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable shelf_1": ["yes", 2.782586173196572e-13, 1.489410943753336e-13, "The image shows a robotic arm (the agent) extending towards a picture hanging on the wall. The question asks if \"shelf_1\" is in reach of the agent. Since the agent is reaching towards the picture on the wall, and the picture is hanging on the wall, it is reasonable to assume that the picture is on a shelf. Therefore, the shelf is in reach of the agent.", true, "Question: Is the shelf_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) extending towards a picture hanging on the wall. The question asks if \"shelf_1\" is in reach of the agent. Since the agent is reaching towards the picture on the wall, and the picture is hanging on the wall, it is reasonable to assume that the picture is on a shelf. Therefore, the shelf is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable book_1": ["yes", 1.9771899774975038e-13, 1.1154542154041044e-14, "The image shows a robotic arm (the agent) and a table with several books on it. The question asks if \"book_1\" is within the reach of the agent. Based on the image, the agent's arm is positioned above the table and appears to be close enough to potentially grasp one of the books. \"book_1\" is one of the books on the table. Therefore, the answer is \"Yes\".", false, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table with several books on it. The question asks if \"book_1\" is within the reach of the agent. Based on the image, the agent's arm is positioned above the table and appears to be close enough to potentially grasp one of the books. \"book_1\" is one of the books on the table. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable hardback_1": {"before": true, "after": false}, "reachable table_1": {"before": true, "after": false}}}, "action_info": "success"}, {"action": "grasp(book_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable book_1": ["yes", 1.4293109068270332e-13, 1.0353894425044283e-14, "The image shows a robotic arm (the agent) and a table with several books on it. The question asks if \"book_1\" is within the reach of the agent. Based on the image, the agent's arm is positioned above the table and appears to be close enough to potentially grasp one of the books. \"book_1\" is one of the books on the table. Therefore, the answer is \"Yes\".", true, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table with several books on it. The question asks if \"book_1\" is within the reach of the agent. Based on the image, the agent's arm is positioned above the table and appears to be close enough to potentially grasp one of the books. \"book_1\" is one of the books on the table. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding hardback_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "grasp(book_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable book_1": ["yes", 1.4293109068270332e-13, 1.0353894425044283e-14, "The image shows a robotic arm (the agent) and a table with several books on it. The question asks if \"book_1\" is within the reach of the agent. Based on the image, the agent's arm is positioned above the table and appears to be close enough to potentially grasp one of the books. \"book_1\" is one of the books on the table. Therefore, the answer is \"Yes\".", true, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table with several books on it. The question asks if \"book_1\" is within the reach of the agent. Based on the image, the agent's arm is positioned above the table and appears to be close enough to potentially grasp one of the books. \"book_1\" is one of the books on the table. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding hardback_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable hardback_1": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "reachable book_1": ["yes", "yes"], "reachable book_2": ["yes", "yes"], "holding hardback_1": ["yes", "no"], "holding book_1": ["yes", "yes"], "holding book_2": ["yes", "no"], "ontop hardback_1,table_1": ["yes", "yes"], "ontop hardback_1,book_1": ["no", "no"], "ontop hardback_1,book_2": ["no", "no"], "ontop book_1,hardback_1": ["no", "no"], "ontop book_1,table_1": ["yes", "no"], "ontop book_1,book_2": ["no", "no"], "ontop book_2,hardback_1": ["no", "no"], "ontop book_2,table_1": ["yes", "yes"], "ontop book_2,book_1": ["no", "no"], "nextto hardback_1,table_1": ["yes", "no"], "nextto hardback_1,book_1": ["no", "no"], "nextto hardback_1,book_2": ["yes", "yes"], "nextto book_1,hardback_1": ["no", "no"], "nextto book_1,table_1": ["yes", "no"], "nextto book_1,book_2": ["no", "no"], "nextto book_2,hardback_1": ["yes", "yes"], "nextto book_2,table_1": ["yes", "no"], "nextto book_2,book_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.76, "yes_accuracy": 1.0, "yes_correct": 9, "yes_total": 9, "no_accuracy": 0.625, "no_correct": 10, "no_total": 16, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.3333333333333333, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "ontop": {"accuracy": 0.8888888888888888, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.8571428571428571, "no_correct": 6, "no_total": 7}, "nextto": {"accuracy": 0.6666666666666666, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.5714285714285714, "no_correct": 4, "no_total": 7}}}, "step": 3, "actions": ["navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "place-on(hardback_1, shelf_1)"]}, {"enum_results": {"reachable shelf_1": ["yes", "yes"], "reachable book_1": ["yes", "yes"], "holding book_1": ["no", "yes"], "ontop book_1,shelf_1": ["no", "no"], "nextto book_1,shelf_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "nextto": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}}}, "step": 4, "actions": ["grasp(book_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"]}, {"enum_results": {"reachable shelf_1": ["yes", "yes"], "reachable book_1": ["yes", "yes"], "holding book_1": ["no", "yes"], "ontop book_1,shelf_1": ["no", "no"], "nextto book_1,shelf_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "nextto": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}}}, "step": 5, "actions": ["grasp(book_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"]}], "remaining_actions": ["place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"]}, "data/planning/igibson/medium/sorting_books_medium.pddl_Pomaria_1_int_20": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(book_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable book_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable book_1": ["yes", 6.029925365448607e-13, 7.201718740671229e-14, "The image shows a robotic arm (the agent) and a book (book_1) on the floor. I need to determine if the agent can reach the book. Based on the image, the book appears to be relatively close to the base of the robotic arm. It seems plausible that the arm could extend and grasp the book. Therefore, the book is in reach of the agent.", true, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a book (book_1) on the floor. I need to determine if the agent can reach the book. Based on the image, the book appears to be relatively close to the base of the robotic arm. It seems plausible that the arm could extend and grasp the book. Therefore, the book is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"reachable hardback_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}, "reachable shelf_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(book_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable book_1": ["yes", 6.029925365448607e-13, 7.201718740671229e-14, "The image shows a robotic arm (the agent) and a book (book_1) on the floor. I need to determine if the agent can reach the book. Based on the image, the book appears to be relatively close to the base of the robotic arm. It seems plausible that the arm could extend and grasp the book. Therefore, the book is in reach of the agent.", true, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a book (book_1) on the floor. I need to determine if the agent can reach the book. Based on the image, the book appears to be relatively close to the base of the robotic arm. It seems plausible that the arm could extend and grasp the book. Therefore, the book is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding hardback_1": [true, false, false], "all_correct": true}, "effects_results": {"holding book_1": ["yes", 1.84183180859665e-14, 9.858614779026907e-15, "The image shows a robotic arm, which is the agent. The agent is holding a white object that appears to be a book with some drawings on it. The object being held is labeled as \"book_1\". Therefore, the agent is holding the book_1.", true, "Question: Is the agent holding the book_1\n<explanation>\nThe image shows a robotic arm, which is the agent. The agent is holding a white object that appears to be a book with some drawings on it. The object being held is labeled as \"book_1\". Therefore, the agent is holding the book_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"ontop book_1,hardback_1": {"before": false, "after": false}, "ontop book_1,table_1": {"before": false, "after": false}, "ontop book_1,shelf_1": {"before": false, "after": false}, "ontop book_1,book_1": {"before": null, "after": false}, "nextto book_1,hardback_1": {"before": false, "after": false}, "nextto book_1,table_1": {"before": false, "after": false}, "nextto book_1,shelf_1": {"before": false, "after": false}, "nextto book_1,book_1": {"before": null, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(hardback_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable hardback_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable hardback_1": ["yes", 3.144215844717163e-13, 3.313978797869592e-14, "The image shows a robotic arm (the agent) holding a white object. The agent is positioned above a table with a book labeled \"hardback_1\" on it. The agent is very close to the book, and appears to be holding it. Therefore, the hardback_1 is in reach of the agent.", true, "Question: Is the hardback_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) holding a white object. The agent is positioned above a table with a book labeled \"hardback_1\" on it. The agent is very close to the book, and appears to be holding it. Therefore, the hardback_1 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_1": ["yes", 2.46910402280226e-13, 9.083325861218225e-14, "The image shows a robotic arm (the agent) holding a white object. The question asks if table_1 is within reach of the agent. Table_1 is the table with the book on it, which is in the lower right corner of the image. The agent is holding an object above and to the left of table_1. Visually, it appears that the agent could lower the object it is holding onto table_1. Therefore, table_1 is in reach of the agent.", false, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) holding a white object. The question asks if table_1 is within reach of the agent. Table_1 is the table with the book on it, which is in the lower right corner of the image. The agent is holding an object above and to the left of table_1. Visually, it appears that the agent could lower the object it is holding onto table_1. Therefore, table_1 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable book_1": ["yes", 5.374558220347381e-13, 9.339581110443321e-14, "The image shows a robotic arm (the agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently held by the agent. Therefore, \"book_1\" is in reach of the agent.", false, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently held by the agent. Therefore, \"book_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable shelf_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(hardback_1, book_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding hardback_1": ["yes", 1.3581593261060426e-13, 1.3581593261060426e-13, "The image shows a robotic arm holding a white object. The object is labeled as \"book\" and has a red outline. The question asks if the agent is holding \"hardback_1\". The object the agent is holding appears to be a book, and the label \"book\" is visible. However, it is not explicitly stated that the book is \"hardback_1\". Since the agent is holding a book, and the question asks about a specific book, I will assume that the book the agent is holding is \"hardback_1\".", true, "Question: Is the agent holding the hardback_1\n<explanation>\nThe image shows a robotic arm holding a white object. The object is labeled as \"book\" and has a red outline. The question asks if the agent is holding \"hardback_1\". The object the agent is holding appears to be a book, and the label \"book\" is visible. However, it is not explicitly stated that the book is \"hardback_1\". Since the agent is holding a book, and the question asks about a specific book, I will assume that the book the agent is holding is \"hardback_1\".\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable book_1": ["yes", 7.354729889344491e-13, 1.278060502481887e-13, "The image shows a robotic arm (the agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently being held by the agent. Therefore, \"book_1\" is in reach of the agent.", true, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently being held by the agent. Therefore, \"book_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(hardback_1, book_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding hardback_1": ["yes", 1.3581593261060426e-13, 1.3581593261060426e-13, "The image shows a robotic arm holding a white object. The object is labeled as \"book\" and has a red outline. The question asks if the agent is holding \"hardback_1\". The object the agent is holding appears to be a book, and the label \"book\" is visible. However, it is not explicitly stated that the book is \"hardback_1\". Since the agent is holding a book, and the question asks about a specific book, I will assume that the book the agent is holding is \"hardback_1\".", true, "Question: Is the agent holding the hardback_1\n<explanation>\nThe image shows a robotic arm holding a white object. The object is labeled as \"book\" and has a red outline. The question asks if the agent is holding \"hardback_1\". The object the agent is holding appears to be a book, and the label \"book\" is visible. However, it is not explicitly stated that the book is \"hardback_1\". Since the agent is holding a book, and the question asks about a specific book, I will assume that the book the agent is holding is \"hardback_1\".\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable book_1": ["yes", 7.354729889344491e-13, 1.278060502481887e-13, "The image shows a robotic arm (the agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently being held by the agent. Therefore, \"book_1\" is in reach of the agent.", true, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently being held by the agent. Therefore, \"book_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable hardback_1": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "reachable book_1": ["yes", "yes"], "reachable book_2": ["yes", "yes"], "holding hardback_1": ["yes", "no"], "holding book_1": ["no", "yes"], "holding book_2": ["yes", "no"], "ontop hardback_1,table_1": ["yes", "yes"], "ontop hardback_1,book_1": ["no", "no"], "ontop hardback_1,book_2": ["no", "no"], "ontop book_1,hardback_1": ["yes", "no"], "ontop book_1,table_1": ["yes", "no"], "ontop book_1,book_2": ["no", "no"], "ontop book_2,hardback_1": ["yes", "no"], "ontop book_2,table_1": ["yes", "yes"], "ontop book_2,book_1": ["no", "no"], "nextto hardback_1,table_1": ["yes", "no"], "nextto hardback_1,book_1": ["no", "no"], "nextto hardback_1,book_2": ["yes", "yes"], "nextto book_1,hardback_1": ["yes", "no"], "nextto book_1,table_1": ["yes", "no"], "nextto book_1,book_2": ["no", "no"], "nextto book_2,hardback_1": ["yes", "yes"], "nextto book_2,table_1": ["yes", "no"], "nextto book_2,book_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.56, "yes_accuracy": 0.8888888888888888, "yes_correct": 8, "yes_total": 9, "no_accuracy": 0.375, "no_correct": 6, "no_total": 16, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "ontop": {"accuracy": 0.6666666666666666, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.5714285714285714, "no_correct": 4, "no_total": 7}, "nextto": {"accuracy": 0.4444444444444444, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.2857142857142857, "no_correct": 2, "no_total": 7}}}, "step": 3, "actions": ["place-next-to(hardback_1, book_1)", "grasp(book_1)", "navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"]}, {"enum_results": {"reachable hardback_1": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "reachable book_1": ["yes", "yes"], "reachable book_2": ["yes", "yes"], "holding hardback_1": ["yes", "no"], "holding book_1": ["no", "yes"], "holding book_2": ["yes", "no"], "ontop hardback_1,table_1": ["yes", "yes"], "ontop hardback_1,book_1": ["no", "no"], "ontop hardback_1,book_2": ["no", "no"], "ontop book_1,hardback_1": ["yes", "no"], "ontop book_1,table_1": ["yes", "no"], "ontop book_1,book_2": ["no", "no"], "ontop book_2,hardback_1": ["yes", "no"], "ontop book_2,table_1": ["yes", "yes"], "ontop book_2,book_1": ["no", "no"], "nextto hardback_1,table_1": ["yes", "no"], "nextto hardback_1,book_1": ["no", "no"], "nextto hardback_1,book_2": ["yes", "yes"], "nextto book_1,hardback_1": ["yes", "no"], "nextto book_1,table_1": ["yes", "no"], "nextto book_1,book_2": ["no", "no"], "nextto book_2,hardback_1": ["yes", "yes"], "nextto book_2,table_1": ["yes", "no"], "nextto book_2,book_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.56, "yes_accuracy": 0.8888888888888888, "yes_correct": 8, "yes_total": 9, "no_accuracy": 0.375, "no_correct": 6, "no_total": 16, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "ontop": {"accuracy": 0.6666666666666666, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.5714285714285714, "no_correct": 4, "no_total": 7}, "nextto": {"accuracy": 0.4444444444444444, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.2857142857142857, "no_correct": 2, "no_total": 7}}}, "step": 4, "actions": ["place-next-to(hardback_1, book_1)", "grasp(book_1)", "navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"]}], "remaining_actions": ["grasp(book_1)", "navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"]}, "data/planning/igibson/medium/sorting_books_medium.pddl_Pomaria_1_int_21": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(book_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable book_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable book_1": ["yes", 1.169929062481978e-12, 1.397281270722195e-13, "The image shows a robotic arm (the agent) and a book on the floor. I need to determine if the book is within the reach of the agent. Based on the image, the book appears to be relatively close to the agent, and the agent's arm seems capable of extending to reach it. Therefore, the book is likely within the agent's reach.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a book on the floor. I need to determine if the book is within the reach of the agent. Based on the image, the book appears to be relatively close to the agent, and the agent's arm seems capable of extending to reach it. Therefore, the book is likely within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"reachable hardback_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}, "reachable shelf_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(book_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable book_1": ["yes", 1.169929062481978e-12, 1.397281270722195e-13, "The image shows a robotic arm (the agent) and a book on the floor. I need to determine if the book is within the reach of the agent. Based on the image, the book appears to be relatively close to the agent, and the agent's arm seems capable of extending to reach it. Therefore, the book is likely within the agent's reach.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a book on the floor. I need to determine if the book is within the reach of the agent. Based on the image, the book appears to be relatively close to the agent, and the agent's arm seems capable of extending to reach it. Therefore, the book is likely within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding hardback_1": [true, false, false], "all_correct": true}, "effects_results": {"holding book_1": ["yes", 7.238948210395307e-14, 2.0739932056370973e-14, "The image shows a robotic arm (the agent) and a book. The book appears to be grasped by the robotic arm's gripper. Therefore, the agent is holding the book. The book is labeled as book_1.", true, "Question: Is the agent holding the book_1\n<explanation>\nThe image shows a robotic arm (the agent) and a book. The book appears to be grasped by the robotic arm's gripper. Therefore, the agent is holding the book. The book is labeled as book_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"ontop book_1,hardback_1": {"before": false, "after": false}, "ontop book_1,table_1": {"before": false, "after": false}, "ontop book_1,shelf_1": {"before": false, "after": false}, "ontop book_1,book_1": {"before": null, "after": false}, "nextto book_1,hardback_1": {"before": false, "after": false}, "nextto book_1,table_1": {"before": false, "after": false}, "nextto book_1,shelf_1": {"before": false, "after": false}, "nextto book_1,book_1": {"before": null, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(hardback_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable hardback_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable hardback_1": ["yes", 1.1846441525225487e-13, 6.683305100205032e-15, "The image shows a robotic arm (the agent) and a book labeled \"hardback_1\" on a table. I need to determine if the agent can reach the book. The agent's arm is currently extended towards the book, and the red bounding box around the book indicates it is being targeted by the agent. Therefore, the book is in reach of the agent.", true, "Question: Is the hardback_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a book labeled \"hardback_1\" on a table. I need to determine if the agent can reach the book. The agent's arm is currently extended towards the book, and the red bounding box around the book indicates it is being targeted by the agent. Therefore, the book is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_1": ["yes", 1.1952702824898076e-13, 2.3536267336130012e-14, "The image shows a robotic arm (the agent) and a table labeled \"table_1\". I need to determine if the agent can reach the table. Looking at the image, the agent's arm is extended towards the table, and appears to be close enough to interact with it. Therefore, the table is within the agent's reach.", false, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table labeled \"table_1\". I need to determine if the agent can reach the table. Looking at the image, the agent's arm is extended towards the table, and appears to be close enough to interact with it. Therefore, the table is within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable book_1": ["yes", 1.1566924718389715e-13, 1.0758915934268136e-14, "The image shows a robotic arm (the agent) and a book labeled \"book_1\". I need to determine if the agent can reach the book. The book is on a table, and the agent's arm is positioned near the table. Based on the image, the agent's arm appears to be close enough to the book to grasp it. Therefore, the book is in reach of the agent.", false, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a book labeled \"book_1\". I need to determine if the agent can reach the book. The book is on a table, and the agent's arm is positioned near the table. Based on the image, the agent's arm appears to be close enough to the book to grasp it. Therefore, the book is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable shelf_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(hardback_1, book_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding hardback_1": ["yes", 5.673781079294435e-14, 2.3651839899585178e-14, "The image shows a robotic arm with a red outline around a book. The book is labeled as \"hardback_1\". The robotic arm is grasping the book. Therefore, the agent is holding the hardback_1.", true, "Question: Is the agent holding the hardback_1\n<explanation>\nThe image shows a robotic arm with a red outline around a book. The book is labeled as \"hardback_1\". The robotic arm is grasping the book. Therefore, the agent is holding the hardback_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable book_1": ["yes", 8.913827792209061e-14, 8.291151511012618e-15, "The image shows a robotic arm (the agent) and a book labeled \"book_1\". I need to determine if the agent can reach the book. The book is on a table, and the agent's arm appears to be positioned such that it could potentially reach the book. The distance between the agent and the book appears to be within the arm's range of motion. Therefore, the book is in reach of the agent.", true, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a book labeled \"book_1\". I need to determine if the agent can reach the book. The book is on a table, and the agent's arm appears to be positioned such that it could potentially reach the book. The distance between the agent and the book appears to be within the arm's range of motion. Therefore, the book is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(hardback_1, book_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding hardback_1": ["yes", 5.673781079294435e-14, 2.3651839899585178e-14, "The image shows a robotic arm with a red outline around a book. The book is labeled as \"hardback_1\". The robotic arm is grasping the book. Therefore, the agent is holding the hardback_1.", true, "Question: Is the agent holding the hardback_1\n<explanation>\nThe image shows a robotic arm with a red outline around a book. The book is labeled as \"hardback_1\". The robotic arm is grasping the book. Therefore, the agent is holding the hardback_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable book_1": ["yes", 8.913827792209061e-14, 8.291151511012618e-15, "The image shows a robotic arm (the agent) and a book labeled \"book_1\". I need to determine if the agent can reach the book. The book is on a table, and the agent's arm appears to be positioned such that it could potentially reach the book. The distance between the agent and the book appears to be within the arm's range of motion. Therefore, the book is in reach of the agent.", true, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a book labeled \"book_1\". I need to determine if the agent can reach the book. The book is on a table, and the agent's arm appears to be positioned such that it could potentially reach the book. The distance between the agent and the book appears to be within the arm's range of motion. Therefore, the book is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable hardback_1": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "reachable book_1": ["yes", "yes"], "reachable book_2": ["yes", "yes"], "holding hardback_1": ["yes", "no"], "holding book_1": ["no", "yes"], "holding book_2": ["yes", "no"], "ontop hardback_1,table_1": ["yes", "yes"], "ontop hardback_1,book_1": ["no", "no"], "ontop hardback_1,book_2": ["yes", "no"], "ontop book_1,hardback_1": ["yes", "no"], "ontop book_1,table_1": ["yes", "no"], "ontop book_1,book_2": ["no", "no"], "ontop book_2,hardback_1": ["yes", "no"], "ontop book_2,table_1": ["no", "yes"], "ontop book_2,book_1": ["yes", "no"], "nextto hardback_1,table_1": ["yes", "no"], "nextto hardback_1,book_1": ["yes", "no"], "nextto hardback_1,book_2": ["yes", "yes"], "nextto book_1,hardback_1": ["yes", "no"], "nextto book_1,table_1": ["yes", "no"], "nextto book_1,book_2": ["yes", "no"], "nextto book_2,hardback_1": ["yes", "yes"], "nextto book_2,table_1": ["no", "no"], "nextto book_2,book_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.4, "yes_accuracy": 0.7777777777777778, "yes_correct": 7, "yes_total": 9, "no_accuracy": 0.1875, "no_correct": 3, "no_total": 16, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "ontop": {"accuracy": 0.3333333333333333, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.2857142857142857, "no_correct": 2, "no_total": 7}, "nextto": {"accuracy": 0.3333333333333333, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.14285714285714285, "no_correct": 1, "no_total": 7}}}, "step": 3, "actions": ["place-next-to(hardback_1, book_1)", "grasp(book_1)", "navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"]}, {"enum_results": {"reachable hardback_1": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "reachable book_1": ["yes", "yes"], "reachable book_2": ["yes", "yes"], "holding hardback_1": ["yes", "no"], "holding book_1": ["no", "yes"], "holding book_2": ["yes", "no"], "ontop hardback_1,table_1": ["yes", "yes"], "ontop hardback_1,book_1": ["no", "no"], "ontop hardback_1,book_2": ["yes", "no"], "ontop book_1,hardback_1": ["yes", "no"], "ontop book_1,table_1": ["yes", "no"], "ontop book_1,book_2": ["no", "no"], "ontop book_2,hardback_1": ["yes", "no"], "ontop book_2,table_1": ["no", "yes"], "ontop book_2,book_1": ["yes", "no"], "nextto hardback_1,table_1": ["yes", "no"], "nextto hardback_1,book_1": ["yes", "no"], "nextto hardback_1,book_2": ["yes", "yes"], "nextto book_1,hardback_1": ["yes", "no"], "nextto book_1,table_1": ["yes", "no"], "nextto book_1,book_2": ["yes", "no"], "nextto book_2,hardback_1": ["yes", "yes"], "nextto book_2,table_1": ["no", "no"], "nextto book_2,book_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.4, "yes_accuracy": 0.7777777777777778, "yes_correct": 7, "yes_total": 9, "no_accuracy": 0.1875, "no_correct": 3, "no_total": 16, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "ontop": {"accuracy": 0.3333333333333333, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.2857142857142857, "no_correct": 2, "no_total": 7}, "nextto": {"accuracy": 0.3333333333333333, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.14285714285714285, "no_correct": 1, "no_total": 7}}}, "step": 4, "actions": ["place-next-to(hardback_1, book_1)", "grasp(book_1)", "navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"]}], "remaining_actions": ["grasp(book_1)", "navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"]}, "data/planning/igibson/medium/sorting_books_medium.pddl_Pomaria_1_int_23": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(book_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable book_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable book_1": ["yes", 3.798205239907704e-13, 1.6688149953180027e-14, "The image shows a robotic arm (the agent) and a book (book_1) on the floor. I need to determine if the agent can reach the book. Looking at the image, the book is relatively close to the agent, and the agent's arm appears to have a sufficient range of motion to reach the book. Therefore, the book is in reach of the agent.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a book (book_1) on the floor. I need to determine if the agent can reach the book. Looking at the image, the book is relatively close to the agent, and the agent's arm appears to have a sufficient range of motion to reach the book. Therefore, the book is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"reachable hardback_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}, "reachable shelf_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(book_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable book_1": ["yes", 3.798205239907704e-13, 1.6688149953180027e-14, "The image shows a robotic arm (the agent) and a book (book_1) on the floor. I need to determine if the agent can reach the book. Looking at the image, the book is relatively close to the agent, and the agent's arm appears to have a sufficient range of motion to reach the book. Therefore, the book is in reach of the agent.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a book (book_1) on the floor. I need to determine if the agent can reach the book. Looking at the image, the book is relatively close to the agent, and the agent's arm appears to have a sufficient range of motion to reach the book. Therefore, the book is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding hardback_1": [true, false, false], "all_correct": true}, "effects_results": {"holding book_1": ["yes", 2.8161210884926346e-13, 4.893685080103495e-14, "The image shows a robotic arm holding a white object that appears to be a book. The object is labeled as \"book_1\". Therefore, the agent is holding the book_1.", true, "Question: Is the agent holding the book_1\n<explanation>\nThe image shows a robotic arm holding a white object that appears to be a book. The object is labeled as \"book_1\". Therefore, the agent is holding the book_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"ontop book_1,hardback_1": {"before": false, "after": false}, "ontop book_1,table_1": {"before": false, "after": false}, "ontop book_1,shelf_1": {"before": false, "after": false}, "ontop book_1,book_1": {"before": null, "after": false}, "nextto book_1,hardback_1": {"before": false, "after": false}, "nextto book_1,table_1": {"before": false, "after": false}, "nextto book_1,shelf_1": {"before": false, "after": false}, "nextto book_1,book_1": {"before": null, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(hardback_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable hardback_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable hardback_1": ["yes", 1.7167895523164528e-13, 1.8094829427146505e-14, "The image shows a robotic arm (agent) holding a book. The question asks if the object labeled \"hardback_1\" is within the agent's reach. \"hardback_1\" is a book on a small table in front of the agent. The agent is currently holding a book, but it appears to be close enough to reach the \"hardback_1\" book on the table. Therefore, the answer is \"Yes\".", true, "Question: Is the hardback_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (agent) holding a book. The question asks if the object labeled \"hardback_1\" is within the agent's reach. \"hardback_1\" is a book on a small table in front of the agent. The agent is currently holding a book, but it appears to be close enough to reach the \"hardback_1\" book on the table. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_1": ["yes", 1.1883408753549096e-13, 3.404653674873165e-14, "The image shows a robotic arm (agent) holding a book. The question asks if table_1 is in reach of the agent. Table_1 is the table with a book on it in the foreground. The agent is holding a book and is positioned such that it can reach the table with the book on it. Therefore, the table_1 is in reach of the agent.", false, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (agent) holding a book. The question asks if table_1 is in reach of the agent. Table_1 is the table with a book on it in the foreground. The agent is holding a book and is positioned such that it can reach the table with the book on it. Therefore, the table_1 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable book_1": ["yes", 2.1383157018054627e-13, 3.2792131775824865e-14, "The image shows a robotic arm (agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently held by the agent. Since the agent is holding \"book_1\", it is clearly within reach.", false, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently held by the agent. Since the agent is holding \"book_1\", it is clearly within reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable shelf_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(hardback_1, book_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding hardback_1": ["yes", 1.2008783182269889e-13, 3.4405739704739674e-14, "The image shows a robotic arm holding a book. The book is labeled as \"hardback_1\". Therefore, the agent is holding the hardback_1.", true, "Question: Is the agent holding the hardback_1\n<explanation>\nThe image shows a robotic arm holding a book. The book is labeled as \"hardback_1\". Therefore, the agent is holding the hardback_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable book_1": ["yes", 2.1383157018054627e-13, 2.893895179371074e-14, "The image shows a robotic arm (agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently held by the agent. Since the agent is holding \"book_1\", it is definitely within reach.", true, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently held by the agent. Since the agent is holding \"book_1\", it is definitely within reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(hardback_1, book_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding hardback_1": ["yes", 1.2008783182269889e-13, 3.4405739704739674e-14, "The image shows a robotic arm holding a book. The book is labeled as \"hardback_1\". Therefore, the agent is holding the hardback_1.", true, "Question: Is the agent holding the hardback_1\n<explanation>\nThe image shows a robotic arm holding a book. The book is labeled as \"hardback_1\". Therefore, the agent is holding the hardback_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable book_1": ["yes", 2.1383157018054627e-13, 2.893895179371074e-14, "The image shows a robotic arm (agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently held by the agent. Since the agent is holding \"book_1\", it is definitely within reach.", true, "Question: Is the book_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (agent) holding a book. The question asks if \"book_1\" is in reach of the agent. \"book_1\" is the book currently held by the agent. Since the agent is holding \"book_1\", it is definitely within reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable hardback_1": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "reachable book_1": ["yes", "yes"], "reachable book_2": ["yes", "yes"], "holding hardback_1": ["yes", "no"], "holding book_1": ["no", "yes"], "holding book_2": ["yes", "no"], "ontop hardback_1,table_1": ["yes", "yes"], "ontop hardback_1,book_1": ["no", "no"], "ontop hardback_1,book_2": ["no", "no"], "ontop book_1,hardback_1": ["yes", "no"], "ontop book_1,table_1": ["yes", "no"], "ontop book_1,book_2": ["no", "no"], "ontop book_2,hardback_1": ["yes", "no"], "ontop book_2,table_1": ["yes", "yes"], "ontop book_2,book_1": ["no", "no"], "nextto hardback_1,table_1": ["yes", "no"], "nextto hardback_1,book_1": ["no", "no"], "nextto hardback_1,book_2": ["yes", "yes"], "nextto book_1,hardback_1": ["yes", "no"], "nextto book_1,table_1": ["yes", "no"], "nextto book_1,book_2": ["no", "no"], "nextto book_2,hardback_1": ["yes", "yes"], "nextto book_2,table_1": ["yes", "no"], "nextto book_2,book_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.6, "yes_accuracy": 0.8888888888888888, "yes_correct": 8, "yes_total": 9, "no_accuracy": 0.4375, "no_correct": 7, "no_total": 16, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "ontop": {"accuracy": 0.6666666666666666, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.5714285714285714, "no_correct": 4, "no_total": 7}, "nextto": {"accuracy": 0.5555555555555556, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}}}, "step": 3, "actions": ["place-next-to(hardback_1, book_1)", "grasp(book_1)", "navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"]}, {"enum_results": {"reachable hardback_1": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "reachable book_1": ["yes", "yes"], "reachable book_2": ["yes", "yes"], "holding hardback_1": ["yes", "no"], "holding book_1": ["no", "yes"], "holding book_2": ["yes", "no"], "ontop hardback_1,table_1": ["yes", "yes"], "ontop hardback_1,book_1": ["no", "no"], "ontop hardback_1,book_2": ["no", "no"], "ontop book_1,hardback_1": ["yes", "no"], "ontop book_1,table_1": ["yes", "no"], "ontop book_1,book_2": ["no", "no"], "ontop book_2,hardback_1": ["yes", "no"], "ontop book_2,table_1": ["yes", "yes"], "ontop book_2,book_1": ["no", "no"], "nextto hardback_1,table_1": ["yes", "no"], "nextto hardback_1,book_1": ["no", "no"], "nextto hardback_1,book_2": ["yes", "yes"], "nextto book_1,hardback_1": ["yes", "no"], "nextto book_1,table_1": ["yes", "no"], "nextto book_1,book_2": ["no", "no"], "nextto book_2,hardback_1": ["yes", "yes"], "nextto book_2,table_1": ["yes", "no"], "nextto book_2,book_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.6, "yes_accuracy": 0.8888888888888888, "yes_correct": 8, "yes_total": 9, "no_accuracy": 0.4375, "no_correct": 7, "no_total": 16, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "ontop": {"accuracy": 0.6666666666666666, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.5714285714285714, "no_correct": 4, "no_total": 7}, "nextto": {"accuracy": 0.5555555555555556, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}}}, "step": 4, "actions": ["place-next-to(hardback_1, book_1)", "grasp(book_1)", "navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"]}], "remaining_actions": ["grasp(book_1)", "navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"]}, "data/planning/igibson/medium/cleaning_out_drawers_medium.pddl_Benevolence_1_int_21": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable cabinet_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable cabinet_1": ["yes", 1.9771922814271203e-13, 2.3614194367277408e-14, "The image shows a kitchen scene with a robotic arm (the agent). The cabinet_1 is highlighted with a red bounding box. I need to determine if the agent can reach the cabinet_1. Visually, the agent's arm appears to be positioned in a way that it could potentially reach the cabinet_1, but it's not immediately obvious if it's within the arm's range of motion. However, given the perspective and the arm's general direction, it seems plausible that the cabinet_1 is within reach.", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). The cabinet_1 is highlighted with a red bounding box. I need to determine if the agent can reach the cabinet_1. Visually, the agent's arm appears to be positioned in a way that it could potentially reach the cabinet_1, but it's not immediately obvious if it's within the arm's range of motion. However, given the perspective and the arm's general direction, it seems plausible that the cabinet_1 is within reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable cabinet_2": ["yes", 3.153085702690267e-13, 1.778849318550841e-14, "The image shows a robotic arm (the agent) and a cabinet labeled \"cabinet_2\". The robotic arm appears to be positioned close enough to the cabinet that it could potentially interact with it. The cabinet is within the workspace of the robotic arm. Therefore, the cabinet_2 is in reach of the agent.", false, "Question: Is the cabinet_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a cabinet labeled \"cabinet_2\". The robotic arm appears to be positioned close enough to the cabinet that it could potentially interact with it. The cabinet is within the workspace of the robotic arm. Therefore, the cabinet_2 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable sink_1": ["yes", 6.901076932130934e-13, 8.242160480596145e-14, "The image shows a kitchen scene with a robotic arm (the agent). The agent is positioned near a kitchen counter. The sink, labeled as \"sink_1\", is visible on the left side of the image, partially obscured by a black chair. The agent's arm appears to be positioned such that it could potentially reach the sink, but it's not immediately obvious if it's within the agent's range of motion. However, given the proximity and the agent's capabilities in a virtual environment, it's reasonable to assume the sink is within reach.", false, "Question: Is the sink_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). The agent is positioned near a kitchen counter. The sink, labeled as \"sink_1\", is visible on the left side of the image, partially obscured by a black chair. The agent's arm appears to be positioned such that it could potentially reach the sink, but it's not immediately obvious if it's within the agent's range of motion. However, given the proximity and the agent's capabilities in a virtual environment, it's reasonable to assume the sink is within reach.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable bowl_1": {"before": false, "after": false}, "reachable spoon_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["yes", 2.782588883702003e-13, 2.588210306069417e-14, "The image shows a kitchen scene with a robotic arm (the agent). The cabinet_1 is highlighted with a red bounding box. I need to determine if the agent can reach the cabinet_1. Visually, the agent's arm appears to be positioned in a way that it could potentially reach the cabinet_1, but it's not immediately obvious if it's within the arm's range of motion. However, given the perspective and the arm's general direction, it seems plausible that the cabinet_1 is within reach.", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). The cabinet_1 is highlighted with a red bounding box. I need to determine if the agent can reach the cabinet_1. Visually, the agent's arm appears to be positioned in a way that it could potentially reach the cabinet_1, but it's not immediately obvious if it's within the arm's range of motion. However, given the perspective and the arm's general direction, it seems plausible that the cabinet_1 is within reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "open cabinet_1": ["no", 2.10716535366251e-13, 1.6410622318517587e-13, "I will examine the image to determine if cabinet_1 is open. The image shows cabinet_1 and it appears to be closed, as the door is visible and not revealing the inside of the cabinet. Therefore, the answer is \"No\".", true, "Question: Is the cabinet_1 open\n<explanation>\nI will examine the image to determine if cabinet_1 is open. The image shows cabinet_1 and it appears to be closed, as the door is visible and not revealing the inside of the cabinet. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding bowl_1": [true, false, false], "holding spoon_1": [true, false, false], "all_correct": true}, "effects_results": {"open cabinet_1": ["no", 2.3760924868290734e-13, 2.5043830128180372e-14, "I will examine the image to determine if cabinet_1 is open. The image shows cabinet_1 and its door is closed. Therefore, the answer is \"No\".", false, "Question: Is the cabinet_1 open\n<explanation>\nI will examine the image to determine if cabinet_1 is open. The image shows cabinet_1 and its door is closed. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", false], "reachable bowl_1": ["yes", 7.095974740960187e-13, 3.117753451242766e-14, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the bowl labeled \"bowl_1\" is within the reach of the agent. The agent is positioned near the counter with cabinets. The bowl is on the counter, and appears to be relatively close to the agent's current position. Based on the perspective and the agent's arm length, it seems likely that the bowl is within the agent's reach.", true, "Question: Is the bowl_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the bowl labeled \"bowl_1\" is within the reach of the agent. The agent is positioned near the counter with cabinets. The bowl is on the counter, and appears to be relatively close to the agent's current position. Based on the perspective and the agent's arm length, it seems likely that the bowl is within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {}}, "action_info": "success"}, {"action": "grasp(bowl_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable bowl_1": ["yes", 3.657332141131231e-13, 1.418101543853613e-14, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the bowl labeled \"bowl_1\" is within the reach of the agent. The agent is positioned near the counter with cabinets. The bowl is on the counter, and appears to be relatively close to the agent's current position. Based on the perspective and the general scale of the objects, it seems likely that the agent can reach the bowl.", true, "Question: Is the bowl_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the bowl labeled \"bowl_1\" is within the reach of the agent. The agent is positioned near the counter with cabinets. The bowl is on the counter, and appears to be relatively close to the agent's current position. Based on the perspective and the general scale of the objects, it seems likely that the agent can reach the bowl.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding spoon_1": [true, false, false], "all_correct": true}, "effects_results": {"holding bowl_1": ["no", 1.0701068937218894e-12, 2.2654163701202323e-12, "The image shows a robotic arm, which is the agent. The image also shows a bowl labeled \"bowl_1\". However, the agent is not currently holding the bowl_1. The bowl is located on the counter.", false, "Question: Is the agent holding the bowl_1\n<explanation>\nThe image shows a robotic arm, which is the agent. The image also shows a bowl labeled \"bowl_1\". However, the agent is not currently holding the bowl_1. The bowl is located on the counter.\n</explanation>\n<answer>\nNo\n</answer>", false], "ontop bowl_1,cabinet_1": ["no", 2.2404498503832138e-13, 3.435841427991068e-14, "The image shows a kitchen scene with various objects and cabinets. The question asks if bowl_1 is on top of cabinet_1. Looking at the image, bowl_1 is floating in the air above the cabinets, and cabinet_1 is a lower cabinet. Therefore, bowl_1 is not on top of cabinet_1.", true, "<explanation>\nThe image shows a kitchen scene with various objects and cabinets. The question asks if bowl_1 is on top of cabinet_1. Looking at the image, bowl_1 is floating in the air above the cabinets, and cabinet_1 is a lower cabinet. Therefore, bowl_1 is not on top of cabinet_1.\n</explanation>\n<answer>\nNo\n</answer>", true], "ontop bowl_1,cabinet_2": ["no", 1.9576305637300506e-13, 5.6087055708359604e-14, "The image shows a kitchen scene with various objects and cabinets. I need to determine if bowl_1 is on top of cabinet_2. Looking at the image, bowl_1 is floating in the air above the scene, and cabinet_2 is a lower cabinet with a stack of items on top of it. Bowl_1 is not on top of cabinet_2.", true, "<explanation>\nThe image shows a kitchen scene with various objects and cabinets. I need to determine if bowl_1 is on top of cabinet_2. Looking at the image, bowl_1 is floating in the air above the scene, and cabinet_2 is a lower cabinet with a stack of items on top of it. Bowl_1 is not on top of cabinet_2.\n</explanation>\n<answer>\nNo\n</answer>", true], "ontop bowl_1,sink_1": ["no", 5.054826999681405e-13, 2.7056538975424316e-13, "The image shows a kitchen scene with various objects. I need to determine if bowl_1 is on top of sink_1. Looking at the image, bowl_1 is floating in the air above the counter and sink_1 is on the counter. Therefore, bowl_1 is not on top of sink_1.", true, "<explanation>\nThe image shows a kitchen scene with various objects. I need to determine if bowl_1 is on top of sink_1. Looking at the image, bowl_1 is floating in the air above the counter and sink_1 is on the counter. Therefore, bowl_1 is not on top of sink_1.\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto bowl_1,cabinet_1": ["no", 1.7448638833707925e-13, 5.97059590827574e-15, "The image shows a kitchen scene with several objects and cabinets. I need to determine if bowl_1 is next to cabinet_1. Looking at the image, bowl_1 is located on top of cabinet_2, and cabinet_1 is on the left side of the image. They are not next to each other.", true, "<explanation>\nThe image shows a kitchen scene with several objects and cabinets. I need to determine if bowl_1 is next to cabinet_1. Looking at the image, bowl_1 is located on top of cabinet_2, and cabinet_1 is on the left side of the image. They are not next to each other.\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto bowl_1,cabinet_2": ["yes", 8.474942752786929e-14, 2.5592111590322765e-15, "The image shows a kitchen scene with several objects and cabinets. I need to determine if bowl_1 is next to cabinet_2. Looking at the image, bowl_1 is on the counter, and cabinet_2 is also on the counter. They are directly adjacent to each other. Therefore, bowl_1 is next to cabinet_2.", false, "<explanation>\nThe image shows a kitchen scene with several objects and cabinets. I need to determine if bowl_1 is next to cabinet_2. Looking at the image, bowl_1 is on the counter, and cabinet_2 is also on the counter. They are directly adjacent to each other. Therefore, bowl_1 is next to cabinet_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "nextto bowl_1,sink_1": ["yes", 3.227585570770436e-13, 3.0021226119208294e-14, "The image shows a kitchen scene. I need to determine if bowl_1 is next to sink_1. Looking at the image, bowl_1 is on the counter, and sink_1 is also on the counter, and they are adjacent to each other. Therefore, bowl_1 is next to sink_1.", false, "<explanation>\nThe image shows a kitchen scene. I need to determine if bowl_1 is next to sink_1. Looking at the image, bowl_1 is on the counter, and sink_1 is also on the counter, and they are adjacent to each other. Therefore, bowl_1 is next to sink_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "inside bowl_1,cabinet_1": ["no", 5.890737658949263e-13, 4.8354115850246515e-14, "The image shows a kitchen scene with several objects labeled. We are asked if bowl_1 is inside cabinet_1. Looking at the image, bowl_1 is floating in the air above the counter, and cabinet_1 is a cabinet on the counter. Bowl_1 is not inside cabinet_1.", true, "<explanation>\nThe image shows a kitchen scene with several objects labeled. We are asked if bowl_1 is inside cabinet_1. Looking at the image, bowl_1 is floating in the air above the counter, and cabinet_1 is a cabinet on the counter. Bowl_1 is not inside cabinet_1.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"ontop bowl_1,bowl_1": {"before": null, "after": false}, "ontop bowl_1,spoon_1": {"before": false, "after": false}, "nextto bowl_1,bowl_1": {"before": null, "after": false}, "nextto bowl_1,spoon_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(bowl_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable bowl_1": ["yes", 4.144302902155811e-13, 2.0633266891389133e-14, "The image shows a robotic arm (the agent) and a bowl labeled \"bowl_1\". To determine if the bowl is in reach, I need to assess the distance and any obstructions between the agent and the bowl. The bowl is located on the counter, and the agent is also near the counter. Visually, it appears the agent could potentially reach the bowl with some extension of its arm. Therefore, the bowl is in reach of the agent.", true, "Question: Is the bowl_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a bowl labeled \"bowl_1\". To determine if the bowl is in reach, I need to assess the distance and any obstructions between the agent and the bowl. The bowl is located on the counter, and the agent is also near the counter. Visually, it appears the agent could potentially reach the bowl with some extension of its arm. Therefore, the bowl is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding spoon_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable cabinet_1": ["yes", "yes"], "reachable cabinet_2": ["yes", "no"], "reachable sink_1": ["yes", "no"], "open cabinet_1": ["no", "no"], "open cabinet_2": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.4, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.25, "no_correct": 1, "no_total": 4, "predicates": {"reachable": {"accuracy": 0.3333333333333333, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "open": {"accuracy": 0.5, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}}}, "step": 1, "actions": ["open-container(cabinet_1)", "grasp(bowl_1)", "place-on(bowl_1, sink_1)", "navigate-to(spoon_1)", "grasp(spoon_1)", "navigate-to(sink_1)", "place-on(spoon_1, sink_1)"]}, {"enum_results": {"reachable bowl_1": ["yes", "yes"], "reachable bowl_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable cabinet_2": ["yes", "no"], "reachable piece_of_cloth_1": ["yes", "yes"], "reachable sink_1": ["yes", "no"], "holding bowl_1": ["no", "no"], "holding bowl_2": ["no", "no"], "holding piece_of_cloth_1": ["no", "no"], "open cabinet_1": ["yes", "yes"], "open cabinet_2": ["yes", "no"], "ontop bowl_1,bowl_2": ["no", "no"], "ontop bowl_1,cabinet_1": ["no", "no"], "ontop bowl_1,cabinet_2": ["yes", "no"], "ontop bowl_1,piece_of_cloth_1": ["no", "no"], "ontop bowl_1,sink_1": ["no", "no"], "ontop bowl_2,bowl_1": ["no", "no"], "ontop bowl_2,cabinet_1": ["no", "no"], "ontop bowl_2,cabinet_2": ["yes", "no"], "ontop bowl_2,piece_of_cloth_1": ["no", "no"], "ontop bowl_2,sink_1": ["no", "no"], "ontop piece_of_cloth_1,bowl_1": ["no", "no"], "ontop piece_of_cloth_1,bowl_2": ["no", "no"], "ontop piece_of_cloth_1,cabinet_1": ["no", "no"], "ontop piece_of_cloth_1,cabinet_2": ["no", "no"], "ontop piece_of_cloth_1,sink_1": ["no", "no"], "inside bowl_1,cabinet_1": ["no", "yes"], "inside bowl_1,cabinet_2": ["no", "no"], "inside bowl_2,cabinet_1": ["no", "yes"], "inside bowl_2,cabinet_2": ["no", "no"], "inside piece_of_cloth_1,cabinet_1": ["no", "yes"], "inside piece_of_cloth_1,cabinet_2": ["no", "no"], "nextto bowl_1,bowl_2": ["no", "no"], "nextto bowl_1,cabinet_1": ["no", "yes"], "nextto bowl_1,cabinet_2": ["yes", "no"], "nextto bowl_1,piece_of_cloth_1": ["yes", "no"], "nextto bowl_1,sink_1": ["yes", "no"], "nextto bowl_2,bowl_1": ["yes", "no"], "nextto bowl_2,cabinet_1": ["yes", "yes"], "nextto bowl_2,cabinet_2": ["yes", "no"], "nextto bowl_2,piece_of_cloth_1": ["yes", "yes"], "nextto bowl_2,sink_1": ["yes", "no"], "nextto piece_of_cloth_1,bowl_1": ["yes", "no"], "nextto piece_of_cloth_1,bowl_2": ["no", "yes"], "nextto piece_of_cloth_1,cabinet_1": ["yes", "yes"], "nextto piece_of_cloth_1,cabinet_2": ["yes", "no"], "nextto piece_of_cloth_1,sink_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5957446808510638, "yes_accuracy": 0.6153846153846154, "yes_correct": 8, "yes_total": 13, "no_accuracy": 0.5882352941176471, "no_correct": 20, "no_total": 34, "predicates": {"reachable": {"accuracy": 0.6666666666666666, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 3, "no_total": 3}, "open": {"accuracy": 0.5, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 1}, "ontop": {"accuracy": 0.8666666666666667, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.8666666666666667, "no_correct": 13, "no_total": 15}, "inside": {"accuracy": 0.5, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 3, "no_total": 3}, "nextto": {"accuracy": 0.26666666666666666, "yes_accuracy": 0.6, "yes_correct": 3, "yes_total": 5, "no_accuracy": 0.1, "no_correct": 1, "no_total": 10}}}, "step": 2, "actions": ["grasp(bowl_1)", "place-on(bowl_1, sink_1)", "navigate-to(spoon_1)", "grasp(spoon_1)", "navigate-to(sink_1)", "place-on(spoon_1, sink_1)"]}, {"enum_results": {"reachable bowl_1": ["yes", "yes"], "reachable bowl_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable cabinet_2": ["yes", "no"], "reachable piece_of_cloth_1": ["yes", "yes"], "reachable sink_1": ["no", "no"], "holding bowl_1": ["no", "yes"], "holding bowl_2": ["no", "no"], "holding piece_of_cloth_1": ["no", "no"], "open cabinet_1": ["yes", "yes"], "open cabinet_2": ["yes", "no"], "ontop bowl_1,bowl_2": ["no", "no"], "ontop bowl_1,cabinet_1": ["no", "no"], "ontop bowl_1,cabinet_2": ["no", "no"], "ontop bowl_1,piece_of_cloth_1": ["no", "no"], "ontop bowl_1,sink_1": ["no", "no"], "ontop bowl_2,bowl_1": ["no", "no"], "ontop bowl_2,cabinet_1": ["no", "no"], "ontop bowl_2,cabinet_2": ["no", "no"], "ontop bowl_2,piece_of_cloth_1": ["no", "no"], "ontop bowl_2,sink_1": ["no", "no"], "ontop piece_of_cloth_1,bowl_1": ["no", "no"], "ontop piece_of_cloth_1,bowl_2": ["no", "no"], "ontop piece_of_cloth_1,cabinet_1": ["no", "no"], "ontop piece_of_cloth_1,cabinet_2": ["yes", "no"], "ontop piece_of_cloth_1,sink_1": ["no", "no"], "inside bowl_1,cabinet_1": ["no", "no"], "inside bowl_1,cabinet_2": ["no", "no"], "inside bowl_2,cabinet_1": ["no", "yes"], "inside bowl_2,cabinet_2": ["no", "no"], "inside piece_of_cloth_1,cabinet_1": ["no", "yes"], "inside piece_of_cloth_1,cabinet_2": ["yes", "no"], "nextto bowl_1,bowl_2": ["no", "no"], "nextto bowl_1,cabinet_1": ["no", "no"], "nextto bowl_1,cabinet_2": ["yes", "no"], "nextto bowl_1,piece_of_cloth_1": ["yes", "no"], "nextto bowl_1,sink_1": ["yes", "no"], "nextto bowl_2,bowl_1": ["no", "no"], "nextto bowl_2,cabinet_1": ["no", "yes"], "nextto bowl_2,cabinet_2": ["yes", "no"], "nextto bowl_2,piece_of_cloth_1": ["yes", "yes"], "nextto bowl_2,sink_1": ["yes", "no"], "nextto piece_of_cloth_1,bowl_1": ["yes", "no"], "nextto piece_of_cloth_1,bowl_2": ["yes", "yes"], "nextto piece_of_cloth_1,cabinet_1": ["yes", "yes"], "nextto piece_of_cloth_1,cabinet_2": ["yes", "no"], "nextto piece_of_cloth_1,sink_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.6595744680851063, "yes_accuracy": 0.6666666666666666, "yes_correct": 8, "yes_total": 12, "no_accuracy": 0.6571428571428571, "no_correct": 23, "no_total": 35, "predicates": {"reachable": {"accuracy": 0.8333333333333334, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}, "holding": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.5, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 1}, "ontop": {"accuracy": 0.9333333333333333, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.9333333333333333, "no_correct": 14, "no_total": 15}, "inside": {"accuracy": 0.5, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 2, "no_accuracy": 0.75, "no_correct": 3, "no_total": 4}, "nextto": {"accuracy": 0.4, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.2727272727272727, "no_correct": 3, "no_total": 11}}}, "step": 3, "actions": ["grasp(bowl_1)", "navigate-to(spoon_1)", "navigate-to(sink_1)", "place-on(bowl_1, sink_1)", "navigate-to(spoon_1)", "grasp(spoon_1)", "navigate-to(sink_1)", "place-on(spoon_1, sink_1)"]}], "remaining_actions": ["navigate-to(spoon_1)", "navigate-to(sink_1)", "place-on(bowl_1, sink_1)", "navigate-to(spoon_1)", "grasp(spoon_1)", "navigate-to(sink_1)", "place-on(spoon_1, sink_1)"]}, "data/planning/igibson/medium/cleaning_out_drawers_medium.pddl_Rs_int_0": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable cabinet_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable cabinet_1": ["yes", 2.958045050224789e-13, 1.891014776678971e-14, "The image shows a robotic arm (the agent) and a cabinet labeled \"cabinet_1\". The red lines highlight the cabinet and the robotic arm. By visually inspecting the image, it appears that the robotic arm is positioned close enough to \"cabinet_1\" that it could potentially interact with it. Therefore, the cabinet is in reach of the agent.", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a cabinet labeled \"cabinet_1\". The red lines highlight the cabinet and the robotic arm. By visually inspecting the image, it appears that the robotic arm is positioned close enough to \"cabinet_1\" that it could potentially interact with it. Therefore, the cabinet is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable cabinet_2": ["yes", 2.2404498503832138e-13, 1.1154543001073991e-14, "The image shows a robotic arm (the agent) and a cabinet labeled \"cabinet_2\". The robotic arm appears to be positioned relatively close to cabinet_2, and it seems plausible that the arm could extend and interact with the cabinet. The red outline around cabinet_2 suggests it is an object of interest. Therefore, it is likely that cabinet_2 is within the reach of the agent.", false, "Question: Is the cabinet_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a cabinet labeled \"cabinet_2\". The robotic arm appears to be positioned relatively close to cabinet_2, and it seems plausible that the arm could extend and interact with the cabinet. The red outline around cabinet_2 suggests it is an object of interest. Therefore, it is likely that cabinet_2 is within the reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable sink_1": ["no", 1.643187674685645e-13, 3.666447164320588e-14, "The image shows a kitchen scene with a robotic arm (the agent). The agent is positioned near cabinets and a stove. The sink (sink_1) is visible in the background, to the left of the agent. Based on the perspective and the length of the robotic arm, it appears that the sink is too far away for the agent to reach it directly.", true, "Question: Is the sink_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). The agent is positioned near cabinets and a stove. The sink (sink_1) is visible in the background, to the left of the agent. Based on the perspective and the length of the robotic arm, it appears that the sink is too far away for the agent to reach it directly.\n</explanation>\n<answer>\nNo\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable bowl_1": {"before": false, "after": false}, "reachable spoon_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {"reachable cabinet_1": ["yes", 1.7276027071584654e-13, 1.1044194089804543e-14, "The image shows a robotic arm (the agent) and a cabinet labeled \"cabinet_1\". The red outline around the cabinet and the robotic arm indicates that they are objects of interest. Visually, the robotic arm appears to be positioned such that it could potentially reach the cabinet. The distance between the arm and the cabinet does not seem excessive. Therefore, it is likely that the cabinet is within the reach of the agent.", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a cabinet labeled \"cabinet_1\". The red outline around the cabinet and the robotic arm indicates that they are objects of interest. Visually, the robotic arm appears to be positioned such that it could potentially reach the cabinet. The distance between the arm and the cabinet does not seem excessive. Therefore, it is likely that the cabinet is within the reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "open cabinet_1": ["no", 4.835413617903725e-14, 7.972249705008594e-14, "The image shows a kitchen scene with cabinets and a robotic arm. The cabinet labeled \"cabinet_1\" is visible in the image. Upon inspection, the doors of \"cabinet_1\" appear to be closed. Therefore, the cabinet is not open.", true, "<explanation>\nThe image shows a kitchen scene with cabinets and a robotic arm. The cabinet labeled \"cabinet_1\" is visible in the image. Upon inspection, the doors of \"cabinet_1\" appear to be closed. Therefore, the cabinet is not open.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding bowl_1": [true, false, false], "holding spoon_1": [true, false, false], "all_correct": true}, "effects_results": {"open cabinet_1": ["no", 4.707811153718475e-14, 4.1546295212729206e-14, "The image shows a kitchen scene with cabinets and a robotic arm. The cabinet labeled 'cabinet_1' is visible in the image. Upon inspection, the doors of 'cabinet_1' appear to be closed. Therefore, the cabinet is not open.", false, "<explanation>\nThe image shows a kitchen scene with cabinets and a robotic arm. The cabinet labeled 'cabinet_1' is visible in the image. Upon inspection, the doors of 'cabinet_1' appear to be closed. Therefore, the cabinet is not open.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable bowl_1": {"before": false, "after": true}}}, "action_info": "executed but failed"}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["yes", 2.6075184221020786e-13, 1.1456637301712237e-14, "The image shows a robotic arm (the agent) and a cabinet labeled \"cabinet_1\". The red outline around both objects indicates they are being identified. Visually, the robotic arm appears to be positioned such that it could potentially reach \"cabinet_1\". The distance between the arm and the cabinet doesn't seem excessive. Therefore, it is likely that the cabinet is in reach of the agent.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a cabinet labeled \"cabinet_1\". The red outline around both objects indicates they are being identified. Visually, the robotic arm appears to be positioned such that it could potentially reach \"cabinet_1\". The distance between the arm and the cabinet doesn't seem excessive. Therefore, it is likely that the cabinet is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "open cabinet_1": ["no", 3.666447164320588e-14, 3.666447164320588e-14, "The image shows a kitchen scene with cabinets and a robotic arm. The cabinet labeled 'cabinet_1' is visible in the image. By visually inspecting the image, it appears that the doors of 'cabinet_1' are closed. Therefore, the cabinet is not open.", true, "<explanation>\nThe image shows a kitchen scene with cabinets and a robotic arm. The cabinet labeled 'cabinet_1' is visible in the image. By visually inspecting the image, it appears that the doors of 'cabinet_1' are closed. Therefore, the cabinet is not open.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding bowl_1": [true, false, false], "holding spoon_1": [true, false, false], "all_correct": true}, "effects_results": {"open cabinet_1": ["no", 1.6431878102109165e-13, 2.39082408384772e-13, "The image shows a kitchen scene with cabinets and a robotic arm. The cabinet labeled \"cabinet_1\" is visible in the lower left corner of the image. It appears to be closed, as the doors are fully visible and not ajar or open. Therefore, the answer is \"No\".", false, "<explanation>\nThe image shows a kitchen scene with cabinets and a robotic arm. The cabinet labeled \"cabinet_1\" is visible in the lower left corner of the image. It appears to be closed, as the doors are fully visible and not ajar or open. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", false], "reachable bowl_1": ["yes", 1.6203888003520767e-13, 9.14160816543972e-15, "The image shows a robotic arm (the agent) and a bowl labeled \"bowl_1\". The robotic arm is positioned near a cabinet. The bowl is on top of the cabinet. The robotic arm appears to be close enough to potentially reach the bowl. Therefore, the bowl is in reach of the agent.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a bowl labeled \"bowl_1\". The robotic arm is positioned near a cabinet. The bowl is on top of the cabinet. The robotic arm appears to be close enough to potentially reach the bowl. Therefore, the bowl is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {}}, "action_info": "success"}, {"action": "place-next-to(bowl_1, bowl_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding bowl_1": ["yes", 2.2182859119469073e-13, 8.160616957577152e-14, "The image shows a robotic arm (the agent) and two bowls labeled \"bowl_1\" and \"bowl_2\". The robotic arm is positioned near the bowls, and it appears to be grasping \"bowl_1\". Therefore, the agent is holding bowl_1.", true, "Question: Is the agent holding the bowl_1\n<explanation>\nThe image shows a robotic arm (the agent) and two bowls labeled \"bowl_1\" and \"bowl_2\". The robotic arm is positioned near the bowls, and it appears to be grasping \"bowl_1\". Therefore, the agent is holding bowl_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable bowl_1": ["yes", 1.6203888003520767e-13, 9.14160816543972e-15, "The image shows a robotic arm (the agent) and a bowl labeled \"bowl_1\". The robotic arm is positioned near a cabinet. The bowl is on top of the cabinet. The robotic arm appears to be close enough to potentially reach the bowl. Therefore, the bowl is in reach of the agent.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a bowl labeled \"bowl_1\". The robotic arm is positioned near a cabinet. The bowl is on top of the cabinet. The robotic arm appears to be close enough to potentially reach the bowl. Therefore, the bowl is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(bowl_1, bowl_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding bowl_1": ["yes", 2.2182859119469073e-13, 8.160616957577152e-14, "The image shows a robotic arm (the agent) and two bowls labeled \"bowl_1\" and \"bowl_2\". The robotic arm is positioned near the bowls, and it appears to be grasping \"bowl_1\". Therefore, the agent is holding bowl_1.", true, "Question: Is the agent holding the bowl_1\n<explanation>\nThe image shows a robotic arm (the agent) and two bowls labeled \"bowl_1\" and \"bowl_2\". The robotic arm is positioned near the bowls, and it appears to be grasping \"bowl_1\". Therefore, the agent is holding bowl_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable bowl_1": ["yes", 1.6203888003520767e-13, 9.14160816543972e-15, "The image shows a robotic arm (the agent) and a bowl labeled \"bowl_1\". The robotic arm is positioned near a cabinet. The bowl is on top of the cabinet. The robotic arm appears to be close enough to potentially reach the bowl. Therefore, the bowl is in reach of the agent.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a bowl labeled \"bowl_1\". The robotic arm is positioned near a cabinet. The bowl is on top of the cabinet. The robotic arm appears to be close enough to potentially reach the bowl. Therefore, the bowl is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable cabinet_1": ["yes", "yes"], "reachable cabinet_2": ["yes", "yes"], "reachable sink_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open cabinet_2": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2, "predicates": {"reachable": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}}}, "step": 1, "actions": ["open-container(cabinet_1)", "open-container(cabinet_2)", "grasp(bowl_1)", "navigate-to(sink_1)", "place-on(bowl_1, sink_1)", "navigate-to(spoon_1)", "grasp(spoon_1)", "navigate-to(sink_1)", "place-on(spoon_1, sink_1)"]}, {"enum_results": {"reachable cabinet_1": ["yes", "yes"], "reachable cabinet_2": ["yes", "yes"], "reachable sink_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open cabinet_2": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2, "predicates": {"reachable": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}}}, "step": 2, "actions": ["open-container(cabinet_1)", "open-container(cabinet_2)", "grasp(bowl_1)", "navigate-to(sink_1)", "place-on(bowl_1, sink_1)", "navigate-to(spoon_1)", "grasp(spoon_1)", "navigate-to(sink_1)", "place-on(spoon_1, sink_1)"]}, {"enum_results": {"reachable bowl_1": ["yes", "yes"], "reachable bowl_2": ["yes", "yes"], "reachable cabinet_1": ["no", "yes"], "reachable cabinet_2": ["yes", "yes"], "reachable piece_of_cloth_1": ["no", "yes"], "reachable sink_1": ["no", "yes"], "holding bowl_1": ["yes", "no"], "holding bowl_2": ["yes", "no"], "holding piece_of_cloth_1": ["no", "no"], "open cabinet_1": ["no", "yes"], "open cabinet_2": ["no", "no"], "ontop bowl_1,bowl_2": ["yes", "yes"], "ontop bowl_1,cabinet_1": ["no", "no"], "ontop bowl_1,cabinet_2": ["yes", "no"], "ontop bowl_1,piece_of_cloth_1": ["no", "no"], "ontop bowl_1,sink_1": ["no", "no"], "ontop bowl_2,bowl_1": ["yes", "yes"], "ontop bowl_2,cabinet_1": ["no", "no"], "ontop bowl_2,cabinet_2": ["yes", "no"], "ontop bowl_2,piece_of_cloth_1": ["no", "no"], "ontop bowl_2,sink_1": ["no", "no"], "ontop piece_of_cloth_1,bowl_1": ["no", "no"], "ontop piece_of_cloth_1,bowl_2": ["yes", "yes"], "ontop piece_of_cloth_1,cabinet_1": ["no", "no"], "ontop piece_of_cloth_1,cabinet_2": ["no", "no"], "ontop piece_of_cloth_1,sink_1": ["no", "no"], "inside bowl_1,cabinet_1": ["no", "yes"], "inside bowl_1,cabinet_2": ["no", "no"], "inside bowl_2,cabinet_1": ["no", "yes"], "inside bowl_2,cabinet_2": ["no", "no"], "inside piece_of_cloth_1,cabinet_1": ["no", "yes"], "inside piece_of_cloth_1,cabinet_2": ["no", "no"], "nextto bowl_1,bowl_2": ["yes", "yes"], "nextto bowl_1,cabinet_1": ["no", "yes"], "nextto bowl_1,cabinet_2": ["yes", "no"], "nextto bowl_1,piece_of_cloth_1": ["no", "no"], "nextto bowl_1,sink_1": ["no", "no"], "nextto bowl_2,bowl_1": ["yes", "yes"], "nextto bowl_2,cabinet_1": ["no", "yes"], "nextto bowl_2,cabinet_2": ["yes", "no"], "nextto bowl_2,piece_of_cloth_1": ["no", "no"], "nextto bowl_2,sink_1": ["no", "no"], "nextto piece_of_cloth_1,bowl_1": ["no", "no"], "nextto piece_of_cloth_1,bowl_2": ["no", "no"], "nextto piece_of_cloth_1,cabinet_1": ["no", "yes"], "nextto piece_of_cloth_1,cabinet_2": ["no", "no"], "nextto piece_of_cloth_1,sink_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.6595744680851063, "yes_accuracy": 0.4444444444444444, "yes_correct": 8, "yes_total": 18, "no_accuracy": 0.7931034482758621, "no_correct": 23, "no_total": 29, "predicates": {"reachable": {"accuracy": 0.5, "yes_accuracy": 0.5, "yes_correct": 3, "yes_total": 6, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.3333333333333333, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.3333333333333333, "no_correct": 1, "no_total": 3}, "open": {"accuracy": 0.5, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.8666666666666667, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 0.8333333333333334, "no_correct": 10, "no_total": 12}, "inside": {"accuracy": 0.5, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 3, "no_total": 3}, "nextto": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.4, "yes_correct": 2, "yes_total": 5, "no_accuracy": 0.8, "no_correct": 8, "no_total": 10}}}, "step": 3, "actions": ["place-next-to(bowl_1, bowl_1)", "open-container(cabinet_2)", "grasp(spoon_1)", "navigate-to(sink_1)", "place-on(spoon_1, sink_1)", "navigate-to(bowl_1)", "grasp(bowl_1)", "navigate-to(sink_1)", "place-on(bowl_1, sink_1)"]}, {"enum_results": {"reachable bowl_1": ["yes", "yes"], "reachable bowl_2": ["yes", "yes"], "reachable cabinet_1": ["no", "yes"], "reachable cabinet_2": ["yes", "yes"], "reachable piece_of_cloth_1": ["no", "yes"], "reachable sink_1": ["no", "yes"], "holding bowl_1": ["yes", "no"], "holding bowl_2": ["yes", "no"], "holding piece_of_cloth_1": ["no", "no"], "open cabinet_1": ["no", "yes"], "open cabinet_2": ["no", "no"], "ontop bowl_1,bowl_2": ["yes", "yes"], "ontop bowl_1,cabinet_1": ["no", "no"], "ontop bowl_1,cabinet_2": ["yes", "no"], "ontop bowl_1,piece_of_cloth_1": ["no", "no"], "ontop bowl_1,sink_1": ["no", "no"], "ontop bowl_2,bowl_1": ["yes", "yes"], "ontop bowl_2,cabinet_1": ["no", "no"], "ontop bowl_2,cabinet_2": ["yes", "no"], "ontop bowl_2,piece_of_cloth_1": ["no", "no"], "ontop bowl_2,sink_1": ["no", "no"], "ontop piece_of_cloth_1,bowl_1": ["no", "no"], "ontop piece_of_cloth_1,bowl_2": ["yes", "yes"], "ontop piece_of_cloth_1,cabinet_1": ["no", "no"], "ontop piece_of_cloth_1,cabinet_2": ["no", "no"], "ontop piece_of_cloth_1,sink_1": ["no", "no"], "inside bowl_1,cabinet_1": ["no", "yes"], "inside bowl_1,cabinet_2": ["no", "no"], "inside bowl_2,cabinet_1": ["no", "yes"], "inside bowl_2,cabinet_2": ["no", "no"], "inside piece_of_cloth_1,cabinet_1": ["no", "yes"], "inside piece_of_cloth_1,cabinet_2": ["no", "no"], "nextto bowl_1,bowl_2": ["yes", "yes"], "nextto bowl_1,cabinet_1": ["no", "yes"], "nextto bowl_1,cabinet_2": ["yes", "no"], "nextto bowl_1,piece_of_cloth_1": ["no", "no"], "nextto bowl_1,sink_1": ["no", "no"], "nextto bowl_2,bowl_1": ["yes", "yes"], "nextto bowl_2,cabinet_1": ["no", "yes"], "nextto bowl_2,cabinet_2": ["yes", "no"], "nextto bowl_2,piece_of_cloth_1": ["no", "no"], "nextto bowl_2,sink_1": ["no", "no"], "nextto piece_of_cloth_1,bowl_1": ["no", "no"], "nextto piece_of_cloth_1,bowl_2": ["no", "no"], "nextto piece_of_cloth_1,cabinet_1": ["no", "yes"], "nextto piece_of_cloth_1,cabinet_2": ["no", "no"], "nextto piece_of_cloth_1,sink_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.6595744680851063, "yes_accuracy": 0.4444444444444444, "yes_correct": 8, "yes_total": 18, "no_accuracy": 0.7931034482758621, "no_correct": 23, "no_total": 29, "predicates": {"reachable": {"accuracy": 0.5, "yes_accuracy": 0.5, "yes_correct": 3, "yes_total": 6, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.3333333333333333, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.3333333333333333, "no_correct": 1, "no_total": 3}, "open": {"accuracy": 0.5, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.8666666666666667, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 0.8333333333333334, "no_correct": 10, "no_total": 12}, "inside": {"accuracy": 0.5, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 3, "no_total": 3}, "nextto": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.4, "yes_correct": 2, "yes_total": 5, "no_accuracy": 0.8, "no_correct": 8, "no_total": 10}}}, "step": 4, "actions": ["place-next-to(bowl_1, bowl_1)", "open-container(cabinet_2)", "grasp(spoon_1)", "navigate-to(sink_1)", "place-on(spoon_1, sink_1)", "navigate-to(bowl_1)", "grasp(bowl_1)", "navigate-to(sink_1)", "place-on(bowl_1, sink_1)"]}], "remaining_actions": ["open-container(cabinet_2)", "grasp(spoon_1)", "navigate-to(sink_1)", "place-on(spoon_1, sink_1)", "navigate-to(bowl_1)", "grasp(bowl_1)", "navigate-to(sink_1)", "place-on(bowl_1, sink_1)"]}, "data/planning/igibson/medium/packing_food_for_work_medium.pddl_Beechwood_0_int_0": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["yes", 9.254809375455753e-14, 7.596809805028061e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the agent's reach. Based on the image, \"cabinet_1\" appears to be the cabinet on the left side of the image. The agent is positioned in the center of the room, and the cabinet is relatively close. It appears that the agent could extend its arm and reach the cabinet.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the agent's reach. Based on the image, \"cabinet_1\" appears to be the cabinet on the left side of the image. The agent is positioned in the center of the room, and the cabinet is relatively close. It appears that the agent could extend its arm and reach the cabinet.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}], "replans": [{"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 1, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 2, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 3, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 4, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 5, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 6, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 7, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 8, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 9, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 10, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 11, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 12, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 13, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 14, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 15, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 16, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 17, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 18, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 19, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 20, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}], "remaining_actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, "data/planning/igibson/medium/packing_food_for_work_medium.pddl_Beechwood_0_int_20": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["yes", 9.254809375455753e-14, 7.596809805028061e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the agent's reach. Based on the image, \"cabinet_1\" appears to be the cabinet on the left side of the image. The agent is positioned in the center of the room, and the cabinet is relatively close. It appears that the agent could extend its arm and reach the cabinet.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the agent's reach. Based on the image, \"cabinet_1\" appears to be the cabinet on the left side of the image. The agent is positioned in the center of the room, and the cabinet is relatively close. It appears that the agent could extend its arm and reach the cabinet.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["no", 9.254809375455753e-14, 8.60831368074957e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if the cabinet labeled \"cabinet_1\" is within the agent's reach. Looking at the image, \"cabinet_1\" is on the left side of the image, and the agent is positioned in the center of the room. The agent's arm appears to be extended, but it's not clear if it can reach the cabinet. However, given the perspective and the arm's length, it seems unlikely that the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach.\n</explanation>\n<answer>\nNo\n</answer>", false], "open cabinet_1": ["no", 1.4192711269471817e-14, 2.651547533513536e-14, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are cabinets on the left side of the frame. Cabinet_1 appears to be the first cabinet visible on the left. It appears to be closed, as the door is not ajar or open in any way.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": null}], "replans": [{"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 1, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 2, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 3, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 4, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 5, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 6, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 7, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 8, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 9, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 10, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 11, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 12, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 13, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 14, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 15, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 16, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 17, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 18, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 19, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["no", "no"], "reachable countertop_1": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable juice_1": ["yes", "yes"], "reachable door_1": ["no", "no"], "open carton_1": ["no", "yes"], "open cabinet_1": ["no", "no"], "open door_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding door_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["yes", "no"], "ontop countertop_1,door_1": ["no", "no"], "ontop door_1,carton_1": ["no", "no"], "ontop door_1,countertop_1": ["no", "no"], "ontop door_1,cabinet_1": ["no", "no"], "ontop door_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,door_1": ["no", "no"], "inside door_1,carton_1": ["no", "no"], "inside door_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["no", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto countertop_1,door_1": ["no", "no"], "nextto door_1,carton_1": ["no", "no"], "nextto door_1,countertop_1": ["no", "no"], "nextto door_1,cabinet_1": ["no", "no"], "nextto door_1,juice_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8387096774193549, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.8518518518518519, "no_correct": 23, "no_total": 27, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "nextto": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8}}}, "step": 20, "actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}], "remaining_actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"]}, "data/planning/igibson/medium/packing_food_for_work_medium.pddl_Wainscott_0_int_0": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["yes", 1.173933725836379e-13, 9.636234749054763e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the reach of the agent. Based on the image, \"cabinet_1\" appears to be the cabinet directly in front of the agent, and it seems close enough for the robotic arm to potentially reach it.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the reach of the agent. Based on the image, \"cabinet_1\" appears to be the cabinet directly in front of the agent, and it seems close enough for the robotic arm to potentially reach it.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["yes", 8.141930733134364e-14, 6.683303829655611e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the reach of the agent. Looking at the image, \"cabinet_1\" appears to be the cabinet directly in front of the agent, and it seems close enough for the robotic arm to potentially reach it. Therefore, the answer is \"Yes\".", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the reach of the agent. Looking at the image, \"cabinet_1\" appears to be the cabinet directly in front of the agent, and it seems close enough for the robotic arm to potentially reach it. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", false], "open cabinet_1": ["no", 5.9308162764573624e-15, 4.618924024453377e-15, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are several cabinets visible. The cabinet labeled as cabinet_1 appears to be the one on the left side of the image, near the window. It appears to be closed.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are several cabinets visible. The cabinet labeled as cabinet_1 appears to be the one on the left side of the image, near the window. It appears to be closed.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["yes", 8.141930733134364e-14, 6.683303829655611e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the reach of the agent. Looking at the image, \"cabinet_1\" appears to be the cabinet directly in front of the agent, and it seems close enough for the robotic arm to potentially reach it. Therefore, the answer is \"Yes\".", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the reach of the agent. Looking at the image, \"cabinet_1\" appears to be the cabinet directly in front of the agent, and it seems close enough for the robotic arm to potentially reach it. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", false], "open cabinet_1": ["no", 5.9308162764573624e-15, 4.618924024453377e-15, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are several cabinets visible. The cabinet labeled as cabinet_1 appears to be the one on the left side of the image, near the window. It appears to be closed.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are several cabinets visible. The cabinet labeled as cabinet_1 appears to be the one on the left side of the image, near the window. It appears to be closed.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable carton_1": ["yes", "no"], "reachable countertop_1": ["no", "no"], "reachable electric_refrigerator_1": ["yes", "no"], "reachable apple_1": ["yes", "no"], "reachable cabinet_1": ["yes", "no"], "reachable juice_1": ["yes", "no"], "open carton_1": ["no", "yes"], "open electric_refrigerator_1": ["no", "no"], "open cabinet_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding apple_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,electric_refrigerator_1": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["no", "no"], "ontop apple_1,carton_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,electric_refrigerator_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside apple_1,carton_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["yes", "no"], "nextto countertop_1,electric_refrigerator_1": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto apple_1,carton_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,electric_refrigerator_1": ["no", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_1,juice_1": ["yes", "yes"]}, "enum_metrics": {"accuracy": 0.5945945945945946, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": 0.5882352941176471, "no_correct": 20, "no_total": 34, "predicates": {"reachable": {"accuracy": 0.16666666666666666, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.16666666666666666, "no_correct": 1, "no_total": 6}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.9, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.8888888888888888, "no_correct": 8, "no_total": 9}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 6, "no_total": 6}, "nextto": {"accuracy": 0.2, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.1111111111111111, "no_correct": 1, "no_total": 9}}}, "step": 1, "actions": ["open-container(cabinet_1)", "open-container(carton_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "place-inside(sandwich_1, carton_1)", "grasp(snack_food_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["yes", "no"], "reachable countertop_1": ["no", "no"], "reachable electric_refrigerator_1": ["yes", "no"], "reachable apple_1": ["yes", "no"], "reachable cabinet_1": ["yes", "no"], "reachable juice_1": ["yes", "no"], "open carton_1": ["no", "yes"], "open electric_refrigerator_1": ["no", "no"], "open cabinet_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding apple_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,electric_refrigerator_1": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["no", "no"], "ontop apple_1,carton_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,electric_refrigerator_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside apple_1,carton_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["yes", "no"], "nextto countertop_1,electric_refrigerator_1": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto apple_1,carton_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,electric_refrigerator_1": ["no", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_1,juice_1": ["yes", "yes"]}, "enum_metrics": {"accuracy": 0.5945945945945946, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": 0.5882352941176471, "no_correct": 20, "no_total": 34, "predicates": {"reachable": {"accuracy": 0.16666666666666666, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.16666666666666666, "no_correct": 1, "no_total": 6}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.9, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.8888888888888888, "no_correct": 8, "no_total": 9}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 6, "no_total": 6}, "nextto": {"accuracy": 0.2, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.1111111111111111, "no_correct": 1, "no_total": 9}}}, "step": 2, "actions": ["open-container(cabinet_1)", "open-container(carton_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "place-inside(sandwich_1, carton_1)", "grasp(snack_food_1)", "place-inside(snack_food_1, carton_1)"]}], "remaining_actions": ["open-container(carton_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "place-inside(sandwich_1, carton_1)", "grasp(snack_food_1)", "place-inside(snack_food_1, carton_1)"]}, "data/planning/igibson/medium/packing_food_for_work_medium.pddl_Wainscott_0_int_20": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["yes", 1.173933725836379e-13, 9.636234749054763e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the reach of the agent. Based on the image, \"cabinet_1\" appears to be the cabinet directly in front of the agent, and it seems close enough for the robotic arm to potentially reach it.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the reach of the agent. Based on the image, \"cabinet_1\" appears to be the cabinet directly in front of the agent, and it seems close enough for the robotic arm to potentially reach it.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["yes", 8.141930733134364e-14, 6.683303829655611e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the reach of the agent. Looking at the image, \"cabinet_1\" appears to be the cabinet directly in front of the agent, and it seems close enough for the robotic arm to potentially reach it. Therefore, the answer is \"Yes\".", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the reach of the agent. Looking at the image, \"cabinet_1\" appears to be the cabinet directly in front of the agent, and it seems close enough for the robotic arm to potentially reach it. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", false], "open cabinet_1": ["no", 5.9308162764573624e-15, 4.618924024453377e-15, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are several cabinets visible. The cabinet labeled as cabinet_1 appears to be the one on the left side of the image, near the window. It appears to be closed.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are several cabinets visible. The cabinet labeled as cabinet_1 appears to be the one on the left side of the image, near the window. It appears to be closed.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "open-container(cabinet_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable cabinet_1": ["yes", 8.141930733134364e-14, 6.683303829655611e-15, "The image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the reach of the agent. Looking at the image, \"cabinet_1\" appears to be the cabinet directly in front of the agent, and it seems close enough for the robotic arm to potentially reach it. Therefore, the answer is \"Yes\".", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). I need to determine if \"cabinet_1\" is within the reach of the agent. Looking at the image, \"cabinet_1\" appears to be the cabinet directly in front of the agent, and it seems close enough for the robotic arm to potentially reach it. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", false], "open cabinet_1": ["no", 5.9308162764573624e-15, 4.618924024453377e-15, "I need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are several cabinets visible. The cabinet labeled as cabinet_1 appears to be the one on the left side of the image, near the window. It appears to be closed.", true, "Question: Is the cabinet_1 open\n<explanation>\nI need to identify cabinet_1 in the image and check if it is open. Looking at the image, there are several cabinets visible. The cabinet labeled as cabinet_1 appears to be the one on the left side of the image, near the window. It appears to be closed.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"holding sandwich_1": [true, false, false], "holding snack_food_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable carton_1": ["yes", "no"], "reachable countertop_1": ["no", "no"], "reachable electric_refrigerator_1": ["yes", "no"], "reachable apple_1": ["yes", "no"], "reachable cabinet_1": ["yes", "no"], "reachable juice_1": ["yes", "no"], "open carton_1": ["no", "yes"], "open electric_refrigerator_1": ["no", "no"], "open cabinet_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding apple_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,electric_refrigerator_1": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["no", "no"], "ontop apple_1,carton_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,electric_refrigerator_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside apple_1,carton_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["yes", "no"], "nextto countertop_1,electric_refrigerator_1": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto apple_1,carton_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,electric_refrigerator_1": ["no", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_1,juice_1": ["yes", "yes"]}, "enum_metrics": {"accuracy": 0.5945945945945946, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": 0.5882352941176471, "no_correct": 20, "no_total": 34, "predicates": {"reachable": {"accuracy": 0.16666666666666666, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.16666666666666666, "no_correct": 1, "no_total": 6}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.9, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.8888888888888888, "no_correct": 8, "no_total": 9}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 6, "no_total": 6}, "nextto": {"accuracy": 0.2, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.1111111111111111, "no_correct": 1, "no_total": 9}}}, "step": 1, "actions": ["open-container(cabinet_1)", "open-container(carton_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "place-inside(sandwich_1, carton_1)", "grasp(snack_food_1)", "place-inside(snack_food_1, carton_1)"]}, {"enum_results": {"reachable carton_1": ["yes", "no"], "reachable countertop_1": ["no", "no"], "reachable electric_refrigerator_1": ["yes", "no"], "reachable apple_1": ["yes", "no"], "reachable cabinet_1": ["yes", "no"], "reachable juice_1": ["yes", "no"], "open carton_1": ["no", "yes"], "open electric_refrigerator_1": ["no", "no"], "open cabinet_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding apple_1": ["no", "no"], "ontop countertop_1,carton_1": ["no", "no"], "ontop countertop_1,electric_refrigerator_1": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,juice_1": ["no", "no"], "ontop apple_1,carton_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_1,juice_1": ["no", "no"], "inside countertop_1,carton_1": ["no", "no"], "inside countertop_1,electric_refrigerator_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside apple_1,carton_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "nextto countertop_1,carton_1": ["yes", "no"], "nextto countertop_1,electric_refrigerator_1": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,juice_1": ["yes", "no"], "nextto apple_1,carton_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,electric_refrigerator_1": ["no", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_1,juice_1": ["yes", "yes"]}, "enum_metrics": {"accuracy": 0.5945945945945946, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": 0.5882352941176471, "no_correct": 20, "no_total": 34, "predicates": {"reachable": {"accuracy": 0.16666666666666666, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.16666666666666666, "no_correct": 1, "no_total": 6}, "open": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.9, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.8888888888888888, "no_correct": 8, "no_total": 9}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 6, "no_total": 6}, "nextto": {"accuracy": 0.2, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.1111111111111111, "no_correct": 1, "no_total": 9}}}, "step": 2, "actions": ["open-container(cabinet_1)", "open-container(carton_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "place-inside(sandwich_1, carton_1)", "grasp(snack_food_1)", "place-inside(snack_food_1, carton_1)"]}], "remaining_actions": ["open-container(carton_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "place-inside(sandwich_1, carton_1)", "grasp(snack_food_1)", "place-inside(snack_food_1, carton_1)"]}, "data/planning/igibson/medium/putting_away_toys_medium.pddl_Benevolence_1_int_0": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(plaything_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable plaything_2": [true, false, false], "all_correct": true}, "effects_results": {"reachable plaything_2": ["yes", 3.885269384863721e-13, 1.3294659833738495e-14, "The image shows a robotic arm (the agent) and several objects labeled with \"plaything_x\" where x is a number. I need to determine if \"plaything_2\" is within the reach of the robotic arm. Looking at the image, \"plaything_2\" is located on the floor near the base of the robotic arm. It appears to be close enough that the arm could extend and grasp it.", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and several objects labeled with \"plaything_x\" where x is a number. I need to determine if \"plaything_2\" is within the reach of the robotic arm. Looking at the image, \"plaything_2\" is located on the floor near the base of the robotic arm. It appears to be close enough that the arm could extend and grasp it.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable carton_1": ["yes", 1.9771920103765772e-13, 8.687174989237788e-15, "The image shows a robotic arm (the agent) holding an object. The question asks if \"carton_1\" is within the agent's reach. Looking at the image, \"carton_1\" is a box on the table, and it appears to be relatively close to the robotic arm. It seems like the robotic arm could potentially reach the carton_1.", false, "Question: Is the carton_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The question asks if \"carton_1\" is within the agent's reach. Looking at the image, \"carton_1\" is a box on the table, and it appears to be relatively close to the robotic arm. It seems like the robotic arm could potentially reach the carton_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_1": ["yes", 1.1445579455992422e-13, 5.028837148947623e-15, "The image shows a robotic arm (the agent) and a table labeled \"table_1\". To determine if the table is in reach, I need to assess the distance between the agent and the table. The agent is positioned relatively close to the table, and it appears that the arm could extend to reach the table without significant difficulty. Therefore, the table is likely within the agent's reach.", false, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table labeled \"table_1\". To determine if the table is in reach, I need to assess the distance between the agent and the table. The agent is positioned relatively close to the table, and it appears that the arm could extend to reach the table without significant difficulty. Therefore, the table is likely within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable plaything_1": {"before": false, "after": false}, "reachable plaything_3": {"before": false, "after": false}, "reachable plaything_4": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(plaything_2, plaything_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding plaything_2": ["yes", 1.8619761494361592e-13, 4.707812847784369e-14, "The image shows a robotic arm (the agent). The agent is holding an object. The object being held is labeled as \"plaything_2\". Therefore, the agent is holding the plaything_2.", true, "Question: Is the agent holding the plaything_2\n<explanation>\nThe image shows a robotic arm (the agent). The agent is holding an object. The object being held is labeled as \"plaything_2\". Therefore, the agent is holding the plaything_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable plaything_2": ["yes", 3.93670366487589e-13, 1.7296670280948778e-14, "The image shows a robotic arm (the agent) and several objects labeled with \"plaything_X\" where X is a number. I need to determine if \"plaything_2\" is within the reach of the robotic arm. Looking at the image, \"plaything_2\" is located on the floor near the base of the wall and appears to be relatively close to the robotic arm. It seems like the robotic arm could extend and grasp \"plaything_2\". Therefore, the answer is \"Yes\".", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and several objects labeled with \"plaything_X\" where X is a number. I need to determine if \"plaything_2\" is within the reach of the robotic arm. Looking at the image, \"plaything_2\" is located on the floor near the base of the wall and appears to be relatively close to the robotic arm. It seems like the robotic arm could extend and grasp \"plaything_2\". Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(plaything_2, plaything_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding plaything_2": ["yes", 1.8619761494361592e-13, 4.707812847784369e-14, "The image shows a robotic arm (the agent). The agent is holding an object. The object being held is labeled as \"plaything_2\". Therefore, the agent is holding the plaything_2.", true, "Question: Is the agent holding the plaything_2\n<explanation>\nThe image shows a robotic arm (the agent). The agent is holding an object. The object being held is labeled as \"plaything_2\". Therefore, the agent is holding the plaything_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable plaything_2": ["yes", 3.93670366487589e-13, 1.7296670280948778e-14, "The image shows a robotic arm (the agent) and several objects labeled with \"plaything_X\" where X is a number. I need to determine if \"plaything_2\" is within the reach of the robotic arm. Looking at the image, \"plaything_2\" is located on the floor near the base of the wall and appears to be relatively close to the robotic arm. It seems like the robotic arm could extend and grasp \"plaything_2\". Therefore, the answer is \"Yes\".", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and several objects labeled with \"plaything_X\" where X is a number. I need to determine if \"plaything_2\" is within the reach of the robotic arm. Looking at the image, \"plaything_2\" is located on the floor near the base of the wall and appears to be relatively close to the robotic arm. It seems like the robotic arm could extend and grasp \"plaything_2\". Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable plaything_2": ["yes", "yes"], "reachable plaything_6": ["yes", "yes"], "reachable plaything_7": ["yes", "no"], "reachable plaything_8": ["yes", "no"], "reachable carton_1": ["yes", "yes"], "reachable carton_2": ["yes", "yes"], "reachable table_1": ["yes", "no"], "holding plaything_2": ["yes", "no"], "holding plaything_6": ["yes", "no"], "holding plaything_7": ["yes", "no"], "holding plaything_8": ["yes", "no"], "open carton_1": ["no", "yes"], "open carton_2": ["no", "yes"], "ontop plaything_2,plaything_6": ["no", "no"], "ontop plaything_2,plaything_7": ["no", "no"], "ontop plaything_2,plaything_8": ["no", "no"], "ontop plaything_2,carton_1": ["no", "no"], "ontop plaything_2,carton_2": ["no", "no"], "ontop plaything_2,table_1": ["no", "no"], "ontop plaything_6,plaything_2": ["no", "no"], "ontop plaything_6,plaything_7": ["no", "no"], "ontop plaything_6,plaything_8": ["no", "no"], "ontop plaything_6,carton_1": ["no", "no"], "ontop plaything_6,carton_2": ["no", "no"], "ontop plaything_6,table_1": ["no", "no"], "ontop plaything_7,plaything_2": ["no", "no"], "ontop plaything_7,plaything_6": ["no", "no"], "ontop plaything_7,plaything_8": ["no", "no"], "ontop plaything_7,carton_1": ["no", "no"], "ontop plaything_7,carton_2": ["no", "no"], "ontop plaything_7,table_1": ["no", "no"], "ontop plaything_8,plaything_2": ["no", "no"], "ontop plaything_8,plaything_6": ["no", "no"], "ontop plaything_8,plaything_7": ["no", "no"], "ontop plaything_8,carton_1": ["no", "no"], "ontop plaything_8,carton_2": ["no", "no"], "ontop plaything_8,table_1": ["no", "no"], "inside plaything_2,carton_1": ["no", "no"], "inside plaything_2,carton_2": ["no", "no"], "inside plaything_6,carton_1": ["no", "no"], "inside plaything_6,carton_2": ["no", "no"], "inside plaything_7,carton_1": ["no", "no"], "inside plaything_7,carton_2": ["no", "no"], "inside plaything_8,carton_1": ["no", "no"], "inside plaything_8,carton_2": ["no", "no"], "nextto plaything_2,plaything_6": ["no", "no"], "nextto plaything_2,plaything_7": ["no", "no"], "nextto plaything_2,plaything_8": ["no", "no"], "nextto plaything_2,carton_1": ["no", "yes"], "nextto plaything_2,carton_2": ["no", "no"], "nextto plaything_2,table_1": ["no", "no"], "nextto plaything_6,plaything_2": ["no", "no"], "nextto plaything_6,plaything_7": ["no", "no"], "nextto plaything_6,plaything_8": ["no", "no"], "nextto plaything_6,carton_1": ["no", "no"], "nextto plaything_6,carton_2": ["no", "no"], "nextto plaything_6,table_1": ["no", "no"], "nextto plaything_7,plaything_2": ["no", "no"], "nextto plaything_7,plaything_6": ["no", "no"], "nextto plaything_7,plaything_8": ["no", "no"], "nextto plaything_7,carton_1": ["no", "no"], "nextto plaything_7,carton_2": ["no", "no"], "nextto plaything_7,table_1": ["yes", "no"], "nextto plaything_8,plaything_2": ["no", "no"], "nextto plaything_8,plaything_6": ["no", "no"], "nextto plaything_8,plaything_7": ["yes", "no"], "nextto plaything_8,carton_1": ["no", "no"], "nextto plaything_8,carton_2": ["no", "no"], "nextto plaything_8,table_1": ["yes", "yes"]}, "enum_metrics": {"accuracy": 0.8260869565217391, "yes_accuracy": 0.625, "yes_correct": 5, "yes_total": 8, "no_accuracy": 0.8524590163934426, "no_correct": 52, "no_total": 61, "predicates": {"reachable": {"accuracy": 0.5714285714285714, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.0, "no_correct": 0, "no_total": 3}, "holding": {"accuracy": 0.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.0, "no_correct": 0, "no_total": 4}, "open": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 24, "no_total": 24}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 8, "no_total": 8}, "nextto": {"accuracy": 0.875, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.9090909090909091, "no_correct": 20, "no_total": 22}}}, "step": 1, "actions": ["place-next-to(plaything_2, plaything_2)", "open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}, {"enum_results": {"reachable plaything_2": ["yes", "yes"], "reachable plaything_6": ["yes", "yes"], "reachable plaything_7": ["yes", "no"], "reachable plaything_8": ["yes", "no"], "reachable carton_1": ["yes", "yes"], "reachable carton_2": ["yes", "yes"], "reachable table_1": ["yes", "no"], "holding plaything_2": ["yes", "no"], "holding plaything_6": ["yes", "no"], "holding plaything_7": ["yes", "no"], "holding plaything_8": ["yes", "no"], "open carton_1": ["no", "yes"], "open carton_2": ["no", "yes"], "ontop plaything_2,plaything_6": ["no", "no"], "ontop plaything_2,plaything_7": ["no", "no"], "ontop plaything_2,plaything_8": ["no", "no"], "ontop plaything_2,carton_1": ["no", "no"], "ontop plaything_2,carton_2": ["no", "no"], "ontop plaything_2,table_1": ["no", "no"], "ontop plaything_6,plaything_2": ["no", "no"], "ontop plaything_6,plaything_7": ["no", "no"], "ontop plaything_6,plaything_8": ["no", "no"], "ontop plaything_6,carton_1": ["no", "no"], "ontop plaything_6,carton_2": ["no", "no"], "ontop plaything_6,table_1": ["no", "no"], "ontop plaything_7,plaything_2": ["no", "no"], "ontop plaything_7,plaything_6": ["no", "no"], "ontop plaything_7,plaything_8": ["no", "no"], "ontop plaything_7,carton_1": ["no", "no"], "ontop plaything_7,carton_2": ["no", "no"], "ontop plaything_7,table_1": ["no", "no"], "ontop plaything_8,plaything_2": ["no", "no"], "ontop plaything_8,plaything_6": ["no", "no"], "ontop plaything_8,plaything_7": ["no", "no"], "ontop plaything_8,carton_1": ["no", "no"], "ontop plaything_8,carton_2": ["no", "no"], "ontop plaything_8,table_1": ["no", "no"], "inside plaything_2,carton_1": ["no", "no"], "inside plaything_2,carton_2": ["no", "no"], "inside plaything_6,carton_1": ["no", "no"], "inside plaything_6,carton_2": ["no", "no"], "inside plaything_7,carton_1": ["no", "no"], "inside plaything_7,carton_2": ["no", "no"], "inside plaything_8,carton_1": ["no", "no"], "inside plaything_8,carton_2": ["no", "no"], "nextto plaything_2,plaything_6": ["no", "no"], "nextto plaything_2,plaything_7": ["no", "no"], "nextto plaything_2,plaything_8": ["no", "no"], "nextto plaything_2,carton_1": ["no", "yes"], "nextto plaything_2,carton_2": ["no", "no"], "nextto plaything_2,table_1": ["no", "no"], "nextto plaything_6,plaything_2": ["no", "no"], "nextto plaything_6,plaything_7": ["no", "no"], "nextto plaything_6,plaything_8": ["no", "no"], "nextto plaything_6,carton_1": ["no", "no"], "nextto plaything_6,carton_2": ["no", "no"], "nextto plaything_6,table_1": ["no", "no"], "nextto plaything_7,plaything_2": ["no", "no"], "nextto plaything_7,plaything_6": ["no", "no"], "nextto plaything_7,plaything_8": ["no", "no"], "nextto plaything_7,carton_1": ["no", "no"], "nextto plaything_7,carton_2": ["no", "no"], "nextto plaything_7,table_1": ["yes", "no"], "nextto plaything_8,plaything_2": ["no", "no"], "nextto plaything_8,plaything_6": ["no", "no"], "nextto plaything_8,plaything_7": ["yes", "no"], "nextto plaything_8,carton_1": ["no", "no"], "nextto plaything_8,carton_2": ["no", "no"], "nextto plaything_8,table_1": ["yes", "yes"]}, "enum_metrics": {"accuracy": 0.8260869565217391, "yes_accuracy": 0.625, "yes_correct": 5, "yes_total": 8, "no_accuracy": 0.8524590163934426, "no_correct": 52, "no_total": 61, "predicates": {"reachable": {"accuracy": 0.5714285714285714, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.0, "no_correct": 0, "no_total": 3}, "holding": {"accuracy": 0.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.0, "no_correct": 0, "no_total": 4}, "open": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 24, "no_total": 24}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 8, "no_total": 8}, "nextto": {"accuracy": 0.875, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.9090909090909091, "no_correct": 20, "no_total": 22}}}, "step": 2, "actions": ["place-next-to(plaything_2, plaything_2)", "open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}], "remaining_actions": ["open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}, "data/planning/igibson/medium/putting_away_toys_medium.pddl_Benevolence_1_int_21": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(plaything_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable plaything_2": [true, false, false], "all_correct": true}, "effects_results": {"reachable plaything_2": ["yes", 1.977192416952392e-13, 6.765580374987158e-15, "The image shows a robotic arm (the agent) and several objects labeled with bounding boxes. One of these objects is labeled \"plaything_2\". I need to determine if the agent can reach \"plaything_2\". Looking at the image, the robotic arm is positioned such that it appears to be able to reach the object labeled \"plaything_2\".", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and several objects labeled with bounding boxes. One of these objects is labeled \"plaything_2\". I need to determine if the agent can reach \"plaything_2\". Looking at the image, the robotic arm is positioned such that it appears to be able to reach the object labeled \"plaything_2\".\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable carton_1": ["yes", 1.69698876804035e-13, 1.0848485433275542e-14, "The image shows a robotic arm (the agent) and a carton labeled \"carton_1\". To determine if the carton is in reach, I need to visually assess the distance between the arm and the carton. The carton appears to be relatively close to the arm, and within the range of motion of the arm. Therefore, the carton is likely within reach of the agent.", false, "Question: Is the carton_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a carton labeled \"carton_1\". To determine if the carton is in reach, I need to visually assess the distance between the arm and the carton. The carton appears to be relatively close to the arm, and within the range of motion of the arm. Therefore, the carton is likely within reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_1": ["yes", 1.0292758805636668e-13, 4.5223224579178656e-15, "The image shows a robotic arm (the agent) and a table labeled \"table_1\". To determine if the table is in reach, I need to visually assess the distance between the arm and the table. The arm is positioned above and to the right of the table. It appears that the arm could extend and interact with the table without significant difficulty. Therefore, the table is likely within the agent's reach.", false, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table labeled \"table_1\". To determine if the table is in reach, I need to visually assess the distance between the arm and the table. The arm is positioned above and to the right of the table. It appears that the arm could extend and interact with the table without significant difficulty. Therefore, the table is likely within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable plaything_1": {"before": false, "after": false}, "reachable plaything_3": {"before": false, "after": false}, "reachable plaything_4": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(plaything_2, plaything_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding plaything_2": ["yes", 1.6653220686127512e-13, 2.2537683253952973e-14, "The image shows a robotic arm (the agent) and a plaything_2 object. The robotic arm appears to be grasping or holding the plaything_2 object. Therefore, the agent is holding the plaything_2.", true, "Question: Is the agent holding the plaything_2\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything_2 object. The robotic arm appears to be grasping or holding the plaything_2 object. Therefore, the agent is holding the plaything_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable plaything_2": ["yes", 2.240452560888645e-13, 6.765580374987158e-15, "The image shows a robotic arm (the agent) and a plaything_2 object. I need to determine if the agent can reach the plaything_2. The agent is positioned in the upper right of the image, and the plaything_2 is located on the floor in the lower right of the image. Visually, it appears that the agent's arm could extend and grasp the plaything_2. Therefore, the plaything_2 is in reach of the agent.", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything_2 object. I need to determine if the agent can reach the plaything_2. The agent is positioned in the upper right of the image, and the plaything_2 is located on the floor in the lower right of the image. Visually, it appears that the agent's arm could extend and grasp the plaything_2. Therefore, the plaything_2 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(plaything_2, plaything_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding plaything_2": ["yes", 1.6653220686127512e-13, 2.2537683253952973e-14, "The image shows a robotic arm (the agent) and a plaything_2 object. The robotic arm appears to be grasping or holding the plaything_2 object. Therefore, the agent is holding the plaything_2.", true, "Question: Is the agent holding the plaything_2\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything_2 object. The robotic arm appears to be grasping or holding the plaything_2 object. Therefore, the agent is holding the plaything_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable plaything_2": ["yes", 2.240452560888645e-13, 6.765580374987158e-15, "The image shows a robotic arm (the agent) and a plaything_2 object. I need to determine if the agent can reach the plaything_2. The agent is positioned in the upper right of the image, and the plaything_2 is located on the floor in the lower right of the image. Visually, it appears that the agent's arm could extend and grasp the plaything_2. Therefore, the plaything_2 is in reach of the agent.", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything_2 object. I need to determine if the agent can reach the plaything_2. The agent is positioned in the upper right of the image, and the plaything_2 is located on the floor in the lower right of the image. Visually, it appears that the agent's arm could extend and grasp the plaything_2. Therefore, the plaything_2 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable plaything_2": ["yes", "yes"], "reachable plaything_7": ["yes", "no"], "reachable plaything_8": ["yes", "no"], "reachable carton_1": ["yes", "yes"], "reachable carton_2": ["yes", "yes"], "reachable table_1": ["yes", "no"], "holding plaything_2": ["yes", "no"], "holding plaything_7": ["yes", "no"], "holding plaything_8": ["yes", "no"], "open carton_1": ["no", "yes"], "open carton_2": ["no", "yes"], "ontop plaything_2,plaything_7": ["no", "no"], "ontop plaything_2,plaything_8": ["no", "no"], "ontop plaything_2,carton_1": ["no", "no"], "ontop plaything_2,carton_2": ["no", "no"], "ontop plaything_2,table_1": ["no", "no"], "ontop plaything_7,plaything_2": ["no", "no"], "ontop plaything_7,plaything_8": ["no", "no"], "ontop plaything_7,carton_1": ["no", "no"], "ontop plaything_7,carton_2": ["no", "no"], "ontop plaything_7,table_1": ["no", "no"], "ontop plaything_8,plaything_2": ["no", "no"], "ontop plaything_8,plaything_7": ["no", "no"], "ontop plaything_8,carton_1": ["no", "no"], "ontop plaything_8,carton_2": ["no", "no"], "ontop plaything_8,table_1": ["no", "no"], "inside plaything_2,carton_1": ["no", "no"], "inside plaything_2,carton_2": ["no", "no"], "inside plaything_7,carton_1": ["no", "no"], "inside plaything_7,carton_2": ["no", "no"], "inside plaything_8,carton_1": ["no", "no"], "inside plaything_8,carton_2": ["no", "no"], "nextto plaything_2,plaything_7": ["no", "no"], "nextto plaything_2,plaything_8": ["yes", "no"], "nextto plaything_2,carton_1": ["no", "yes"], "nextto plaything_2,carton_2": ["no", "no"], "nextto plaything_2,table_1": ["yes", "no"], "nextto plaything_7,plaything_2": ["no", "no"], "nextto plaything_7,plaything_8": ["no", "no"], "nextto plaything_7,carton_1": ["no", "no"], "nextto plaything_7,carton_2": ["no", "no"], "nextto plaything_7,table_1": ["yes", "no"], "nextto plaything_8,plaything_2": ["no", "no"], "nextto plaything_8,plaything_7": ["no", "no"], "nextto plaything_8,carton_1": ["no", "no"], "nextto plaything_8,carton_2": ["no", "no"], "nextto plaything_8,table_1": ["yes", "yes"]}, "enum_metrics": {"accuracy": 0.7446808510638298, "yes_accuracy": 0.5714285714285714, "yes_correct": 4, "yes_total": 7, "no_accuracy": 0.775, "no_correct": 31, "no_total": 40, "predicates": {"reachable": {"accuracy": 0.5, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 0.0, "no_correct": 0, "no_total": 3}, "holding": {"accuracy": 0.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.0, "no_correct": 0, "no_total": 3}, "open": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 15, "no_total": 15}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 6, "no_total": 6}, "nextto": {"accuracy": 0.7333333333333333, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.7692307692307693, "no_correct": 10, "no_total": 13}}}, "step": 1, "actions": ["place-next-to(plaything_2, plaything_2)", "open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}, {"enum_results": {"reachable plaything_2": ["yes", "yes"], "reachable plaything_7": ["yes", "no"], "reachable plaything_8": ["yes", "no"], "reachable carton_1": ["yes", "yes"], "reachable carton_2": ["yes", "yes"], "reachable table_1": ["yes", "no"], "holding plaything_2": ["yes", "no"], "holding plaything_7": ["yes", "no"], "holding plaything_8": ["yes", "no"], "open carton_1": ["no", "yes"], "open carton_2": ["no", "yes"], "ontop plaything_2,plaything_7": ["no", "no"], "ontop plaything_2,plaything_8": ["no", "no"], "ontop plaything_2,carton_1": ["no", "no"], "ontop plaything_2,carton_2": ["no", "no"], "ontop plaything_2,table_1": ["no", "no"], "ontop plaything_7,plaything_2": ["no", "no"], "ontop plaything_7,plaything_8": ["no", "no"], "ontop plaything_7,carton_1": ["no", "no"], "ontop plaything_7,carton_2": ["no", "no"], "ontop plaything_7,table_1": ["no", "no"], "ontop plaything_8,plaything_2": ["no", "no"], "ontop plaything_8,plaything_7": ["no", "no"], "ontop plaything_8,carton_1": ["no", "no"], "ontop plaything_8,carton_2": ["no", "no"], "ontop plaything_8,table_1": ["no", "no"], "inside plaything_2,carton_1": ["no", "no"], "inside plaything_2,carton_2": ["no", "no"], "inside plaything_7,carton_1": ["no", "no"], "inside plaything_7,carton_2": ["no", "no"], "inside plaything_8,carton_1": ["no", "no"], "inside plaything_8,carton_2": ["no", "no"], "nextto plaything_2,plaything_7": ["no", "no"], "nextto plaything_2,plaything_8": ["yes", "no"], "nextto plaything_2,carton_1": ["no", "yes"], "nextto plaything_2,carton_2": ["no", "no"], "nextto plaything_2,table_1": ["yes", "no"], "nextto plaything_7,plaything_2": ["no", "no"], "nextto plaything_7,plaything_8": ["no", "no"], "nextto plaything_7,carton_1": ["no", "no"], "nextto plaything_7,carton_2": ["no", "no"], "nextto plaything_7,table_1": ["yes", "no"], "nextto plaything_8,plaything_2": ["no", "no"], "nextto plaything_8,plaything_7": ["no", "no"], "nextto plaything_8,carton_1": ["no", "no"], "nextto plaything_8,carton_2": ["no", "no"], "nextto plaything_8,table_1": ["yes", "yes"]}, "enum_metrics": {"accuracy": 0.7446808510638298, "yes_accuracy": 0.5714285714285714, "yes_correct": 4, "yes_total": 7, "no_accuracy": 0.775, "no_correct": 31, "no_total": 40, "predicates": {"reachable": {"accuracy": 0.5, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 0.0, "no_correct": 0, "no_total": 3}, "holding": {"accuracy": 0.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.0, "no_correct": 0, "no_total": 3}, "open": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 15, "no_total": 15}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 6, "no_total": 6}, "nextto": {"accuracy": 0.7333333333333333, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.7692307692307693, "no_correct": 10, "no_total": 13}}}, "step": 2, "actions": ["place-next-to(plaything_2, plaything_2)", "open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}], "remaining_actions": ["open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}, "data/planning/igibson/medium/putting_away_toys_medium.pddl_Ihlen_0_int_0": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(plaything_2)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable plaything_2": [true, false, false], "all_correct": true}, "effects_results": {"reachable plaything_2": ["yes", 7.273681304617238e-14, 6.765576563338895e-15, "The image shows a robotic arm (the agent) and a small, light-brown object on the floor, which is labeled as plaything_2. The robotic arm is positioned such that it could potentially reach the plaything_2. The distance between the arm and the plaything_2 appears to be within the arm's range of motion. Therefore, the plaything_2 is in reach of the agent.", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a small, light-brown object on the floor, which is labeled as plaything_2. The robotic arm is positioned such that it could potentially reach the plaything_2. The distance between the arm and the plaything_2 appears to be within the arm's range of motion. Therefore, the plaything_2 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable carton_1": ["yes", 4.3716627404688166e-14, 1.920774262841214e-15, "The image shows a robotic arm (the agent) and a carton box labeled \"carton_1\". To determine if the carton is in reach, I need to visually assess the distance between the robotic arm and the carton. The carton is relatively close to the robotic arm, and appears to be within the arm's range of motion. Therefore, the carton is in reach of the agent.", false, "Question: Is the carton_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a carton box labeled \"carton_1\". To determine if the carton is in reach, I need to visually assess the distance between the robotic arm and the carton. The carton is relatively close to the robotic arm, and appears to be within the arm's range of motion. Therefore, the carton is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable plaything_1": {"before": false, "after": false}, "reachable plaything_3": {"before": false, "after": false}, "reachable plaything_4": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(plaything_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable plaything_2": ["yes", 7.273681982243596e-14, 6.7655774103718425e-15, "The image shows a robotic arm (the agent) and a small, light-brown object on the floor, which is labeled as plaything_2. The robotic arm is positioned such that it could potentially reach the plaything_2. The distance between the robotic arm and the plaything_2 appears to be within the arm's range of motion. Therefore, the plaything_2 is in reach of the agent.", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a small, light-brown object on the floor, which is labeled as plaything_2. The robotic arm is positioned such that it could potentially reach the plaything_2. The distance between the robotic arm and the plaything_2 appears to be within the arm's range of motion. Therefore, the plaything_2 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding plaything_1": [true, false, false], "holding plaything_3": [true, false, false], "holding plaything_4": [true, false, false], "all_correct": true}, "effects_results": {"holding plaything_2": ["yes", 3.037797945593286e-14, 9.862286666853255e-15, "The image shows a robotic arm (the agent) and a lion statue (plaything_2). The robotic arm appears to be grasping the lion statue. Therefore, the agent is holding the plaything_2.", true, "Question: Is the agent holding the plaything_2\n<explanation>\nThe image shows a robotic arm (the agent) and a lion statue (plaything_2). The robotic arm appears to be grasping the lion statue. Therefore, the agent is holding the plaything_2.\n</explanation>\n<answer>\nYes\n</answer>", true], "ontop plaything_2,carton_1": ["no", 6.431101717786422e-14, 3.4423208912243847e-14, "The image shows a robotic arm holding a lion (plaything_2) and a carton (carton_1) on the floor. The lion is not on top of the carton. Therefore, the answer is \"No\".", true, "Question: Is the plaything_2 on top of the carton_1\n<explanation>\nThe image shows a robotic arm holding a lion (plaything_2) and a carton (carton_1) on the floor. The lion is not on top of the carton. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto plaything_2,carton_1": ["yes", 2.087894032741077e-14, 5.9819165036157935e-15, "The image shows a robotic arm holding a plaything (plaything_2, which appears to be a lion). There is also a carton (carton_1) visible in the image. The plaything is positioned near the carton. Therefore, the plaything_2 is next to the carton_1.", false, "Question: Is the plaything_2 next to the carton_1\n<explanation>\nThe image shows a robotic arm holding a plaything (plaything_2, which appears to be a lion). There is also a carton (carton_1) visible in the image. The plaything is positioned near the carton. Therefore, the plaything_2 is next to the carton_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"ontop plaything_2,plaything_1": {"before": false, "after": false}, "ontop plaything_2,plaything_2": {"before": null, "after": false}, "ontop plaything_2,plaything_3": {"before": false, "after": false}, "ontop plaything_2,plaything_4": {"before": false, "after": false}, "ontop plaything_2,table_1": {"before": false, "after": false}, "nextto plaything_2,plaything_1": {"before": false, "after": false}, "nextto plaything_2,plaything_2": {"before": null, "after": false}, "nextto plaything_2,plaything_3": {"before": false, "after": false}, "nextto plaything_2,plaything_4": {"before": false, "after": false}, "nextto plaything_2,table_1": {"before": false, "after": false}}}, "action_info": "success"}], "replans": [{"enum_results": {"reachable plaything_2": ["yes", "yes"], "reachable carton_1": ["yes", "yes"], "holding plaything_2": ["no", "no"], "open carton_1": ["yes", "yes"], "ontop plaything_2,carton_1": ["no", "no"], "inside plaything_2,carton_1": ["no", "no"], "nextto plaything_2,carton_1": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.8571428571428571, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 1.0, "no_correct": 3, "no_total": 3, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "open": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "nextto": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}}}, "step": 1, "actions": ["grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}, {"enum_results": {"reachable plaything_2": ["yes", "yes"], "reachable carton_1": ["yes", "yes"], "holding plaything_2": ["yes", "yes"], "open carton_1": ["no", "yes"], "ontop plaything_2,carton_1": ["no", "no"], "inside plaything_2,carton_1": ["no", "no"], "nextto plaything_2,carton_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.7142857142857143, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.6666666666666666, "no_correct": 2, "no_total": 3, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "open": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "nextto": {"accuracy": 0.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.0, "no_correct": 0, "no_total": 1}}}, "step": 2, "actions": ["place-next-to(plaything_2, plaything_2)", "open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}], "remaining_actions": ["open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}, "data/planning/igibson/medium/putting_away_toys_medium.pddl_Ihlen_0_int_20": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(plaything_2)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable plaything_2": [true, false, false], "all_correct": true}, "effects_results": {"reachable plaything_2": ["yes", 1.7439108696611777e-13, 1.1148448599018496e-14, "The image shows a robotic arm (the agent) and a small object on the floor, labeled as \"plaything_2\". To determine if it's in reach, I need to visually assess the distance between the robotic arm and the plaything. The robotic arm is positioned above and to the left of the plaything. It appears that the arm could extend and grasp the plaything without significant difficulty. Therefore, the plaything is within the agent's reach.", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a small object on the floor, labeled as \"plaything_2\". To determine if it's in reach, I need to visually assess the distance between the robotic arm and the plaything. The robotic arm is positioned above and to the left of the plaything. It appears that the arm could extend and grasp the plaything without significant difficulty. Therefore, the plaything is within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable carton_1": ["yes", 1.3498470191001394e-13, 5.233925424818044e-15, "The agent is a robotic arm. I need to determine if the carton labeled \"carton_1\" is within the range of motion of the robotic arm. Looking at the image, the carton is relatively close to the robotic arm, and appears to be within its potential reach.", false, "Question: Is the carton_1 in reach of the agent\n<explanation>\nThe agent is a robotic arm. I need to determine if the carton labeled \"carton_1\" is within the range of motion of the robotic arm. Looking at the image, the carton is relatively close to the robotic arm, and appears to be within its potential reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable plaything_1": {"before": false, "after": false}, "reachable plaything_3": {"before": false, "after": false}, "reachable plaything_4": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(plaything_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable plaything_2": ["yes", 1.0569930347648082e-13, 7.656832253736395e-15, "The image shows a robotic arm (the agent) and a small object on the floor, labeled as \"plaything_2\". To determine if it's within reach, I need to visually assess the distance between the arm and the object. The robotic arm is positioned above and to the left of the plaything_2. It appears that the arm could extend and grasp the plaything_2 without significant difficulty. Therefore, the plaything_2 is in reach of the agent.", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a small object on the floor, labeled as \"plaything_2\". To determine if it's within reach, I need to visually assess the distance between the arm and the object. The robotic arm is positioned above and to the left of the plaything_2. It appears that the arm could extend and grasp the plaything_2 without significant difficulty. Therefore, the plaything_2 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding plaything_1": [true, false, false], "holding plaything_3": [true, false, false], "holding plaything_4": [true, false, false], "all_correct": true}, "effects_results": {"holding plaything_2": ["yes", 2.3657501467804626e-14, 1.1175011552244391e-14, "The image shows a robotic arm, which is the agent. The agent is interacting with a lion toy and a cylindrical object. The question asks if the agent is holding the plaything_2. Based on the image, the agent appears to be holding the cylindrical object, which could be the plaything_2.", true, "Question: Is the agent holding the plaything_2\n<explanation>\nThe image shows a robotic arm, which is the agent. The agent is interacting with a lion toy and a cylindrical object. The question asks if the agent is holding the plaything_2. Based on the image, the agent appears to be holding the cylindrical object, which could be the plaything_2.\n</explanation>\n<answer>\nYes\n</answer>", true], "ontop plaything_2,carton_1": ["no", 3.4421460636240714e-14, 3.4421460636240714e-14, "The image shows a robotic arm holding a lion statue (plaything_2) and a carton (carton_1) on the floor. The lion statue is not on top of the carton. Therefore, the answer is \"No\".", true, "Question: Is the plaything_2 on top of the carton_1\n<explanation>\nThe image shows a robotic arm holding a lion statue (plaything_2) and a carton (carton_1) on the floor. The lion statue is not on top of the carton. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto plaything_2,carton_1": ["yes", 2.6806725919982857e-14, 1.0602265322189747e-13, "I need to identify the objects \"plaything_2\" and \"carton_1\" in the image. Based on the image, \"plaything_2\" refers to the lion and \"carton_1\" refers to the cardboard box. I need to determine if the lion is next to the cardboard box. The lion is on top of the cardboard box, so it is next to it.", false, "Question: Is the plaything_2 next to the carton_1\n<explanation>\nI need to identify the objects \"plaything_2\" and \"carton_1\" in the image. Based on the image, \"plaything_2\" refers to the lion and \"carton_1\" refers to the cardboard box. I need to determine if the lion is next to the cardboard box. The lion is on top of the cardboard box, so it is next to it.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"ontop plaything_2,plaything_1": {"before": false, "after": false}, "ontop plaything_2,plaything_2": {"before": null, "after": false}, "ontop plaything_2,plaything_3": {"before": false, "after": false}, "ontop plaything_2,plaything_4": {"before": false, "after": false}, "ontop plaything_2,table_1": {"before": false, "after": false}, "nextto plaything_2,plaything_1": {"before": false, "after": false}, "nextto plaything_2,plaything_2": {"before": null, "after": false}, "nextto plaything_2,plaything_3": {"before": false, "after": false}, "nextto plaything_2,plaything_4": {"before": false, "after": false}, "nextto plaything_2,table_1": {"before": false, "after": false}}}, "action_info": "success"}], "replans": [{"enum_results": {"reachable plaything_2": ["yes", "yes"], "reachable carton_1": ["yes", "yes"], "holding plaything_2": ["no", "no"], "open carton_1": ["yes", "yes"], "ontop plaything_2,carton_1": ["no", "no"], "inside plaything_2,carton_1": ["no", "no"], "nextto plaything_2,carton_1": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.8571428571428571, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 1.0, "no_correct": 3, "no_total": 3, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "open": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "nextto": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}}}, "step": 1, "actions": ["grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}, {"enum_results": {"reachable plaything_2": ["yes", "yes"], "reachable carton_1": ["yes", "yes"], "holding plaything_2": ["yes", "yes"], "open carton_1": ["no", "yes"], "ontop plaything_2,carton_1": ["no", "no"], "inside plaything_2,carton_1": ["no", "no"], "nextto plaything_2,carton_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.7142857142857143, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.6666666666666666, "no_correct": 2, "no_total": 3, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "open": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "nextto": {"accuracy": 0.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.0, "no_correct": 0, "no_total": 1}}}, "step": 2, "actions": ["place-next-to(plaything_2, plaything_2)", "open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}], "remaining_actions": ["open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}, "data/planning/igibson/medium/putting_away_toys_medium.pddl_Ihlen_1_int_0": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(plaything_2)", "action_correct": true, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable plaything_2": [true, false, false], "all_correct": true}, "effects_results": {"reachable plaything_2": ["yes", 1.6877249381028192e-13, 7.415345701573036e-15, "The image shows a robotic arm (the agent) and a plaything labeled \"plaything_2\". I need to determine if the agent can reach the plaything. The plaything is located near the bottom of the stairs, and the agent is positioned to the right of the plaything. Visually, it appears that the agent's arm could extend and grasp the plaything. Therefore, the plaything is in reach of the agent.", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything labeled \"plaything_2\". I need to determine if the agent can reach the plaything. The plaything is located near the bottom of the stairs, and the agent is positioned to the right of the plaything. Visually, it appears that the agent's arm could extend and grasp the plaything. Therefore, the plaything is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable plaything_4": ["no", 1.0869754938800866e-13, 5.4117324635232986e-15, "The image shows a room with a robotic arm (the agent). The agent is positioned near a set of stairs. There are two objects labeled \"plaything_2\" and \"plaything_4\". \"plaything_4\" is located on a table in the middle of the room. The agent is positioned near the stairs, which are quite far from the table where \"plaything_4\" is located. Therefore, \"plaything_4\" is not in reach of the agent.", true, "Question: Is the plaything_4 in reach of the agent\n<explanation>\nThe image shows a room with a robotic arm (the agent). The agent is positioned near a set of stairs. There are two objects labeled \"plaything_2\" and \"plaything_4\". \"plaything_4\" is located on a table in the middle of the room. The agent is positioned near the stairs, which are quite far from the table where \"plaything_4\" is located. Therefore, \"plaything_4\" is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"reachable plaything_1": {"before": false, "after": false}, "reachable plaything_3": {"before": false, "after": false}, "reachable carton_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(plaything_2)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable plaything_2": ["yes", 1.6877249381028192e-13, 7.415345701573036e-15, "The image shows a robotic arm (the agent) and a plaything labeled \"plaything_2\". I need to determine if the agent can reach the plaything. The plaything is located near the bottom of the stairs, and the agent is positioned to the right of the plaything. Visually, it appears that the agent's arm could extend and grasp the plaything. Therefore, the plaything is in reach of the agent.", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything labeled \"plaything_2\". I need to determine if the agent can reach the plaything. The plaything is located near the bottom of the stairs, and the agent is positioned to the right of the plaything. Visually, it appears that the agent's arm could extend and grasp the plaything. Therefore, the plaything is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "holding plaything_4": ["no", 1.5073608593957344e-13, 8.068321537138892e-14, "The image shows a robotic arm (the agent) and a plaything labeled \"plaything_4\". The plaything is located on the floor near the couch. The robotic arm is not grasping or holding the plaything. Therefore, the agent is not holding the plaything_4.", true, "Question: Is the agent holding the plaything_4\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything labeled \"plaything_4\". The plaything is located on the floor near the couch. The robotic arm is not grasping or holding the plaything. Therefore, the agent is not holding the plaything_4.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding plaything_1": [true, false, false], "holding plaything_3": [true, false, false], "all_correct": true}, "effects_results": {"holding plaything_2": ["yes", 2.3011277670674513e-13, 2.748304954111342e-14, "The image shows a robotic arm (the agent) holding a complex, multi-part object. The object appears to be a toy or plaything, and it is labeled as \"plaything_2\" in the scene. The robotic arm is clearly grasping and supporting the plaything. Therefore, the agent is holding the plaything_2.", true, "Question: Is the agent holding the plaything_2\n<explanation>\nThe image shows a robotic arm (the agent) holding a complex, multi-part object. The object appears to be a toy or plaything, and it is labeled as \"plaything_2\" in the scene. The robotic arm is clearly grasping and supporting the plaything. Therefore, the agent is holding the plaything_2.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"ontop plaything_2,plaything_1": {"before": false, "after": false}, "ontop plaything_2,plaything_2": {"before": null, "after": false}, "ontop plaything_2,plaything_3": {"before": false, "after": false}, "ontop plaything_2,plaything_4": {"before": false, "after": false}, "ontop plaything_2,carton_1": {"before": false, "after": false}, "ontop plaything_2,table_1": {"before": false, "after": false}, "nextto plaything_2,plaything_1": {"before": false, "after": false}, "nextto plaything_2,plaything_2": {"before": null, "after": false}, "nextto plaything_2,plaything_3": {"before": false, "after": false}, "nextto plaything_2,plaything_4": {"before": false, "after": false}, "nextto plaything_2,carton_1": {"before": false, "after": false}, "nextto plaything_2,table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(plaything_4)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable plaything_4": [true, false, false], "all_correct": true}, "effects_results": {"reachable plaything_4": ["yes", 4.9991196756195636e-14, 1.5096032944202954e-15, "The agent is a robotic arm. I need to determine if the plaything_4 is close enough to the robotic arm for it to reach. The plaything_4 is a small, cone-shaped object on a rug. The robotic arm is positioned near the center of the image, and the plaything_4 is relatively close to it. Based on the image, it appears that the robotic arm could reach the plaything_4.", true, "Question: Is the plaything_4 in reach of the agent\n<explanation>\nThe agent is a robotic arm. I need to determine if the plaything_4 is close enough to the robotic arm for it to reach. The plaything_4 is a small, cone-shaped object on a rug. The robotic arm is positioned near the center of the image, and the plaything_4 is relatively close to it. Based on the image, it appears that the robotic arm could reach the plaything_4.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable plaything_2": ["yes", 8.474943430413287e-14, 2.2584958280321603e-15, "The image shows a robotic arm (the agent) and several objects labeled with \"plaything_X\" where X is a number. The question asks if \"plaything_2\" is within reach of the agent. Looking at the image, \"plaything_2\" is a cylindrical object that is very close to the robotic arm. It appears to be directly in front of the arm and within the arm's range of motion. Therefore, the answer is \"Yes\".", false, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and several objects labeled with \"plaything_X\" where X is a number. The question asks if \"plaything_2\" is within reach of the agent. Looking at the image, \"plaything_2\" is a cylindrical object that is very close to the robotic arm. It appears to be directly in front of the arm and within the arm's range of motion. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable plaything_3": ["yes", 1.0478441302575608e-13, 2.792410129081463e-15, "The agent is a robotic arm. I need to determine if the plaything_3 is close enough to the robotic arm for it to reach. The plaything_3 is a small object on a rug in front of the robotic arm. Based on the image, it appears to be within the robotic arm's range of motion. Therefore, the plaything_3 is in reach of the agent.", false, "Question: Is the plaything_3 in reach of the agent\n<explanation>\nThe agent is a robotic arm. I need to determine if the plaything_3 is close enough to the robotic arm for it to reach. The plaything_3 is a small object on a rug in front of the robotic arm. Based on the image, it appears to be within the robotic arm's range of motion. Therefore, the plaything_3 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable plaything_1": {"before": false, "after": false}, "reachable carton_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(carton_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable carton_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable carton_1": ["yes", 1.4293109068270332e-13, 8.06362067368822e-15, "The image shows a robotic arm (the agent) holding a carton. The question asks if carton_1 is in reach of the agent. Since the agent is already holding carton_1, it is clearly within reach.", true, "Question: Is the carton_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) holding a carton. The question asks if carton_1 is in reach of the agent. Since the agent is already holding carton_1, it is clearly within reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable plaything_2": ["yes", 6.037133141491291e-14, 4.373284893266103e-15, "The image shows a robotic arm (the agent) and a plaything labeled \"plaything_2\". The red lines emanating from the robotic arm indicate its reach. By visually inspecting the image, we can see that the plaything_2 is within the boundaries defined by the red lines. Therefore, the plaything_2 is in reach of the agent.", false, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything labeled \"plaything_2\". The red lines emanating from the robotic arm indicate its reach. By visually inspecting the image, we can see that the plaything_2 is within the boundaries defined by the red lines. Therefore, the plaything_2 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable plaything_3": ["yes", 9.339585176201468e-14, 6.765573175207106e-15, "The image shows a robotic arm (the agent) and a plaything labeled \"plaything_3\". The red lines emanating from the robotic arm seem to define a reachable volume. The plaything_3 appears to be within this reachable volume. Therefore, the plaything_3 is in reach of the agent.", false, "Question: Is the plaything_3 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything labeled \"plaything_3\". The red lines emanating from the robotic arm seem to define a reachable volume. The plaything_3 appears to be within this reachable volume. Therefore, the plaything_3 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable plaything_4": ["yes", 4.0950451580049063e-14, 2.617874755134978e-15, "The image shows a robotic arm (the agent) and a plaything labeled \"plaything_4\". The robotic arm appears to be holding \"plaything_4\". Therefore, plaything_4 is in reach of the agent.", false, "Question: Is the plaything_4 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything labeled \"plaything_4\". The robotic arm appears to be holding \"plaything_4\". Therefore, plaything_4 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable plaything_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-inside(plaything_2, carton_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding plaything_2": ["yes", 1.6877252091533623e-13, 2.2840877003356755e-14, "The image shows a robotic arm (the agent) and a plaything labeled \"plaything_2\". The robotic arm's gripper is closed around the plaything_2. Therefore, the agent is holding the plaything_2.", true, "Question: Is the agent holding the plaything_2\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything labeled \"plaything_2\". The robotic arm's gripper is closed around the plaything_2. Therefore, the agent is holding the plaything_2.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable carton_1": ["yes", 1.4293109068270332e-13, 8.06362067368822e-15, "The image shows a robotic arm (the agent) holding a carton. The question asks if carton_1 is in reach of the agent. Since the agent is already holding carton_1, it is clearly within reach.", true, "Question: Is the carton_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) holding a carton. The question asks if carton_1 is in reach of the agent. Since the agent is already holding carton_1, it is clearly within reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "open carton_1": ["yes", 6.84096808606198e-14, 6.84096808606198e-14, "The image shows a robotic arm holding a carton. The carton appears to be partially open, with items spilling out of it. Therefore, the carton is open.", true, "Question: Is the carton_1 open\n<explanation>\nThe image shows a robotic arm holding a carton. The carton appears to be partially open, with items spilling out of it. Therefore, the carton is open.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"inside plaything_2,carton_1": ["no", 3.5288937570709944e-14, 3.9987612288246155e-14, "I will first locate the objects \"plaything_2\" and \"carton_1\" in the image. \"plaything_2\" is a small object on the floor, and \"carton_1\" is a cardboard box also on the floor. By visually inspecting the image, it appears that \"plaything_2\" is located near the \"carton_1\", but it is not inside it. Therefore, the answer is \"No\".", false, "Question: Is the plaything_2 inside the carton_1\n<explanation>\nI will first locate the objects \"plaything_2\" and \"carton_1\" in the image. \"plaything_2\" is a small object on the floor, and \"carton_1\" is a cardboard box also on the floor. By visually inspecting the image, it appears that \"plaything_2\" is located near the \"carton_1\", but it is not inside it. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", false], "holding plaything_2": ["yes", 6.67508366289371e-13, 3.323328347541385e-14, "The image shows a robotic arm (the agent) and a plaything_2 object. The plaything_2 object is highlighted with a red bounding box and appears to be grasped by the robotic arm's gripper. Therefore, the agent is holding the plaything_2.", false, "Question: Is the agent holding the plaything_2\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything_2 object. The plaything_2 object is highlighted with a red bounding box and appears to be grasped by the robotic arm's gripper. Therefore, the agent is holding the plaything_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {}}, "action_info": "success"}, {"action": "place-next-to(plaything_2, plaything_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding plaything_2": ["yes", 4.185716443588783e-13, 2.3614196061343302e-14, "The image shows a robotic arm (the agent) and a plaything_2 object. The plaything_2 object is highlighted with a red bounding box and appears to be grasped by the robotic arm's gripper. Therefore, the agent is holding the plaything_2.", true, "Question: Is the agent holding the plaything_2\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything_2 object. The plaything_2 object is highlighted with a red bounding box and appears to be grasped by the robotic arm's gripper. Therefore, the agent is holding the plaything_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable plaything_2": ["yes", 3.6938811384668035e-13, 1.11545557065682e-14, "The image shows a robotic arm (the agent) and a plaything_2. I need to determine if the plaything_2 is within the reach of the robotic arm. Based on the perspective and the relative positions of the arm and the plaything_2, it appears that the plaything_2 is close enough for the robotic arm to reach it.", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything_2. I need to determine if the plaything_2 is within the reach of the robotic arm. Based on the perspective and the relative positions of the arm and the plaything_2, it appears that the plaything_2 is close enough for the robotic arm to reach it.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(plaything_2, plaything_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding plaything_2": ["yes", 4.185716443588783e-13, 2.3614196061343302e-14, "The image shows a robotic arm (the agent) and a plaything_2 object. The plaything_2 object is highlighted with a red bounding box and appears to be grasped by the robotic arm's gripper. Therefore, the agent is holding the plaything_2.", true, "Question: Is the agent holding the plaything_2\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything_2 object. The plaything_2 object is highlighted with a red bounding box and appears to be grasped by the robotic arm's gripper. Therefore, the agent is holding the plaything_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable plaything_2": ["yes", 3.6938811384668035e-13, 1.11545557065682e-14, "The image shows a robotic arm (the agent) and a plaything_2. I need to determine if the plaything_2 is within the reach of the robotic arm. Based on the perspective and the relative positions of the arm and the plaything_2, it appears that the plaything_2 is close enough for the robotic arm to reach it.", true, "Question: Is the plaything_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a plaything_2. I need to determine if the plaything_2 is within the reach of the robotic arm. Based on the perspective and the relative positions of the arm and the plaything_2, it appears that the plaything_2 is close enough for the robotic arm to reach it.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable plaything_2": ["yes", "yes"], "reachable plaything_3": ["yes", "yes"], "reachable plaything_4": ["yes", "yes"], "holding plaything_2": ["yes", "yes"], "holding plaything_3": ["no", "no"], "holding plaything_4": ["no", "no"], "ontop plaything_2,plaything_3": ["no", "no"], "ontop plaything_2,plaything_4": ["no", "no"], "ontop plaything_3,plaything_2": ["no", "no"], "ontop plaything_3,plaything_4": ["yes", "no"], "ontop plaything_4,plaything_2": ["no", "no"], "ontop plaything_4,plaything_3": ["yes", "no"], "nextto plaything_2,plaything_3": ["no", "no"], "nextto plaything_2,plaything_4": ["no", "no"], "nextto plaything_3,plaything_2": ["no", "no"], "nextto plaything_3,plaything_4": ["yes", "no"], "nextto plaything_4,plaything_2": ["no", "no"], "nextto plaything_4,plaything_3": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.7777777777777778, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.7142857142857143, "no_correct": 10, "no_total": 14, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.6666666666666666, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.6666666666666666, "no_correct": 4, "no_total": 6}, "nextto": {"accuracy": 0.6666666666666666, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.6666666666666666, "no_correct": 4, "no_total": 6}}}, "step": 3, "actions": ["navigate-to(carton_1)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"]}, {"enum_results": {"reachable plaything_2": ["yes", "yes"], "reachable plaything_3": ["yes", "no"], "reachable plaything_4": ["yes", "no"], "reachable carton_1": ["yes", "yes"], "holding plaything_2": ["yes", "yes"], "holding plaything_3": ["yes", "no"], "holding plaything_4": ["yes", "no"], "open carton_1": ["yes", "yes"], "ontop plaything_2,plaything_3": ["yes", "no"], "ontop plaything_2,plaything_4": ["yes", "no"], "ontop plaything_2,carton_1": ["no", "no"], "ontop plaything_3,plaything_2": ["yes", "no"], "ontop plaything_3,plaything_4": ["yes", "no"], "ontop plaything_3,carton_1": ["no", "no"], "ontop plaything_4,plaything_2": ["yes", "no"], "ontop plaything_4,plaything_3": ["yes", "no"], "ontop plaything_4,carton_1": ["no", "no"], "inside plaything_2,carton_1": ["no", "no"], "inside plaything_3,carton_1": ["no", "no"], "inside plaything_4,carton_1": ["yes", "no"], "nextto plaything_2,plaything_3": ["yes", "no"], "nextto plaything_2,plaything_4": ["yes", "no"], "nextto plaything_2,carton_1": ["yes", "no"], "nextto plaything_3,plaything_2": ["yes", "no"], "nextto plaything_3,plaything_4": ["yes", "no"], "nextto plaything_3,carton_1": ["yes", "no"], "nextto plaything_4,plaything_2": ["yes", "no"], "nextto plaything_4,plaything_3": ["yes", "no"], "nextto plaything_4,carton_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.3103448275862069, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.2, "no_correct": 5, "no_total": 25, "predicates": {"reachable": {"accuracy": 0.5, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "holding": {"accuracy": 0.3333333333333333, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "open": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 0.3333333333333333, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.3333333333333333, "no_correct": 3, "no_total": 9}, "inside": {"accuracy": 0.6666666666666666, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.6666666666666666, "no_correct": 2, "no_total": 3}, "nextto": {"accuracy": 0.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.0, "no_correct": 0, "no_total": 9}}}, "step": 4, "actions": ["place-inside(plaything_2, carton_1)"]}, {"enum_results": {"reachable plaything_2": ["yes", "yes"], "reachable plaything_3": ["no", "no"], "reachable plaything_4": ["yes", "no"], "reachable carton_1": ["yes", "yes"], "holding plaything_2": ["yes", "no"], "holding plaything_3": ["no", "no"], "holding plaything_4": ["yes", "no"], "open carton_1": ["no", "yes"], "ontop plaything_2,plaything_3": ["no", "no"], "ontop plaything_2,plaything_4": ["no", "no"], "ontop plaything_2,carton_1": ["no", "yes"], "ontop plaything_3,plaything_2": ["no", "no"], "ontop plaything_3,plaything_4": ["no", "no"], "ontop plaything_3,carton_1": ["no", "no"], "ontop plaything_4,plaything_2": ["no", "no"], "ontop plaything_4,plaything_3": ["no", "no"], "ontop plaything_4,carton_1": ["no", "no"], "inside plaything_2,carton_1": ["no", "yes"], "inside plaything_3,carton_1": ["no", "no"], "inside plaything_4,carton_1": ["no", "no"], "nextto plaything_2,plaything_3": ["no", "no"], "nextto plaything_2,plaything_4": ["yes", "no"], "nextto plaything_2,carton_1": ["no", "yes"], "nextto plaything_3,plaything_2": ["no", "no"], "nextto plaything_3,plaything_4": ["no", "no"], "nextto plaything_3,carton_1": ["no", "no"], "nextto plaything_4,plaything_2": ["no", "no"], "nextto plaything_4,plaything_3": ["yes", "no"], "nextto plaything_4,carton_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.6551724137931034, "yes_accuracy": 0.3333333333333333, "yes_correct": 2, "yes_total": 6, "no_accuracy": 0.7391304347826086, "no_correct": 17, "no_total": 23, "predicates": {"reachable": {"accuracy": 0.75, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}, "holding": {"accuracy": 0.3333333333333333, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.3333333333333333, "no_correct": 1, "no_total": 3}, "open": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 0.8888888888888888, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 8, "no_total": 8}, "inside": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "nextto": {"accuracy": 0.5555555555555556, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.625, "no_correct": 5, "no_total": 8}}}, "step": 5, "actions": ["place-next-to(plaything_2, plaything_2)", "place-next-to(plaything_4, plaything_2)", "open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "grasp(plaything_4)", "place-inside(plaything_4, carton_1)"]}, {"enum_results": {"reachable plaything_2": ["yes", "yes"], "reachable plaything_3": ["no", "no"], "reachable plaything_4": ["yes", "no"], "reachable carton_1": ["yes", "yes"], "holding plaything_2": ["yes", "no"], "holding plaything_3": ["no", "no"], "holding plaything_4": ["yes", "no"], "open carton_1": ["no", "yes"], "ontop plaything_2,plaything_3": ["no", "no"], "ontop plaything_2,plaything_4": ["no", "no"], "ontop plaything_2,carton_1": ["no", "yes"], "ontop plaything_3,plaything_2": ["no", "no"], "ontop plaything_3,plaything_4": ["no", "no"], "ontop plaything_3,carton_1": ["no", "no"], "ontop plaything_4,plaything_2": ["no", "no"], "ontop plaything_4,plaything_3": ["no", "no"], "ontop plaything_4,carton_1": ["no", "no"], "inside plaything_2,carton_1": ["no", "yes"], "inside plaything_3,carton_1": ["no", "no"], "inside plaything_4,carton_1": ["no", "no"], "nextto plaything_2,plaything_3": ["no", "no"], "nextto plaything_2,plaything_4": ["yes", "no"], "nextto plaything_2,carton_1": ["no", "yes"], "nextto plaything_3,plaything_2": ["no", "no"], "nextto plaything_3,plaything_4": ["no", "no"], "nextto plaything_3,carton_1": ["no", "no"], "nextto plaything_4,plaything_2": ["no", "no"], "nextto plaything_4,plaything_3": ["yes", "no"], "nextto plaything_4,carton_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.6551724137931034, "yes_accuracy": 0.3333333333333333, "yes_correct": 2, "yes_total": 6, "no_accuracy": 0.7391304347826086, "no_correct": 17, "no_total": 23, "predicates": {"reachable": {"accuracy": 0.75, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}, "holding": {"accuracy": 0.3333333333333333, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.3333333333333333, "no_correct": 1, "no_total": 3}, "open": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 0.8888888888888888, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 8, "no_total": 8}, "inside": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "nextto": {"accuracy": 0.5555555555555556, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.625, "no_correct": 5, "no_total": 8}}}, "step": 6, "actions": ["place-next-to(plaything_2, plaything_2)", "place-next-to(plaything_4, plaything_2)", "open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "grasp(plaything_4)", "place-inside(plaything_4, carton_1)"]}], "remaining_actions": ["place-next-to(plaything_4, plaything_2)", "open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "grasp(plaything_4)", "place-inside(plaything_4, carton_1)"]}, "data/planning/igibson/medium/collect_misplaced_items_medium.pddl_Beechwood_0_int_23": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(gym_shoe_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable gym_shoe_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable gym_shoe_1": ["yes", 5.639052592931737e-13, 1.9295776456686176e-14, "The image shows a robotic arm and a gym shoe on the floor. The robotic arm is positioned such that it appears to be able to reach the gym shoe. Therefore, the gym shoe is in reach of the agent.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm and a gym shoe on the floor. The robotic arm is positioned such that it appears to be able to reach the gym shoe. Therefore, the gym shoe is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"reachable sock_1": {"before": false, "after": false}, "reachable sock_2": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}, "reachable table_2": {"before": false, "after": false}, "reachable cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(gym_shoe_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable gym_shoe_1": ["yes", 5.639052592931737e-13, 1.9295776456686176e-14, "The image shows a robotic arm and a gym shoe on the floor. The robotic arm is positioned such that it appears to be able to reach the gym shoe. Therefore, the gym shoe is in reach of the agent.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm and a gym shoe on the floor. The robotic arm is positioned such that it appears to be able to reach the gym shoe. Therefore, the gym shoe is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding sock_1": [true, false, false], "holding sock_2": [true, false, false], "all_correct": true}, "effects_results": {"holding gym_shoe_1": ["yes", 4.29907303332866e-13, 3.9987612288246155e-14, "The image shows a robotic arm (the agent) and a gym shoe. The gym shoe is being held by the robotic arm's gripper. Therefore, the agent is holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent) and a gym shoe. The gym shoe is being held by the robotic arm's gripper. Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"ontop gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "ontop gym_shoe_1,sock_1": {"before": false, "after": false}, "ontop gym_shoe_1,sock_2": {"before": false, "after": false}, "ontop gym_shoe_1,table_1": {"before": false, "after": false}, "ontop gym_shoe_1,table_2": {"before": false, "after": false}, "ontop gym_shoe_1,cabinet_1": {"before": false, "after": false}, "nextto gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "nextto gym_shoe_1,sock_1": {"before": false, "after": false}, "nextto gym_shoe_1,sock_2": {"before": false, "after": false}, "nextto gym_shoe_1,table_1": {"before": false, "after": false}, "nextto gym_shoe_1,table_2": {"before": false, "after": false}, "nextto gym_shoe_1,cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(sock_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable sock_2": [true, false, false], "all_correct": true}, "effects_results": {"reachable sock_2": ["no", 3.144215302616077e-13, 2.4487169562013855e-13, "The image shows a robotic arm holding a shoe. There are some objects on a shelf to the right of the arm. I need to determine if an object labeled \"sock_2\" is within the reach of the robotic arm. I do not see any socks in the image. Therefore, sock_2 is not in reach of the agent.", false, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a shoe. There are some objects on a shelf to the right of the arm. I need to determine if an object labeled \"sock_2\" is within the reach of the robotic arm. I do not see any socks in the image. Therefore, sock_2 is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", false], "reachable gym_shoe_1": ["yes", 6.090157132938867e-13, 2.3614099499587315e-14, "The image shows a robotic arm holding a gym shoe. The gym shoe appears to be directly grasped by the robotic arm. Therefore, the gym shoe is in reach of the agent.", false, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a gym shoe. The gym shoe appears to be directly grasped by the robotic arm. Therefore, the gym shoe is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable sock_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}, "reachable table_2": {"before": false, "after": false}, "reachable cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(sock_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable sock_2": ["no", 2.193196796049235e-13, 1.7080633511312032e-13, "The image shows a robotic arm holding a shoe. There are some objects on a shelf to the right of the arm. I need to determine if an object labeled \"sock_2\" is within the reach of the robotic arm. I do not see any socks in the image. Therefore, sock_2 is not in reach of the agent.", true, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a shoe. There are some objects on a shelf to the right of the arm. I need to determine if an object labeled \"sock_2\" is within the reach of the robotic arm. I do not see any socks in the image. Therefore, sock_2 is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", false], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"reachable sock_2": ["yes", 3.220196461914404e-13, 1.816710505446982e-14, "The image shows a robotic arm (the agent) and a sock on the floor. The sock appears to be relatively close to the robotic arm. Based on the image, it seems the sock is within the range of motion of the robotic arm, and therefore within reach.", true, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a sock on the floor. The sock appears to be relatively close to the robotic arm. Based on the image, it seems the sock is within the range of motion of the robotic arm, and therefore within reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable gym_shoe_1": ["yes", 2.1789759937791003e-13, 9.573751669634655e-15, "The image shows a robotic arm (the agent) holding a gym shoe. The question asks if the gym_shoe_1 is in reach of the agent. Since the agent is currently holding the gym shoe, it is clearly within reach.", false, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) holding a gym shoe. The question asks if the gym_shoe_1 is in reach of the agent. Since the agent is currently holding the gym shoe, it is clearly within reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_1": ["no", 4.9991230637513526e-14, 9.843856923986895e-15, "The image shows a robotic arm (the agent) and a table in the background. To determine if the table is in reach, I need to assess the distance between the agent and the table. The table is quite far away from the agent, and there are other objects (like a shoe) between them. It appears unlikely that the agent can reach the table without moving significantly or extending its arm beyond a reasonable range. Therefore, the table is not in reach of the agent.", true, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table in the background. To determine if the table is in reach, I need to assess the distance between the agent and the table. The table is quite far away from the agent, and there are other objects (like a shoe) between them. It appears unlikely that the agent can reach the table without moving significantly or extending its arm beyond a reasonable range. Therefore, the table is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable sock_1": {"before": false, "after": false}, "reachable table_2": {"before": false, "after": false}, "reachable cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(gym_shoe_1, sock_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 1.9592433144616228e-13, 2.065027192483821e-14, "The image shows a robotic arm (the agent) and a gym shoe. The robotic arm's gripper is closed around the gym shoe. Therefore, the agent is holding the gym shoe.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent) and a gym shoe. The robotic arm's gripper is closed around the gym shoe. Therefore, the agent is holding the gym shoe.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable sock_2": ["yes", 2.5078913555229287e-13, 1.6032412620799533e-14, "The image shows a robotic arm (the agent) and a sock on the floor. The sock appears to be relatively close to the robotic arm. \"In reach\" implies that the agent can physically manipulate the sock with its arm. Based on the image, the sock is close enough for the agent to reach it.", true, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a sock on the floor. The sock appears to be relatively close to the robotic arm. \"In reach\" implies that the agent can physically manipulate the sock with its arm. Based on the image, the sock is close enough for the agent to reach it.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"nextto gym_shoe_1,sock_2": ["yes", 1.8167106748535715e-14, 3.156969509689688e-15, "I need to identify the gym_shoe_1 and sock_2 in the image. I can see a gym shoe on the floor and a sock on the floor. They appear to be relatively close to each other. Therefore, the gym_shoe_1 is next to the sock_2.", true, "Question: Is the gym_shoe_1 next to the sock_2\n<explanation>\nI need to identify the gym_shoe_1 and sock_2 in the image. I can see a gym shoe on the floor and a sock on the floor. They appear to be relatively close to each other. Therefore, the gym_shoe_1 is next to the sock_2.\n</explanation>\n<answer>\nYes\n</answer>", true], "holding gym_shoe_1": ["yes", 1.0512620776063214e-13, 2.6580070067692974e-14, "The image shows a robotic arm, which is the agent. The agent appears to be holding an object. Looking closely, the object appears to be a gym shoe. The object on the floor is labeled as gym_shoe_1. The agent is holding a gym shoe, so it is likely holding gym_shoe_1.", false, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm, which is the agent. The agent appears to be holding an object. Looking closely, the object appears to be a gym shoe. The object on the floor is labeled as gym_shoe_1. The agent is holding a gym shoe, so it is likely holding gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {}}, "action_info": "success"}, {"action": "place-next-to(gym_shoe_1, table_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 1.0487071551868593e-13, 3.004595948126812e-14, "The image shows a robotic arm, which is the agent. The agent appears to be holding an object. Looking closely, the object appears to be a gym shoe. The object on the floor is labeled as gym_shoe_1. The agent is holding a gym shoe, so it is holding gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm, which is the agent. The agent appears to be holding an object. Looking closely, the object appears to be a gym shoe. The object on the floor is labeled as gym_shoe_1. The agent is holding a gym shoe, so it is holding gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_1": ["yes", 6.42387144454866e-14, 8.693764905567426e-15, "The image shows a robotic arm (the agent) and a table with objects on it (table_1). I need to determine if the agent can reach the table. Visually, the agent is positioned close enough to the table that its arm could extend and interact with objects on the table. Therefore, the table is in reach of the agent.", true, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table with objects on it (table_1). I need to determine if the agent can reach the table. Visually, the agent is positioned close enough to the table that its arm could extend and interact with objects on the table. Therefore, the table is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(gym_shoe_1, table_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 1.0487071551868593e-13, 3.004595948126812e-14, "The image shows a robotic arm, which is the agent. The agent appears to be holding an object. Looking closely, the object appears to be a gym shoe. The object on the floor is labeled as gym_shoe_1. The agent is holding a gym shoe, so it is holding gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm, which is the agent. The agent appears to be holding an object. Looking closely, the object appears to be a gym shoe. The object on the floor is labeled as gym_shoe_1. The agent is holding a gym shoe, so it is holding gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_1": ["yes", 6.42387144454866e-14, 8.693764905567426e-15, "The image shows a robotic arm (the agent) and a table with objects on it (table_1). I need to determine if the agent can reach the table. Visually, the agent is positioned close enough to the table that its arm could extend and interact with objects on the table. Therefore, the table is in reach of the agent.", true, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table with objects on it (table_1). I need to determine if the agent can reach the table. Visually, the agent is positioned close enough to the table that its arm could extend and interact with objects on the table. Therefore, the table is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_2": ["no", "yes"], "holding gym_shoe_1": ["yes", "yes"], "holding sock_2": ["no", "no"], "ontop gym_shoe_1,sock_2": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["no", "no"], "nextto sock_2,gym_shoe_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.875, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5, "predicates": {"reachable": {"accuracy": 0.5, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "nextto": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}}}, "step": 3, "actions": ["navigate-to(sock_2)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_2": ["yes", "yes"], "reachable table_1": ["no", "yes"], "holding gym_shoe_1": ["yes", "yes"], "holding sock_2": ["no", "no"], "ontop gym_shoe_1,sock_2": ["yes", "no"], "ontop gym_shoe_1,table_1": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "ontop sock_2,table_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["no", "no"], "nextto gym_shoe_1,table_1": ["yes", "no"], "nextto sock_2,gym_shoe_1": ["yes", "no"], "nextto sock_2,table_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.6923076923076923, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.6666666666666666, "no_correct": 6, "no_total": 9, "predicates": {"reachable": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 3, "no_total": 4}, "nextto": {"accuracy": 0.5, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.5, "no_correct": 2, "no_total": 4}}}, "step": 4, "actions": ["place-next-to(gym_shoe_1, sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_2": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "holding gym_shoe_1": ["yes", "no"], "holding sock_2": ["no", "no"], "ontop gym_shoe_1,sock_2": ["no", "no"], "ontop gym_shoe_1,table_1": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "ontop sock_2,table_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["yes", "yes"], "nextto gym_shoe_1,table_1": ["no", "no"], "nextto sock_2,gym_shoe_1": ["yes", "yes"], "nextto sock_2,table_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.8461538461538461, "yes_accuracy": 1.0, "yes_correct": 5, "yes_total": 5, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.5, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 4, "no_total": 4}, "nextto": {"accuracy": 0.75, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}}}, "step": 5, "actions": ["place-next-to(gym_shoe_1, table_1)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_2": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "holding gym_shoe_1": ["yes", "no"], "holding sock_2": ["no", "no"], "ontop gym_shoe_1,sock_2": ["no", "no"], "ontop gym_shoe_1,table_1": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "ontop sock_2,table_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["yes", "yes"], "nextto gym_shoe_1,table_1": ["no", "no"], "nextto sock_2,gym_shoe_1": ["yes", "yes"], "nextto sock_2,table_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.8461538461538461, "yes_accuracy": 1.0, "yes_correct": 5, "yes_total": 5, "no_accuracy": 0.75, "no_correct": 6, "no_total": 8, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.5, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 4, "no_total": 4}, "nextto": {"accuracy": 0.75, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}}}, "step": 6, "actions": ["place-next-to(gym_shoe_1, table_1)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"]}], "remaining_actions": ["grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"]}, "data/planning/igibson/medium/collect_misplaced_items_medium.pddl_Beechwood_0_int_24": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(gym_shoe_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable gym_shoe_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable gym_shoe_1": ["yes", 4.98878445064771e-13, 2.1919188266197355e-14, "The image shows a robotic arm and a gym shoe on the floor. The robotic arm is positioned such that it appears to be able to reach the gym shoe. Therefore, the gym shoe is in reach of the agent.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm and a gym shoe on the floor. The robotic arm is positioned such that it appears to be able to reach the gym shoe. Therefore, the gym shoe is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"reachable sock_1": {"before": false, "after": false}, "reachable sock_2": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}, "reachable table_2": {"before": false, "after": false}, "reachable cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(gym_shoe_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable gym_shoe_1": ["yes", 4.98878445064771e-13, 2.1919188266197355e-14, "The image shows a robotic arm and a gym shoe on the floor. The robotic arm is positioned such that it appears to be able to reach the gym shoe. Therefore, the gym shoe is in reach of the agent.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm and a gym shoe on the floor. The robotic arm is positioned such that it appears to be able to reach the gym shoe. Therefore, the gym shoe is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding sock_1": [true, false, false], "holding sock_2": [true, false, false], "all_correct": true}, "effects_results": {"holding gym_shoe_1": ["yes", 1.9780348420404131e-13, 1.623669833295243e-14, "The image shows a robotic arm (the agent) and a gym shoe. The robotic arm's gripper is closed around the gym shoe. Therefore, the agent is holding the gym shoe.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent) and a gym shoe. The robotic arm's gripper is closed around the gym shoe. Therefore, the agent is holding the gym shoe.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"ontop gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "ontop gym_shoe_1,sock_1": {"before": false, "after": false}, "ontop gym_shoe_1,sock_2": {"before": false, "after": false}, "ontop gym_shoe_1,table_1": {"before": false, "after": false}, "ontop gym_shoe_1,table_2": {"before": false, "after": false}, "ontop gym_shoe_1,cabinet_1": {"before": false, "after": false}, "nextto gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "nextto gym_shoe_1,sock_1": {"before": false, "after": false}, "nextto gym_shoe_1,sock_2": {"before": false, "after": false}, "nextto gym_shoe_1,table_1": {"before": false, "after": false}, "nextto gym_shoe_1,table_2": {"before": false, "after": false}, "nextto gym_shoe_1,cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(sock_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable sock_2": [true, false, false], "all_correct": true}, "effects_results": {"reachable sock_2": ["yes", 2.8576265160597247e-13, 1.2555536342865551e-14, "The image shows a robotic arm holding a shoe. There is a small white object on the floor, which is labeled as \"sock_2\". The robotic arm is positioned close enough to the floor that it could potentially reach the sock_2. Therefore, the sock_2 is in reach of the agent.", true, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a shoe. There is a small white object on the floor, which is labeled as \"sock_2\". The robotic arm is positioned close enough to the floor that it could potentially reach the sock_2. Therefore, the sock_2 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable gym_shoe_1": ["yes", 3.6603475784234563e-13, 1.8223798663695445e-14, "The image shows a robotic arm holding a gym shoe. The robotic arm is the agent. Therefore, the gym shoe is in reach of the agent.", false, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a gym shoe. The robotic arm is the agent. Therefore, the gym shoe is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_1": ["no", 3.036666987202112e-14, 7.677897116101663e-15, "The image shows a robotic arm holding a shoe. There is a table in the background, labeled as table_1. The robotic arm is quite far from the table. It is unlikely that the robotic arm can reach the table without moving closer. Therefore, the table is not in reach of the agent.", true, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a shoe. There is a table in the background, labeled as table_1. The robotic arm is quite far from the table. It is unlikely that the robotic arm can reach the table without moving closer. Therefore, the table is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable sock_1": {"before": false, "after": false}, "reachable table_2": {"before": false, "after": false}, "reachable cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(gym_shoe_1, sock_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 1.5404950264637923e-13, 9.848055666306435e-15, "The image shows a robotic arm holding a shoe. The shoe appears to be a gym shoe. The name of the shoe is gym_shoe_1. Therefore, the agent is holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm holding a shoe. The shoe appears to be a gym shoe. The name of the shoe is gym_shoe_1. Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable sock_2": ["yes", 3.634443006966803e-13, 1.5968627651739495e-14, "The image shows a robotic arm holding a shoe. There is a small white object on the floor, which is labeled as \"sock_2\". The robotic arm is positioned close enough to the floor that it could potentially reach the sock_2. Therefore, the sock_2 is in reach of the agent.", true, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a shoe. There is a small white object on the floor, which is labeled as \"sock_2\". The robotic arm is positioned close enough to the floor that it could potentially reach the sock_2. Therefore, the sock_2 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"nextto gym_shoe_1,sock_2": ["yes", 2.632781518567117e-14, 6.656713771375404e-15, "I will first locate the gym_shoe_1 and sock_2 in the image. The gym_shoe_1 is on the floor, and the sock_2 is also on the floor. They are very close to each other. Therefore, the gym_shoe_1 is next to the sock_2.", true, "Question: Is the gym_shoe_1 next to the sock_2\n<explanation>\nI will first locate the gym_shoe_1 and sock_2 in the image. The gym_shoe_1 is on the floor, and the sock_2 is also on the floor. They are very close to each other. Therefore, the gym_shoe_1 is next to the sock_2.\n</explanation>\n<answer>\nYes\n</answer>", true], "holding gym_shoe_1": ["yes", 5.6133249497171064e-14, 1.6082443468862055e-14, "The image shows a robotic arm (the agent). I need to determine if the agent is holding the gym_shoe_1. Looking at the image, the agent is holding an object, and that object appears to be the gym_shoe_1 that is on the floor.", false, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent). I need to determine if the agent is holding the gym_shoe_1. Looking at the image, the agent is holding an object, and that object appears to be the gym_shoe_1 that is on the floor.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {}}, "action_info": "success"}, {"action": "place-next-to(gym_shoe_1, table_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 3.428465126273199e-14, 9.822716675689323e-15, "The image shows a robotic arm (the agent). I need to determine if the agent is holding the gym_shoe_1. Looking at the image, the agent is holding an object, and that object appears to be the gym_shoe_1 that is on the floor.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent). I need to determine if the agent is holding the gym_shoe_1. Looking at the image, the agent is holding an object, and that object appears to be the gym_shoe_1 that is on the floor.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_1": ["yes", 1.0587653665036431e-13, 1.8398585606427265e-14, "The image shows a robotic arm (the agent) and a table with some boxes on it. The table is labeled as \"table_1\". I need to determine if the agent can reach the table. Looking at the image, the agent is positioned such that it can likely reach the table without significant difficulty. The distance between the agent and the table appears to be within the range of the robotic arm.", true, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table with some boxes on it. The table is labeled as \"table_1\". I need to determine if the agent can reach the table. Looking at the image, the agent is positioned such that it can likely reach the table without significant difficulty. The distance between the agent and the table appears to be within the range of the robotic arm.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(gym_shoe_1, table_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 3.428465126273199e-14, 9.822716675689323e-15, "The image shows a robotic arm (the agent). I need to determine if the agent is holding the gym_shoe_1. Looking at the image, the agent is holding an object, and that object appears to be the gym_shoe_1 that is on the floor.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent). I need to determine if the agent is holding the gym_shoe_1. Looking at the image, the agent is holding an object, and that object appears to be the gym_shoe_1 that is on the floor.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_1": ["yes", 1.0587653665036431e-13, 1.8398585606427265e-14, "The image shows a robotic arm (the agent) and a table with some boxes on it. The table is labeled as \"table_1\". I need to determine if the agent can reach the table. Looking at the image, the agent is positioned such that it can likely reach the table without significant difficulty. The distance between the agent and the table appears to be within the range of the robotic arm.", true, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table with some boxes on it. The table is labeled as \"table_1\". I need to determine if the agent can reach the table. Looking at the image, the agent is positioned such that it can likely reach the table without significant difficulty. The distance between the agent and the table appears to be within the range of the robotic arm.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_2": ["yes", "yes"], "reachable table_1": ["no", "yes"], "holding gym_shoe_1": ["yes", "yes"], "holding sock_2": ["no", "no"], "ontop gym_shoe_1,sock_2": ["no", "no"], "ontop gym_shoe_1,table_1": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "ontop sock_2,table_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["yes", "no"], "nextto gym_shoe_1,table_1": ["no", "no"], "nextto sock_2,gym_shoe_1": ["yes", "no"], "nextto sock_2,table_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.7692307692307693, "yes_accuracy": 0.75, "yes_correct": 3, "yes_total": 4, "no_accuracy": 0.7777777777777778, "no_correct": 7, "no_total": 9, "predicates": {"reachable": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 4, "no_total": 4}, "nextto": {"accuracy": 0.5, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.5, "no_correct": 2, "no_total": 4}}}, "step": 3, "actions": ["place-next-to(gym_shoe_1, sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_2": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "holding gym_shoe_1": ["yes", "no"], "holding sock_2": ["no", "no"], "ontop gym_shoe_1,sock_2": ["no", "no"], "ontop gym_shoe_1,table_1": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "ontop sock_2,table_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["yes", "yes"], "nextto gym_shoe_1,table_1": ["yes", "no"], "nextto sock_2,gym_shoe_1": ["yes", "yes"], "nextto sock_2,table_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.7692307692307693, "yes_accuracy": 1.0, "yes_correct": 5, "yes_total": 5, "no_accuracy": 0.625, "no_correct": 5, "no_total": 8, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.5, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 4, "no_total": 4}, "nextto": {"accuracy": 0.5, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}}}, "step": 4, "actions": ["place-next-to(gym_shoe_1, table_1)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_2": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "holding gym_shoe_1": ["yes", "no"], "holding sock_2": ["no", "no"], "ontop gym_shoe_1,sock_2": ["no", "no"], "ontop gym_shoe_1,table_1": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "ontop sock_2,table_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["yes", "yes"], "nextto gym_shoe_1,table_1": ["yes", "no"], "nextto sock_2,gym_shoe_1": ["yes", "yes"], "nextto sock_2,table_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.7692307692307693, "yes_accuracy": 1.0, "yes_correct": 5, "yes_total": 5, "no_accuracy": 0.625, "no_correct": 5, "no_total": 8, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.5, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 4, "no_total": 4}, "nextto": {"accuracy": 0.5, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}}}, "step": 5, "actions": ["place-next-to(gym_shoe_1, table_1)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"]}], "remaining_actions": ["grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"]}, "data/planning/igibson/medium/collect_misplaced_items_medium.pddl_Merom_1_int_0": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(gym_shoe_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable gym_shoe_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable gym_shoe_1": ["yes", 5.061373954499959e-13, 1.5284025130582468e-14, "The image shows a kitchen and living room area. The agent is a robotic arm. I need to determine if the gym_shoe_1 is within the robotic arm's reach. The gym_shoe_1 is located on the floor, relatively close to the robotic arm. Based on the image, it appears the robotic arm could extend and grasp the gym_shoe_1.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a kitchen and living room area. The agent is a robotic arm. I need to determine if the gym_shoe_1 is within the robotic arm's reach. The gym_shoe_1 is located on the floor, relatively close to the robotic arm. Based on the image, it appears the robotic arm could extend and grasp the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable sock_1": ["yes", 8.031721988877027e-13, 1.6669308552301303e-14, "The image shows a kitchen and living room area. The agent is a robotic arm. I need to determine if the sock labeled \"sock_1\" is within the robotic arm's reach. The sock is on the floor, and the robotic arm is positioned relatively close to it. Based on the image, it appears the robotic arm could likely reach the sock without significant difficulty.", false, "Question: Is the sock_1 in reach of the agent\n<explanation>\nThe image shows a kitchen and living room area. The agent is a robotic arm. I need to determine if the sock labeled \"sock_1\" is within the robotic arm's reach. The sock is on the floor, and the robotic arm is positioned relatively close to it. Based on the image, it appears the robotic arm could likely reach the sock without significant difficulty.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_1": ["yes", 3.420256699387947e-13, 1.1703475408036349e-14, "The image shows a kitchen and living room area. The agent is a robotic arm. The table labeled \"table_1\" is visible in the image. I need to determine if the robotic arm can reach the table. Looking at the image, the robotic arm is positioned close enough to the table that it appears to be within its range of motion. Therefore, the table is in reach of the agent.", false, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a kitchen and living room area. The agent is a robotic arm. The table labeled \"table_1\" is visible in the image. I need to determine if the robotic arm can reach the table. Looking at the image, the robotic arm is positioned close enough to the table that it appears to be within its range of motion. Therefore, the table is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_2": ["no", 1.1977302016939056e-13, 6.410987734607743e-14, "The image shows a kitchen and living room area. The agent is a robotic arm. I need to determine if \"table_2\" is within the reach of the robotic arm. Looking at the image, there is a table labeled \"table_1\" and another table labeled \"table_2\". The robotic arm is close to \"table_1\", but \"table_2\" is further away, beyond the kitchen counter and near the living room area. It appears to be too far for the robotic arm to reach without significant movement. Therefore, the answer is \"No\".", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a kitchen and living room area. The agent is a robotic arm. I need to determine if \"table_2\" is within the reach of the robotic arm. Looking at the image, there is a table labeled \"table_1\" and another table labeled \"table_2\". The robotic arm is close to \"table_1\", but \"table_2\" is further away, beyond the kitchen counter and near the living room area. It appears to be too far for the robotic arm to reach without significant movement. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable sock_2": {"before": false, "after": false}, "reachable cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(gym_shoe_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable gym_shoe_1": ["yes", 4.526813765417387e-13, 1.2063550807980047e-14, "The image shows a kitchen and living room area. The agent is a robotic arm. I need to determine if the gym_shoe_1 is within the robotic arm's reach. The gym_shoe_1 is located on the floor, relatively close to the robotic arm. Based on the image, it appears the robotic arm could extend and grasp the gym_shoe_1.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a kitchen and living room area. The agent is a robotic arm. I need to determine if the gym_shoe_1 is within the robotic arm's reach. The gym_shoe_1 is located on the floor, relatively close to the robotic arm. Based on the image, it appears the robotic arm could extend and grasp the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "holding sock_1": ["no", 5.669046842745641e-14, 1.4333594871456835e-14, "The image shows a robotic arm (the agent) and a sock labeled \"sock_1\" on the floor. The agent's gripper is open and does not appear to be grasping the sock. Therefore, the agent is not holding the sock.", true, "Question: Is the agent holding the sock_1\n<explanation>\nThe image shows a robotic arm (the agent) and a sock labeled \"sock_1\" on the floor. The agent's gripper is open and does not appear to be grasping the sock. Therefore, the agent is not holding the sock.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding sock_2": [true, false, false], "all_correct": true}, "effects_results": {"holding gym_shoe_1": ["yes", 9.879439931068101e-13, 1.33703689938168e-13, "The image shows a robotic arm holding a gym shoe labeled as \"gym_shoe_1\". Therefore, the agent is holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm holding a gym shoe labeled as \"gym_shoe_1\". Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "ontop gym_shoe_1,sock_1": ["yes", 6.405215035665615e-14, 1.355984009972222e-13, "The image shows a gym shoe (gym_shoe_1) and a sock (sock_1). The gym shoe is resting on a table, and the sock is underneath the gym shoe. Therefore, the gym shoe is on top of the sock.", false, "Question: Is the gym_shoe_1 on top of the sock_1\n<explanation>\nThe image shows a gym shoe (gym_shoe_1) and a sock (sock_1). The gym shoe is resting on a table, and the sock is underneath the gym shoe. Therefore, the gym shoe is on top of the sock.\n</explanation>\n<answer>\nYes\n</answer>", false], "ontop gym_shoe_1,table_1": ["yes", 7.628852410901388e-12, 2.6104498337259363e-13, "The image shows a gym shoe labeled \"gym_shoe_1\" and a table labeled \"table_1\". The gym shoe is clearly resting on the surface of the table. Therefore, the gym shoe is on top of the table.", false, "Question: Is the gym_shoe_1 on top of the table_1\n<explanation>\nThe image shows a gym shoe labeled \"gym_shoe_1\" and a table labeled \"table_1\". The gym shoe is clearly resting on the surface of the table. Therefore, the gym shoe is on top of the table.\n</explanation>\n<answer>\nYes\n</answer>", false], "ontop gym_shoe_1,table_2": ["no", 1.0591172578712504e-13, 1.1386583950029339e-12, "The image shows a gym shoe labeled \"gym_shoe_1\" and a table labeled \"table_1\". There is no table labeled \"table_2\" in the image. The gym_shoe_1 is on top of table_1. Therefore, the answer is \"No\".", true, "Question: Is the gym_shoe_1 on top of the table_2\n<explanation>\nThe image shows a gym shoe labeled \"gym_shoe_1\" and a table labeled \"table_1\". There is no table labeled \"table_2\" in the image. The gym_shoe_1 is on top of table_1. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto gym_shoe_1,sock_1": ["yes", 3.030462301456885e-14, 3.8911907550287506e-14, "The image shows a gym shoe labeled \"gym_shoe_1\" and a sock labeled \"sock_1\". The gym shoe and the sock are very close to each other on the table. Therefore, the gym shoe is next to the sock.", false, "Question: Is the gym_shoe_1 next to the sock_1\n<explanation>\nThe image shows a gym shoe labeled \"gym_shoe_1\" and a sock labeled \"sock_1\". The gym shoe and the sock are very close to each other on the table. Therefore, the gym shoe is next to the sock.\n</explanation>\n<answer>\nYes\n</answer>", false], "nextto gym_shoe_1,table_1": ["yes", 2.3011234302587613e-13, 2.140378227032027e-14, "The image shows a gym shoe (gym_shoe_1) and a table (table_1). The gym shoe is placed on top of the table. Therefore, the gym shoe is next to the table.", false, "Question: Is the gym_shoe_1 next to the table_1\n<explanation>\nThe image shows a gym shoe (gym_shoe_1) and a table (table_1). The gym shoe is placed on top of the table. Therefore, the gym shoe is next to the table.\n</explanation>\n<answer>\nYes\n</answer>", false], "nextto gym_shoe_1,table_2": ["no", 1.8398590688624948e-14, 9.343575040196214e-14, "The image shows a gym shoe labeled \"gym_shoe_1\" and a table labeled \"table_1\". There is no table labeled \"table_2\" in the image. Therefore, it is impossible for the gym_shoe_1 to be next to the table_2.", true, "Question: Is the gym_shoe_1 next to the table_2\n<explanation>\nThe image shows a gym shoe labeled \"gym_shoe_1\" and a table labeled \"table_1\". There is no table labeled \"table_2\" in the image. Therefore, it is impossible for the gym_shoe_1 to be next to the table_2.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"ontop gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "ontop gym_shoe_1,sock_2": {"before": false, "after": false}, "ontop gym_shoe_1,cabinet_1": {"before": false, "after": false}, "nextto gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "nextto gym_shoe_1,sock_2": {"before": false, "after": false}, "nextto gym_shoe_1,cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(sock_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable sock_2": [true, false, false], "all_correct": true}, "effects_results": {"reachable sock_2": ["yes", 5.374558220347381e-13, 2.675834678616748e-14, "The image shows a robotic arm holding a shoe. There is a sock on the floor. The robotic arm is very close to the sock. Therefore, the sock is in reach of the agent.", true, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a shoe. There is a sock on the floor. The robotic arm is very close to the sock. Therefore, the sock is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable gym_shoe_1": ["yes", 8.861135566626266e-13, 6.418985080882539e-14, "The image shows a robotic arm holding a gym shoe. The question asks if the gym_shoe_1 is in reach of the agent. Since the agent is holding the gym shoe, it is clearly within reach.", false, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a gym shoe. The question asks if the gym_shoe_1 is in reach of the agent. Since the agent is holding the gym shoe, it is clearly within reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable cabinet_1": ["yes", 1.0359929873606649e-13, 2.619400600286162e-14, "The image shows a robotic arm holding a shoe. The arm is positioned near a wall with a cabinet. To determine if the cabinet is in reach, I need to assess the distance between the arm and the cabinet. Visually, the cabinet appears to be relatively close to the arm, and it seems plausible that the arm could extend to reach it. Therefore, the cabinet is likely within the agent's reach.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a shoe. The arm is positioned near a wall with a cabinet. To determine if the cabinet is in reach, I need to assess the distance between the arm and the cabinet. Visually, the cabinet appears to be relatively close to the arm, and it seems plausible that the arm could extend to reach it. Therefore, the cabinet is likely within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable sock_1": {"before": true, "after": false}, "reachable table_1": {"before": true, "after": false}, "reachable table_2": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(gym_shoe_1, sock_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 1.0548221909649491e-13, 5.9508998511532355e-15, "The image shows a robotic arm holding a shoe. The shoe appears to be a gym shoe. The question asks if the agent is holding the gym_shoe_1. Since the image shows the agent holding a gym shoe, and there is no other gym shoe visible, it is reasonable to assume that the agent is holding gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm holding a shoe. The shoe appears to be a gym shoe. The question asks if the agent is holding the gym_shoe_1. Since the image shows the agent holding a gym shoe, and there is no other gym shoe visible, it is reasonable to assume that the agent is holding gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable sock_2": ["yes", 4.743033765221283e-13, 2.3614175732552568e-14, "The image shows a robotic arm holding a shoe. There is a sock on the floor. The robotic arm is very close to the sock. Therefore, the sock is in reach of the agent.", true, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a shoe. There is a sock on the floor. The robotic arm is very close to the sock. Therefore, the sock is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"nextto gym_shoe_1,sock_2": ["no", 5.406508641930992e-14, 1.9889433050296508e-14, "I need to determine if the gym_shoe_1 and sock_2 are next to each other in the image. I can see a gym shoe and a sock on the floor. They appear to be relatively close to each other, but not directly adjacent. They are separated by a small distance. Therefore, they are not next to each other.", false, "Question: Is the gym_shoe_1 next to the sock_2\n<explanation>\nI need to determine if the gym_shoe_1 and sock_2 are next to each other in the image. I can see a gym shoe and a sock on the floor. They appear to be relatively close to each other, but not directly adjacent. They are separated by a small distance. Therefore, they are not next to each other.\n</explanation>\n<answer>\nNo\n</answer>", false], "holding gym_shoe_1": ["no", 1.9229402954939329e-13, 8.016008104690109e-14, "The image shows a robotic arm, which is the agent. The agent appears to be holding a dark-colored object. The question asks if the agent is holding the gym_shoe_1. Looking at the image, the object the agent is holding appears to be a shoe, and there is a gym_shoe_1 on the floor. However, it is not possible to determine if the shoe the agent is holding is gym_shoe_1 based on the image alone. Therefore, the answer is \"No\".", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm, which is the agent. The agent appears to be holding a dark-colored object. The question asks if the agent is holding the gym_shoe_1. Looking at the image, the object the agent is holding appears to be a shoe, and there is a gym_shoe_1 on the floor. However, it is not possible to determine if the shoe the agent is holding is gym_shoe_1 based on the image alone. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {}}, "action_info": "success"}, {"action": "grasp(gym_shoe_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable gym_shoe_1": ["yes", 7.258634882392756e-13, 3.6138620037023256e-14, "The image shows a robotic arm (the agent) and a gym shoe (gym_shoe_1) on the floor. To determine if the gym shoe is in reach, I need to assess the distance between the agent's end effector and the gym shoe. Visually, the gym shoe appears to be relatively close to the agent. Given the robotic arm's likely range of motion, it seems plausible that the agent could reach the gym shoe.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a gym shoe (gym_shoe_1) on the floor. To determine if the gym shoe is in reach, I need to assess the distance between the agent's end effector and the gym shoe. Visually, the gym shoe appears to be relatively close to the agent. Given the robotic arm's likely range of motion, it seems plausible that the agent could reach the gym shoe.\n</explanation>\n<answer>\nYes\n</answer>", true], "holding sock_2": ["no", 4.3906440711904277e-14, 1.8302926787562047e-14, "The image shows a robotic arm, which is the agent. The agent appears to be holding an object. I need to determine if the object being held is sock_2. Looking at the image, the agent is holding a dark-colored object. There are also some objects on the floor, one of which appears to be a sock. However, it is not possible to determine from the image if the object the agent is holding is sock_2.", true, "Question: Is the agent holding the sock_2\n<explanation>\nThe image shows a robotic arm, which is the agent. The agent appears to be holding an object. I need to determine if the object being held is sock_2. Looking at the image, the agent is holding a dark-colored object. There are also some objects on the floor, one of which appears to be a sock. However, it is not possible to determine from the image if the object the agent is holding is sock_2.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding sock_1": [true, false, false], "all_correct": true}, "effects_results": {"holding gym_shoe_1": ["yes", 1.5211134218526268e-13, 2.332703156343336e-14, "The image shows a robotic arm holding a gym shoe. The gym shoe appears to be gym_shoe_1 based on the visual characteristics. Therefore, the agent is holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm holding a gym shoe. The gym shoe appears to be gym_shoe_1 based on the visual characteristics. Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "ontop gym_shoe_1,sock_2": ["no", 6.283615663384146e-14, 1.3302415267403556e-13, "I will first locate the gym_shoe_1 and the sock_2 in the image. The gym_shoe_1 is the shoe that is floating in the air. The sock_2 is the small object on the floor. The gym_shoe_1 is not on top of the sock_2. Therefore, the answer is \"No\".", true, "Question: Is the gym_shoe_1 on top of the sock_2\n<explanation>\nI will first locate the gym_shoe_1 and the sock_2 in the image. The gym_shoe_1 is the shoe that is floating in the air. The sock_2 is the small object on the floor. The gym_shoe_1 is not on top of the sock_2. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "ontop gym_shoe_1,table_2": ["no", 6.388348915619887e-14, 1.7365332804532285e-13, "I need to determine if the object named \"gym_shoe_1\" is located on top of the object named \"table_2\". Looking at the image, I can see a shoe being held by a robotic arm. I can also see a table in the background. However, the shoe is not on the table; it is being held in the air by the robotic arm. Therefore, the answer is \"No\".", true, "Question: Is the gym_shoe_1 on top of the table_2\n<explanation>\nI need to determine if the object named \"gym_shoe_1\" is located on top of the object named \"table_2\". Looking at the image, I can see a shoe being held by a robotic arm. I can also see a table in the background. However, the shoe is not on the table; it is being held in the air by the robotic arm. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "ontop gym_shoe_1,cabinet_1": ["no", 9.254809375455753e-14, 6.838430646402549e-13, "I need to determine if the gym_shoe_1 is on top of the cabinet_1. Looking at the image, I can see a gym shoe being held by the robotic arm. I can also see a cabinet in the background. However, the gym shoe is not on top of the cabinet. It is being held in the air. Therefore, the answer is \"No\".", true, "Question: Is the gym_shoe_1 on top of the cabinet_1\n<explanation>\nI need to determine if the gym_shoe_1 is on top of the cabinet_1. Looking at the image, I can see a gym shoe being held by the robotic arm. I can also see a cabinet in the background. However, the gym shoe is not on top of the cabinet. It is being held in the air. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto gym_shoe_1,sock_2": ["no", 7.629795809092985e-15, 9.796850830579018e-15, "I will first locate the gym_shoe_1 and the sock_2 in the image. The gym_shoe_1 is the shoe that is being held by the robotic arm. The sock_2 is the small object on the floor. I will then check if they are next to each other. The gym_shoe_1 is being held high up in the air by the robotic arm, while the sock_2 is on the floor. They are not next to each other.", true, "Question: Is the gym_shoe_1 next to the sock_2\n<explanation>\nI will first locate the gym_shoe_1 and the sock_2 in the image. The gym_shoe_1 is the shoe that is being held by the robotic arm. The sock_2 is the small object on the floor. I will then check if they are next to each other. The gym_shoe_1 is being held high up in the air by the robotic arm, while the sock_2 is on the floor. They are not next to each other.\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto gym_shoe_1,table_2": ["no", 2.4914497938013534e-15, 2.8231828360552116e-15, "I need to determine if the gym_shoe_1 is next to the table_2. From the image, I can see a gym shoe being held by the robotic arm. I can also see a table in the background. The gym shoe is not close to the table. Therefore, the gym shoe is not next to the table.", true, "Question: Is the gym_shoe_1 next to the table_2\n<explanation>\nI need to determine if the gym_shoe_1 is next to the table_2. From the image, I can see a gym shoe being held by the robotic arm. I can also see a table in the background. The gym shoe is not close to the table. Therefore, the gym shoe is not next to the table.\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto gym_shoe_1,cabinet_1": ["no", 1.4275468082484456e-14, 1.1117745348746422e-14, "The image shows a gym shoe being held by a robotic arm. There is a cabinet visible in the background. The gym shoe is not next to the cabinet. It is being held in the air, away from the cabinet.", true, "Question: Is the gym_shoe_1 next to the cabinet_1\n<explanation>\nThe image shows a gym shoe being held by a robotic arm. There is a cabinet visible in the background. The gym shoe is not next to the cabinet. It is being held in the air, away from the cabinet.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"ontop gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "ontop gym_shoe_1,sock_1": {"before": false, "after": false}, "ontop gym_shoe_1,table_1": {"before": false, "after": false}, "nextto gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "nextto gym_shoe_1,sock_1": {"before": false, "after": false}, "nextto gym_shoe_1,table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(table_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable table_2": ["no", 3.4384506282817903e-14, 1.4333594871456835e-14, "The image shows a robotic arm holding a shoe. The environment appears to be a room with furniture, including a table in the background. The question asks if \"table_2\" is within the reach of the agent (the robotic arm). Based on the image, the table is quite far away from the robotic arm. It is unlikely that the robotic arm can reach the table without significant movement or extension. Therefore, the table is not in reach of the agent.", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a shoe. The environment appears to be a room with furniture, including a table in the background. The question asks if \"table_2\" is within the reach of the agent (the robotic arm). Based on the image, the table is quite far away from the robotic arm. It is unlikely that the robotic arm can reach the table without significant movement or extension. Therefore, the table is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"reachable table_2": ["yes", 2.538765096586626e-13, 3.435845154936036e-14, "The image shows a robotic arm holding a shoe. There is a table with some objects on it. The question asks if the table is in reach of the agent. The robotic arm is directly above the table, and appears to be close enough to interact with the objects on the table. Therefore, the table is in reach of the agent.", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a shoe. There is a table with some objects on it. The question asks if the table is in reach of the agent. The robotic arm is directly above the table, and appears to be close enough to interact with the objects on the table. Therefore, the table is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable gym_shoe_1": ["yes", 1.206680155102502e-12, 8.741162497603525e-14, "The image shows a robotic arm holding a gym shoe (gym_shoe_1). The robotic arm is the agent. Since the agent is holding the gym shoe, it is clearly within reach of the agent.", false, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a gym shoe (gym_shoe_1). The robotic arm is the agent. Since the agent is holding the gym shoe, it is clearly within reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable sock_1": ["yes", 9.111420385538027e-13, 7.479109155996214e-14, "The image shows a robotic arm holding a sock. The question asks if the sock is in reach of the agent. Since the agent *is* holding the sock, it is clearly within reach.", false, "<explanation>\nThe image shows a robotic arm holding a sock. The question asks if the sock is in reach of the agent. Since the agent *is* holding the sock, it is clearly within reach.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable cabinet_1": ["no", 1.345458168705918e-13, 6.029925365448607e-13, "The image shows a table with dishes on it, a plant, and a shoe being held by a robotic arm. There is a door visible in the background. I do not see any cabinets in the image. Therefore, cabinet_1 is not in reach of the agent because it is not present in the scene.", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a table with dishes on it, a plant, and a shoe being held by a robotic arm. There is a door visible in the background. I do not see any cabinets in the image. Therefore, cabinet_1 is not in reach of the agent because it is not present in the scene.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable sock_2": {"before": true, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-on(gym_shoe_1, table_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 1.2765354094959602e-12, 1.0478441302575608e-13, "The image shows a robotic arm holding a shoe. The shoe appears to be a gym shoe. The question asks if the agent is holding the gym_shoe_1. Since the image shows the agent holding a gym shoe, and there is no other information to suggest it is not gym_shoe_1, I will assume it is.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm holding a shoe. The shoe appears to be a gym shoe. The question asks if the agent is holding the gym_shoe_1. Since the image shows the agent holding a gym shoe, and there is no other information to suggest it is not gym_shoe_1, I will assume it is.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_2": ["yes", 2.876798192025243e-13, 4.4117124910940733e-14, "The image shows a robotic arm holding a shoe. There is a table in front of the arm with some plates on it. The question asks if the table is in reach of the agent. Since the robotic arm is directly above the table and holding an object, it is reasonable to assume that the table is within the reach of the agent.", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a shoe. There is a table in front of the arm with some plates on it. The question asks if the table is in reach of the agent. Since the robotic arm is directly above the table and holding an object, it is reasonable to assume that the table is within the reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"ontop gym_shoe_1,table_2": ["yes", 1.1739335903111076e-13, 6.622879887330279e-15, "The image shows a table with a white cloth on it. There is a gym shoe on the table. The table appears to be table_2. Therefore, the gym_shoe_1 is on top of the table_2.", true, "Question: Is the gym_shoe_1 on top of the table_2\n<explanation>\nThe image shows a table with a white cloth on it. There is a gym shoe on the table. The table appears to be table_2. Therefore, the gym_shoe_1 is on top of the table_2.\n</explanation>\n<answer>\nYes\n</answer>", true], "holding gym_shoe_1": ["yes", 2.0828048893873838e-14, 1.9373102517957494e-15, "The image shows a robotic arm (the agent) positioned over a table. On the table, there is a gym shoe. The robotic arm appears to be grasping the gym shoe. Therefore, the agent is holding the gym_shoe_1.", false, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent) positioned over a table. On the table, there is a gym shoe. The robotic arm appears to be grasping the gym shoe. Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {}}, "action_info": "success"}, {"action": "place-next-to(gym_shoe_1, table_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 2.674374563222271e-14, 2.1952603715966537e-15, "The image shows a robotic arm (the agent) positioned above a table. On the table, there is a gym shoe (gym_shoe_1) and the robotic arm is directly above it, and appears to be grasping it. Therefore, the agent is holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a table. On the table, there is a gym shoe (gym_shoe_1) and the robotic arm is directly above it, and appears to be grasping it. Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_2": ["yes", 7.283695266932858e-14, 7.676958603596105e-15, "The image shows a robotic arm (the agent) positioned above a table. The table appears to have a white tablecloth and some objects on it. The question asks if \"table_2\" is within reach of the agent. Since the agent is directly above the table, it is reasonable to assume that the table is within the agent's reach.", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a table. The table appears to have a white tablecloth and some objects on it. The question asks if \"table_2\" is within reach of the agent. Since the agent is directly above the table, it is reasonable to assume that the table is within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(gym_shoe_1, table_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 2.674374563222271e-14, 2.1952603715966537e-15, "The image shows a robotic arm (the agent) positioned above a table. On the table, there is a gym shoe (gym_shoe_1) and the robotic arm is directly above it, and appears to be grasping it. Therefore, the agent is holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a table. On the table, there is a gym shoe (gym_shoe_1) and the robotic arm is directly above it, and appears to be grasping it. Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_2": ["yes", 7.283695266932858e-14, 7.676958603596105e-15, "The image shows a robotic arm (the agent) positioned above a table. The table appears to have a white tablecloth and some objects on it. The question asks if \"table_2\" is within reach of the agent. Since the agent is directly above the table, it is reasonable to assume that the table is within the agent's reach.", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a table. The table appears to have a white tablecloth and some objects on it. The question asks if \"table_2\" is within reach of the agent. Since the agent is directly above the table, it is reasonable to assume that the table is within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable notebook_1": ["yes", "yes"], "reachable sock_1": ["yes", "no"], "reachable table_1": ["yes", "no"], "reachable table_2": ["no", "yes"], "reachable sofa_1": ["no", "no"], "holding gym_shoe_1": ["no", "no"], "holding notebook_1": ["no", "no"], "holding sock_1": ["no", "no"], "ontop gym_shoe_1,notebook_1": ["no", "no"], "ontop gym_shoe_1,sock_1": ["no", "no"], "ontop gym_shoe_1,table_1": ["no", "no"], "ontop gym_shoe_1,table_2": ["no", "no"], "ontop gym_shoe_1,sofa_1": ["no", "no"], "ontop notebook_1,gym_shoe_1": ["no", "no"], "ontop notebook_1,sock_1": ["no", "no"], "ontop notebook_1,table_1": ["yes", "no"], "ontop notebook_1,table_2": ["no", "no"], "ontop notebook_1,sofa_1": ["no", "no"], "ontop sock_1,gym_shoe_1": ["no", "no"], "ontop sock_1,notebook_1": ["no", "no"], "ontop sock_1,table_1": ["no", "no"], "ontop sock_1,table_2": ["no", "no"], "ontop sock_1,sofa_1": ["no", "yes"], "nextto gym_shoe_1,notebook_1": ["no", "no"], "nextto gym_shoe_1,sock_1": ["yes", "no"], "nextto gym_shoe_1,table_1": ["yes", "no"], "nextto gym_shoe_1,table_2": ["no", "yes"], "nextto gym_shoe_1,sofa_1": ["no", "no"], "nextto notebook_1,gym_shoe_1": ["yes", "no"], "nextto notebook_1,sock_1": ["no", "no"], "nextto notebook_1,table_1": ["yes", "no"], "nextto notebook_1,table_2": ["no", "yes"], "nextto notebook_1,sofa_1": ["no", "no"], "nextto sock_1,gym_shoe_1": ["yes", "no"], "nextto sock_1,notebook_1": ["no", "no"], "nextto sock_1,table_1": ["yes", "no"], "nextto sock_1,table_2": ["no", "no"], "nextto sock_1,sofa_1": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.6410256410256411, "yes_accuracy": 0.2857142857142857, "yes_correct": 2, "yes_total": 7, "no_accuracy": 0.71875, "no_correct": 23, "no_total": 32, "predicates": {"reachable": {"accuracy": 0.5, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": 0.3333333333333333, "no_correct": 1, "no_total": 3}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 3, "no_total": 3}, "ontop": {"accuracy": 0.8666666666666667, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.9285714285714286, "no_correct": 13, "no_total": 14}, "nextto": {"accuracy": 0.4, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 3, "no_accuracy": 0.5, "no_correct": 6, "no_total": 12}}}, "step": 1, "actions": ["grasp(gym_shoe_1)", "navigate-to(sock_2)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable notebook_1": ["yes", "yes"], "reachable sock_1": ["yes", "no"], "reachable table_1": ["yes", "no"], "reachable table_2": ["no", "yes"], "reachable sofa_1": ["no", "no"], "holding gym_shoe_1": ["yes", "yes"], "holding notebook_1": ["no", "no"], "holding sock_1": ["no", "no"], "ontop gym_shoe_1,notebook_1": ["no", "no"], "ontop gym_shoe_1,sock_1": ["yes", "no"], "ontop gym_shoe_1,table_1": ["yes", "no"], "ontop gym_shoe_1,table_2": ["no", "no"], "ontop gym_shoe_1,sofa_1": ["no", "no"], "ontop notebook_1,gym_shoe_1": ["yes", "no"], "ontop notebook_1,sock_1": ["no", "no"], "ontop notebook_1,table_1": ["no", "no"], "ontop notebook_1,table_2": ["no", "no"], "ontop notebook_1,sofa_1": ["no", "no"], "ontop sock_1,gym_shoe_1": ["yes", "no"], "ontop sock_1,notebook_1": ["no", "no"], "ontop sock_1,table_1": ["yes", "no"], "ontop sock_1,table_2": ["no", "no"], "ontop sock_1,sofa_1": ["no", "yes"], "nextto gym_shoe_1,notebook_1": ["no", "no"], "nextto gym_shoe_1,sock_1": ["yes", "no"], "nextto gym_shoe_1,table_1": ["yes", "no"], "nextto gym_shoe_1,table_2": ["no", "no"], "nextto gym_shoe_1,sofa_1": ["no", "no"], "nextto notebook_1,gym_shoe_1": ["yes", "no"], "nextto notebook_1,sock_1": ["yes", "no"], "nextto notebook_1,table_1": ["no", "no"], "nextto notebook_1,table_2": ["no", "yes"], "nextto notebook_1,sofa_1": ["no", "no"], "nextto sock_1,gym_shoe_1": ["yes", "no"], "nextto sock_1,notebook_1": ["yes", "no"], "nextto sock_1,table_1": ["yes", "no"], "nextto sock_1,table_2": ["no", "no"], "nextto sock_1,sofa_1": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.5384615384615384, "yes_accuracy": 0.42857142857142855, "yes_correct": 3, "yes_total": 7, "no_accuracy": 0.5625, "no_correct": 18, "no_total": 32, "predicates": {"reachable": {"accuracy": 0.5, "yes_accuracy": 0.6666666666666666, "yes_correct": 2, "yes_total": 3, "no_accuracy": 0.3333333333333333, "no_correct": 1, "no_total": 3}, "holding": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.6, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.6428571428571429, "no_correct": 9, "no_total": 14}, "nextto": {"accuracy": 0.4, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 2, "no_accuracy": 0.46153846153846156, "no_correct": 6, "no_total": 13}}}, "step": 2, "actions": ["navigate-to(sock_2)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "no"], "holding gym_shoe_1": ["yes", "yes"], "holding sock_2": ["no", "no"], "open cabinet_1": ["no", "no"], "ontop gym_shoe_1,sock_2": ["no", "no"], "ontop gym_shoe_1,cabinet_1": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "ontop sock_2,cabinet_1": ["no", "no"], "inside gym_shoe_1,cabinet_1": ["no", "no"], "inside sock_2,cabinet_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["yes", "no"], "nextto gym_shoe_1,cabinet_1": ["no", "no"], "nextto sock_2,gym_shoe_1": ["yes", "no"], "nextto sock_2,cabinet_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8125, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 0.7692307692307693, "no_correct": 10, "no_total": 13, "predicates": {"reachable": {"accuracy": 0.6666666666666666, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.0, "no_correct": 0, "no_total": 1}, "holding": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 4, "no_total": 4}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "nextto": {"accuracy": 0.5, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.5, "no_correct": 2, "no_total": 4}}}, "step": 3, "actions": ["place-next-to(gym_shoe_1, sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_2": ["yes", "yes"], "reachable table_2": ["no", "no"], "reachable cabinet_1": ["no", "no"], "holding gym_shoe_1": ["no", "no"], "holding sock_2": ["no", "no"], "open cabinet_1": ["no", "no"], "ontop gym_shoe_1,sock_2": ["no", "no"], "ontop gym_shoe_1,table_2": ["no", "no"], "ontop gym_shoe_1,cabinet_1": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "ontop sock_2,table_2": ["no", "no"], "ontop sock_2,cabinet_1": ["no", "no"], "inside gym_shoe_1,cabinet_1": ["no", "no"], "inside sock_2,cabinet_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["no", "yes"], "nextto gym_shoe_1,table_2": ["no", "no"], "nextto gym_shoe_1,cabinet_1": ["no", "no"], "nextto sock_2,gym_shoe_1": ["no", "yes"], "nextto sock_2,table_2": ["no", "no"], "nextto sock_2,cabinet_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.9047619047619048, "yes_accuracy": 0.5, "yes_correct": 2, "yes_total": 4, "no_accuracy": 1.0, "no_correct": 17, "no_total": 17, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 6, "no_total": 6}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "nextto": {"accuracy": 0.6666666666666666, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 2, "no_accuracy": 1.0, "no_correct": 4, "no_total": 4}}}, "step": 4, "actions": ["grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_1": ["yes", "no"], "reachable table_2": ["yes", "yes"], "reachable cabinet_1": ["no", "no"], "reachable sofa_1": ["no", "no"], "holding gym_shoe_1": ["yes", "yes"], "holding sock_1": ["no", "no"], "open cabinet_1": ["no", "no"], "ontop gym_shoe_1,sock_1": ["no", "no"], "ontop gym_shoe_1,table_2": ["no", "no"], "ontop gym_shoe_1,cabinet_1": ["no", "no"], "ontop gym_shoe_1,sofa_1": ["no", "no"], "ontop sock_1,gym_shoe_1": ["no", "no"], "ontop sock_1,table_2": ["no", "no"], "ontop sock_1,cabinet_1": ["no", "no"], "ontop sock_1,sofa_1": ["no", "yes"], "inside gym_shoe_1,cabinet_1": ["no", "no"], "inside sock_1,cabinet_1": ["no", "no"], "nextto gym_shoe_1,sock_1": ["no", "no"], "nextto gym_shoe_1,table_2": ["no", "no"], "nextto gym_shoe_1,cabinet_1": ["no", "no"], "nextto gym_shoe_1,sofa_1": ["no", "no"], "nextto sock_1,gym_shoe_1": ["no", "no"], "nextto sock_1,table_2": ["no", "no"], "nextto sock_1,cabinet_1": ["no", "no"], "nextto sock_1,sofa_1": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.8846153846153846, "yes_accuracy": 0.6, "yes_correct": 3, "yes_total": 5, "no_accuracy": 0.9523809523809523, "no_correct": 20, "no_total": 21, "predicates": {"reachable": {"accuracy": 0.8, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.6666666666666666, "no_correct": 2, "no_total": 3}, "holding": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.875, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "nextto": {"accuracy": 0.875, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}}}, "step": 6, "actions": ["place-on(gym_shoe_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable notebook_1": ["yes", "yes"], "reachable sock_1": ["yes", "no"], "reachable table_2": ["yes", "yes"], "reachable cabinet_1": ["no", "no"], "reachable sofa_1": ["no", "no"], "holding gym_shoe_1": ["yes", "no"], "holding notebook_1": ["yes", "no"], "holding sock_1": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop gym_shoe_1,notebook_1": ["no", "no"], "ontop gym_shoe_1,sock_1": ["yes", "no"], "ontop gym_shoe_1,table_2": ["yes", "yes"], "ontop gym_shoe_1,cabinet_1": ["no", "no"], "ontop gym_shoe_1,sofa_1": ["no", "no"], "ontop notebook_1,gym_shoe_1": ["yes", "no"], "ontop notebook_1,sock_1": ["yes", "no"], "ontop notebook_1,table_2": ["yes", "no"], "ontop notebook_1,cabinet_1": ["no", "no"], "ontop notebook_1,sofa_1": ["no", "no"], "ontop sock_1,gym_shoe_1": ["yes", "no"], "ontop sock_1,notebook_1": ["yes", "no"], "ontop sock_1,table_2": ["yes", "no"], "ontop sock_1,cabinet_1": ["no", "no"], "ontop sock_1,sofa_1": ["no", "yes"], "inside gym_shoe_1,cabinet_1": ["no", "no"], "inside notebook_1,cabinet_1": ["no", "no"], "inside sock_1,cabinet_1": ["no", "no"], "nextto gym_shoe_1,notebook_1": ["yes", "no"], "nextto gym_shoe_1,sock_1": ["yes", "no"], "nextto gym_shoe_1,table_2": ["yes", "no"], "nextto gym_shoe_1,cabinet_1": ["no", "no"], "nextto gym_shoe_1,sofa_1": ["no", "no"], "nextto notebook_1,gym_shoe_1": ["yes", "no"], "nextto notebook_1,sock_1": ["yes", "no"], "nextto notebook_1,table_2": ["no", "yes"], "nextto notebook_1,cabinet_1": ["no", "no"], "nextto notebook_1,sofa_1": ["no", "no"], "nextto sock_1,gym_shoe_1": ["yes", "no"], "nextto sock_1,notebook_1": ["yes", "no"], "nextto sock_1,table_2": ["no", "no"], "nextto sock_1,cabinet_1": ["no", "no"], "nextto sock_1,sofa_1": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.5116279069767442, "yes_accuracy": 0.5714285714285714, "yes_correct": 4, "yes_total": 7, "no_accuracy": 0.5, "no_correct": 18, "no_total": 36, "predicates": {"reachable": {"accuracy": 0.8333333333333334, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 0.6666666666666666, "no_correct": 2, "no_total": 3}, "holding": {"accuracy": 0.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.0, "no_correct": 0, "no_total": 3}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.4666666666666667, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.46153846153846156, "no_correct": 6, "no_total": 13}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 3, "no_total": 3}, "nextto": {"accuracy": 0.4, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 2, "no_accuracy": 0.46153846153846156, "no_correct": 6, "no_total": 13}}}, "step": 7, "actions": ["place-next-to(gym_shoe_1, table_2)", "place-next-to(sock_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable notebook_1": ["yes", "yes"], "reachable sock_1": ["yes", "no"], "reachable table_2": ["yes", "yes"], "reachable cabinet_1": ["no", "no"], "reachable sofa_1": ["no", "no"], "holding gym_shoe_1": ["yes", "no"], "holding notebook_1": ["yes", "no"], "holding sock_1": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop gym_shoe_1,notebook_1": ["no", "no"], "ontop gym_shoe_1,sock_1": ["yes", "no"], "ontop gym_shoe_1,table_2": ["yes", "yes"], "ontop gym_shoe_1,cabinet_1": ["no", "no"], "ontop gym_shoe_1,sofa_1": ["no", "no"], "ontop notebook_1,gym_shoe_1": ["yes", "no"], "ontop notebook_1,sock_1": ["yes", "no"], "ontop notebook_1,table_2": ["yes", "no"], "ontop notebook_1,cabinet_1": ["no", "no"], "ontop notebook_1,sofa_1": ["no", "no"], "ontop sock_1,gym_shoe_1": ["yes", "no"], "ontop sock_1,notebook_1": ["yes", "no"], "ontop sock_1,table_2": ["yes", "no"], "ontop sock_1,cabinet_1": ["no", "no"], "ontop sock_1,sofa_1": ["no", "yes"], "inside gym_shoe_1,cabinet_1": ["no", "no"], "inside notebook_1,cabinet_1": ["no", "no"], "inside sock_1,cabinet_1": ["no", "no"], "nextto gym_shoe_1,notebook_1": ["yes", "no"], "nextto gym_shoe_1,sock_1": ["yes", "no"], "nextto gym_shoe_1,table_2": ["yes", "no"], "nextto gym_shoe_1,cabinet_1": ["no", "no"], "nextto gym_shoe_1,sofa_1": ["no", "no"], "nextto notebook_1,gym_shoe_1": ["yes", "no"], "nextto notebook_1,sock_1": ["yes", "no"], "nextto notebook_1,table_2": ["no", "yes"], "nextto notebook_1,cabinet_1": ["no", "no"], "nextto notebook_1,sofa_1": ["no", "no"], "nextto sock_1,gym_shoe_1": ["yes", "no"], "nextto sock_1,notebook_1": ["yes", "no"], "nextto sock_1,table_2": ["no", "no"], "nextto sock_1,cabinet_1": ["no", "no"], "nextto sock_1,sofa_1": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.5116279069767442, "yes_accuracy": 0.5714285714285714, "yes_correct": 4, "yes_total": 7, "no_accuracy": 0.5, "no_correct": 18, "no_total": 36, "predicates": {"reachable": {"accuracy": 0.8333333333333334, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 0.6666666666666666, "no_correct": 2, "no_total": 3}, "holding": {"accuracy": 0.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.0, "no_correct": 0, "no_total": 3}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.4666666666666667, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.46153846153846156, "no_correct": 6, "no_total": 13}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 3, "no_total": 3}, "nextto": {"accuracy": 0.4, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 2, "no_accuracy": 0.46153846153846156, "no_correct": 6, "no_total": 13}}}, "step": 8, "actions": ["place-next-to(gym_shoe_1, table_2)", "place-next-to(sock_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}], "remaining_actions": ["place-next-to(sock_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, "data/planning/igibson/medium/collect_misplaced_items_medium.pddl_Merom_1_int_22": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(gym_shoe_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable gym_shoe_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable gym_shoe_1": ["yes", 2.0744912948914007e-13, 8.043675588879223e-15, "The image shows a room with a robotic arm (the agent) and a gym shoe on the floor. To determine if the gym shoe is in reach, I need to visually assess the distance between the robotic arm and the shoe. The robotic arm is positioned above a table and chairs, and the shoe is located near the chair. It appears that the robotic arm could extend and grasp the shoe without significant difficulty. Therefore, the gym shoe is in reach of the agent.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a room with a robotic arm (the agent) and a gym shoe on the floor. To determine if the gym shoe is in reach, I need to visually assess the distance between the robotic arm and the shoe. The robotic arm is positioned above a table and chairs, and the shoe is located near the chair. It appears that the robotic arm could extend and grasp the shoe without significant difficulty. Therefore, the gym shoe is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_2": ["yes", 4.416201088088163e-14, 5.976678028353499e-15, "The image shows a robotic arm (the agent) and a table (table_2). The agent is positioned such that it can potentially reach the table. The table is close enough to the agent that it appears within the agent's workspace. Therefore, the table is in reach of the agent.", false, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table (table_2). The agent is positioned such that it can potentially reach the table. The table is close enough to the agent that it appears within the agent's workspace. Therefore, the table is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable sock_1": {"before": false, "after": false}, "reachable sock_2": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}, "reachable cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(gym_shoe_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable gym_shoe_1": ["yes", 2.709158581064991e-13, 9.270230965513233e-15, "The image shows a room with a robotic arm (the agent) and a gym shoe on the floor. To determine if the gym shoe is in reach, I need to visually assess the distance between the robotic arm and the shoe. The robotic arm is positioned above a table and chairs, and the shoe is located near the chair. It appears that the robotic arm could extend and grasp the shoe without significant difficulty. Therefore, the gym shoe is within the reach of the agent.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a room with a robotic arm (the agent) and a gym shoe on the floor. To determine if the gym shoe is in reach, I need to visually assess the distance between the robotic arm and the shoe. The robotic arm is positioned above a table and chairs, and the shoe is located near the chair. It appears that the robotic arm could extend and grasp the shoe without significant difficulty. Therefore, the gym shoe is within the reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding sock_1": [true, false, false], "holding sock_2": [true, false, false], "all_correct": true}, "effects_results": {"holding gym_shoe_1": ["yes", 4.3407253702901216e-14, 3.1444105521807484e-15, "The image shows a robotic arm holding a gym shoe. The gym shoe appears to be gym_shoe_1 based on the visual characteristics. Therefore, the agent is holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm holding a gym shoe. The gym shoe appears to be gym_shoe_1 based on the visual characteristics. Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "ontop gym_shoe_1,table_2": ["no", 5.509316418871035e-14, 1.4975874544371354e-13, "I need to determine if the object named \"gym_shoe_1\" is located on top of the object named \"table_2\". Looking at the image, I can see a pair of shoes being held by a robotic arm. There is also a table visible in the background. However, the shoes are not on the table; they are being held by the robotic arm. Therefore, the answer is \"No\".", true, "Question: Is the gym_shoe_1 on top of the table_2\n<explanation>\nI need to determine if the object named \"gym_shoe_1\" is located on top of the object named \"table_2\". Looking at the image, I can see a pair of shoes being held by a robotic arm. There is also a table visible in the background. However, the shoes are not on the table; they are being held by the robotic arm. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto gym_shoe_1,table_2": ["no", 2.8167921842264148e-15, 2.8167921842264148e-15, "I need to determine if the gym_shoe_1 is next to the table_2. From the image, I can see a pair of shoes (gym_shoe_1) being held by a robotic arm. I can also see a table (table_2) in the background. The shoes are not directly next to the table, as they are being held by the robotic arm and are some distance away from the table. Therefore, the answer is \"No\".", true, "Question: Is the gym_shoe_1 next to the table_2\n<explanation>\nI need to determine if the gym_shoe_1 is next to the table_2. From the image, I can see a pair of shoes (gym_shoe_1) being held by a robotic arm. I can also see a table (table_2) in the background. The shoes are not directly next to the table, as they are being held by the robotic arm and are some distance away from the table. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"ontop gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "ontop gym_shoe_1,sock_1": {"before": false, "after": false}, "ontop gym_shoe_1,sock_2": {"before": false, "after": false}, "ontop gym_shoe_1,table_1": {"before": false, "after": false}, "ontop gym_shoe_1,cabinet_1": {"before": false, "after": false}, "nextto gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "nextto gym_shoe_1,sock_1": {"before": false, "after": false}, "nextto gym_shoe_1,sock_2": {"before": false, "after": false}, "nextto gym_shoe_1,table_1": {"before": false, "after": false}, "nextto gym_shoe_1,cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-on(gym_shoe_1, table_2)", "action_correct": false, "action_state_correct": true, "preconditions_results": {"holding gym_shoe_1": ["yes", 4.371663756908353e-14, 3.588479644998314e-15, "The image shows a robotic arm holding a gym shoe. The gym shoe appears to be gym_shoe_1 based on the visual characteristics. Therefore, the agent is holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm holding a gym shoe. The gym shoe appears to be gym_shoe_1 based on the visual characteristics. Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_2": ["yes", 1.6194924362059743e-14, 4.094718203287266e-15, "The image shows a robotic arm holding a shoe. There is a table visible in the image, which could be table_2. The robotic arm is very close to the table, and appears to be holding an object above it. Therefore, the table is in reach of the agent.", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding a shoe. There is a table visible in the image, which could be table_2. The robotic arm is very close to the table, and appears to be holding an object above it. Therefore, the table is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"ontop gym_shoe_1,table_2": ["no", 2.924575051533804e-14, 1.409139298302886e-12, "I need to determine if the object named \"gym_shoe_1\" is located on top of the object named \"table_2\". Looking at the image, I can see a table on the right side of the image, which I assume is \"table_2\". I do not see any shoes on top of the table. Therefore, the answer is \"No\".", false, "Question: Is the gym_shoe_1 on top of the table_2\n<explanation>\nI need to determine if the object named \"gym_shoe_1\" is located on top of the object named \"table_2\". Looking at the image, I can see a table on the right side of the image, which I assume is \"table_2\". I do not see any shoes on top of the table. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "holding gym_shoe_1": ["no", 6.126376532814004e-14, 8.913825759329988e-14, "The image shows a robotic arm, which is the agent. I need to determine if the agent is holding the gym_shoe_1. Looking at the image, the agent's gripper appears to be empty. Therefore, the agent is not holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm, which is the agent. I need to determine if the agent is holding the gym_shoe_1. Looking at the image, the agent's gripper appears to be empty. Therefore, the agent is not holding the gym_shoe_1.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {}}, "action_info": "executed but failed"}, {"action": "navigate-to(gym_shoe_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable gym_shoe_1": ["no", 1.835270488099311e-13, 4.988782282243365e-13, "The image shows a room with a robotic arm (the agent) and some furniture. I need to determine if a gym shoe (gym_shoe_1) is within the agent's reach. I do not see any gym shoes in the image. Therefore, the gym_shoe_1 is not in reach of the agent.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a room with a robotic arm (the agent) and some furniture. I need to determine if a gym shoe (gym_shoe_1) is within the agent's reach. I do not see any gym shoes in the image. Therefore, the gym_shoe_1 is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", false], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"reachable gym_shoe_1": ["yes", 3.474129350086036e-13, 1.7296671975014673e-14, "The image shows a first-person view from the agent's perspective. The agent is positioned near a table and a couch. The gym_shoe_1 is visible on the floor, and it appears to be within the agent's immediate vicinity, meaning it is within the agent's reach.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a first-person view from the agent's perspective. The agent is positioned near a table and a couch. The gym_shoe_1 is visible on the floor, and it appears to be within the agent's immediate vicinity, meaning it is within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable sock_1": ["yes", 4.460869336680301e-13, 1.959969187816102e-14, "The image shows a first-person view from the agent's perspective. The agent is a robotic arm. The image also shows a sock labeled \"sock_1\" on the floor. The red bounding box around the agent's view indicates the reachable area. The sock is within the red bounding box, meaning it is within the agent's reach.", false, "Question: Is the sock_1 in reach of the agent\n<explanation>\nThe image shows a first-person view from the agent's perspective. The agent is a robotic arm. The image also shows a sock labeled \"sock_1\" on the floor. The red bounding box around the agent's view indicates the reachable area. The sock is within the red bounding box, meaning it is within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_1": ["yes", 2.1071657602383248e-13, 2.5166507603997107e-14, "The image shows a robotic arm (the agent) and a table labeled \"table_1\". The agent's arm is extending towards the table. The table is within the agent's workspace, and appears to be close enough for the agent to interact with it. Therefore, the table is in reach of the agent.", false, "Question: Is the table_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table labeled \"table_1\". The agent's arm is extending towards the table. The table is within the agent's workspace, and appears to be close enough for the agent to interact with it. Therefore, the table is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_2": ["yes", 4.404672698625489e-13, 2.4849463171839822e-14, "The image shows a robotic arm (the agent) and a table labeled \"table_2\". The agent's view is from a first-person perspective, and the table is visible within the agent's field of view. The table is relatively close to the agent, and there are no obvious obstructions preventing the agent from reaching it. Therefore, the table is in reach of the agent.", false, "<explanation>\nThe image shows a robotic arm (the agent) and a table labeled \"table_2\". The agent's view is from a first-person perspective, and the table is visible within the agent's field of view. The table is relatively close to the agent, and there are no obvious obstructions preventing the agent from reaching it. Therefore, the table is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable sock_2": {"before": false, "after": false}, "reachable cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(gym_shoe_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable gym_shoe_1": ["yes", 2.3576518341783537e-13, 1.3300961758866067e-14, "The image shows a first-person view from the agent's perspective. The agent is positioned near a table and a couch. The gym_shoe_1 is visible on the floor, and it appears to be within the agent's immediate surroundings. The red bounding box around the gym_shoe_1 suggests it is an object of interest. Given the agent's position and the proximity of the gym_shoe_1, it is likely within the agent's reach.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a first-person view from the agent's perspective. The agent is positioned near a table and a couch. The gym_shoe_1 is visible on the floor, and it appears to be within the agent's immediate surroundings. The red bounding box around the gym_shoe_1 suggests it is an object of interest. Given the agent's position and the proximity of the gym_shoe_1, it is likely within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "holding sock_1": ["no", 2.580930057887766e-14, 8.37905320214688e-15, "The image shows a robotic arm, which is the agent. I need to determine if the agent is holding the sock_1. Looking at the image, the agent's gripper is open and there is no object visible within the gripper. Therefore, the agent is not holding the sock_1.", true, "Question: Is the agent holding the sock_1\n<explanation>\nThe image shows a robotic arm, which is the agent. I need to determine if the agent is holding the sock_1. Looking at the image, the agent's gripper is open and there is no object visible within the gripper. Therefore, the agent is not holding the sock_1.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding sock_2": [true, false, false], "all_correct": true}, "effects_results": {"holding gym_shoe_1": ["yes", 9.941665546353562e-13, 1.1873626539447846e-13, "The image shows a robotic arm (the agent) and a gym shoe labeled \"gym_shoe_1\". The robotic arm's gripper is closed around the gym shoe. Therefore, the agent is holding the gym_shoe_1.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a gym shoe labeled \"gym_shoe_1\". The robotic arm's gripper is closed around the gym shoe. Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "ontop gym_shoe_1,sock_1": ["no", 1.4299874489826642e-13, 3.8871087338493426e-13, "I need to determine if the gym_shoe_1 is on top of the sock_1. Looking at the image, I can see a gym shoe (gym_shoe_1) and a sock (sock_1). The gym shoe is not positioned on top of the sock. It is next to the sock. Therefore, the answer is \"No\".", true, "Question: Is the gym_shoe_1 on top of the sock_1\n<explanation>\nI need to determine if the gym_shoe_1 is on top of the sock_1. Looking at the image, I can see a gym shoe (gym_shoe_1) and a sock (sock_1). The gym shoe is not positioned on top of the sock. It is next to the sock. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "ontop gym_shoe_1,table_1": ["yes", 1.0040978465353234e-12, 4.743022923199558e-13, "The image shows a robotic arm and some furniture in a room. The question asks if the gym_shoe_1 is on top of the table_1. Looking at the image, the gym_shoe_1 is clearly resting on the table_1. Therefore, the answer is \"Yes\".", false, "<explanation>\nThe image shows a robotic arm and some furniture in a room. The question asks if the gym_shoe_1 is on top of the table_1. Looking at the image, the gym_shoe_1 is clearly resting on the table_1. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", false], "ontop gym_shoe_1,table_2": ["no", 3.3518988366149083e-13, 2.6104614888992905e-13, "The image shows a robotic arm and some furniture in a room. There are two tables labeled \"table_1\" and \"table_2\". There is also a gym shoe labeled \"gym_shoe_1\". I need to determine if the gym_shoe_1 is on top of the table_2. Looking at the image, the gym_shoe_1 is not on top of the table_2. It is on the floor.", true, "<explanation>\nThe image shows a robotic arm and some furniture in a room. There are two tables labeled \"table_1\" and \"table_2\". There is also a gym shoe labeled \"gym_shoe_1\". I need to determine if the gym_shoe_1 is on top of the table_2. Looking at the image, the gym_shoe_1 is not on top of the table_2. It is on the floor.\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto gym_shoe_1,sock_1": ["yes", 1.5833260267120175e-13, 1.7941433115651467e-13, "I need to determine if the gym_shoe_1 is next to the sock_1. Looking at the image, I can see a gym shoe labeled \"gym_shoe_1\" and a sock labeled \"sock_1\". The gym shoe and the sock are close to each other, and appear to be next to each other on the floor. Therefore, the answer is \"Yes\".", false, "Question: Is the gym_shoe_1 next to the sock_1\n<explanation>\nI need to determine if the gym_shoe_1 is next to the sock_1. Looking at the image, I can see a gym shoe labeled \"gym_shoe_1\" and a sock labeled \"sock_1\". The gym shoe and the sock are close to each other, and appear to be next to each other on the floor. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", false], "nextto gym_shoe_1,table_1": ["yes", 4.18570316211217e-13, 2.361411982837805e-14, "The image shows a robotic arm, a table labeled \"table_1\", and a shoe labeled \"gym_shoe_1\". I need to determine if the gym_shoe_1 is next to the table_1. Looking at the image, the gym_shoe_1 is very close to the table_1, and appears to be directly beside it. Therefore, the answer is \"Yes\".", false, "<explanation>\nThe image shows a robotic arm, a table labeled \"table_1\", and a shoe labeled \"gym_shoe_1\". I need to determine if the gym_shoe_1 is next to the table_1. Looking at the image, the gym_shoe_1 is very close to the table_1, and appears to be directly beside it. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", false], "nextto gym_shoe_1,table_2": ["yes", 8.47493326601792e-14, 1.1469575729981547e-14, "The image shows a robotic arm, a sofa, and two tables labeled \"table_1\" and \"table_2\". There is also an object labeled \"gym_shoe_1\". I need to determine if \"gym_shoe_1\" is next to \"table_2\". Looking at the image, \"gym_shoe_1\" is located on the floor, and \"table_2\" is also on the floor. They are very close to each other, and appear to be adjacent. Therefore, the answer is \"Yes\".", false, "<explanation>\nThe image shows a robotic arm, a sofa, and two tables labeled \"table_1\" and \"table_2\". There is also an object labeled \"gym_shoe_1\". I need to determine if \"gym_shoe_1\" is next to \"table_2\". Looking at the image, \"gym_shoe_1\" is located on the floor, and \"table_2\" is also on the floor. They are very close to each other, and appear to be adjacent. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"ontop gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "ontop gym_shoe_1,sock_2": {"before": false, "after": false}, "ontop gym_shoe_1,cabinet_1": {"before": false, "after": false}, "nextto gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "nextto gym_shoe_1,sock_2": {"before": false, "after": false}, "nextto gym_shoe_1,cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-on(gym_shoe_1, table_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 1.9992228358911568e-12, 2.10716535366251e-13, "The image shows a robotic arm (the agent) and a gym shoe labeled \"gym_shoe_1\". The robotic arm's gripper is closed around the gym shoe. Therefore, the agent is holding the gym_shoe_1.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a gym shoe labeled \"gym_shoe_1\". The robotic arm's gripper is closed around the gym shoe. Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_2": ["yes", 8.225107335675663e-13, 2.8144772008299214e-14, "The image shows a robotic arm (the agent) and two tables labeled \"table_1\" and \"table_2\". The agent is positioned close to both tables. To determine if table_2 is in reach, I need to assess the distance between the agent's end effector and table_2. Visually, table_2 appears to be within the range of motion of the robotic arm, and is very close to the agent. Therefore, table_2 is in reach of the agent.", true, "<explanation>\nThe image shows a robotic arm (the agent) and two tables labeled \"table_1\" and \"table_2\". The agent is positioned close to both tables. To determine if table_2 is in reach, I need to assess the distance between the agent's end effector and table_2. Visually, table_2 appears to be within the range of motion of the robotic arm, and is very close to the agent. Therefore, table_2 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"ontop gym_shoe_1,table_2": ["no", 8.068319504259819e-14, 1.4020637373270053e-14, "I need to determine if the object labeled \"gym_shoe_1\" is located on top of the object labeled \"table_2\". Looking at the image, I can see a gym shoe on the floor and a table labeled \"table_2\". The gym shoe is not on the table. Therefore, the answer is \"No\".", false, "Question: Is the gym_shoe_1 on top of the table_2\n<explanation>\nI need to determine if the object labeled \"gym_shoe_1\" is located on top of the object labeled \"table_2\". Looking at the image, I can see a gym shoe on the floor and a table labeled \"table_2\". The gym shoe is not on the table. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", false], "holding gym_shoe_1": ["no", 4.953742087756077e-14, 2.3399822186788606e-14, "The image shows a robotic arm (the agent). I need to determine if the agent is holding the gym_shoe_1. Looking at the image, the agent's gripper is open and there is no object visible within the gripper. Therefore, the agent is not holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent). I need to determine if the agent is holding the gym_shoe_1. Looking at the image, the agent's gripper is open and there is no object visible within the gripper. Therefore, the agent is not holding the gym_shoe_1.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {}}, "action_info": "success"}, {"action": "grasp(gym_shoe_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable gym_shoe_1": ["yes", 1.1846441525225487e-13, 5.2049640978019986e-15, "The image shows a room with a robotic arm (the agent). The question asks if the gym_shoe_1 is in reach of the agent. I can see a gym shoe on the floor, labeled as \"gym_shoe_1\". The robotic arm is positioned such that it could potentially reach the gym shoe. The distance between the arm and the shoe appears to be within the arm's range of motion. Therefore, the gym shoe is in reach of the agent.", true, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a room with a robotic arm (the agent). The question asks if the gym_shoe_1 is in reach of the agent. I can see a gym shoe on the floor, labeled as \"gym_shoe_1\". The robotic arm is positioned such that it could potentially reach the gym shoe. The distance between the arm and the shoe appears to be within the arm's range of motion. Therefore, the gym shoe is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "holding sock_1": ["no", 3.880474432993268e-14, 1.6176223568650262e-14, "The image shows a robotic arm (the agent). I need to determine if the agent is holding the object labeled \"sock_1\". Looking at the image, the agent's gripper is empty. There is a sock on the floor, but it is not being held by the agent. Therefore, the agent is not holding the sock_1.", true, "Question: Is the agent holding the sock_1\n<explanation>\nThe image shows a robotic arm (the agent). I need to determine if the agent is holding the object labeled \"sock_1\". Looking at the image, the agent's gripper is empty. There is a sock on the floor, but it is not being held by the agent. Therefore, the agent is not holding the sock_1.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding sock_2": [true, false, false], "all_correct": true}, "effects_results": {"holding gym_shoe_1": ["yes", 8.167340366299278e-14, 3.5884787979653665e-15, "The image shows a robotic arm (the agent) in the foreground. The agent appears to be grasping an object. The object being grasped is a gym shoe, and it is labeled as \"gym_shoe_1\". Therefore, the agent is holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent) in the foreground. The agent appears to be grasping an object. The object being grasped is a gym shoe, and it is labeled as \"gym_shoe_1\". Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "ontop gym_shoe_1,table_1": ["no", 8.016006749437393e-14, 2.026764003750913e-14, "I will first locate the gym_shoe_1 and table_1 in the image. The image shows a gym shoe near table_1. However, the gym shoe is not on top of the table_1, it is next to it. Therefore, the answer is \"No\".", true, "Question: Is the gym_shoe_1 on top of the table_1\n<explanation>\nI will first locate the gym_shoe_1 and table_1 in the image. The image shows a gym shoe near table_1. However, the gym shoe is not on top of the table_1, it is next to it. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "ontop gym_shoe_1,table_2": ["no", 9.189310011710472e-14, 1.8094826039014716e-14, "I will first locate the gym_shoe_1 and table_2 in the image. The gym_shoe_1 is the black shoe near the bottom of the image. The table_2 is the table on the right side of the image. I will then check if the gym_shoe_1 is on top of the table_2. The gym_shoe_1 is not on top of the table_2. Therefore, the answer is \"No\".", true, "Question: Is the gym_shoe_1 on top of the table_2\n<explanation>\nI will first locate the gym_shoe_1 and table_2 in the image. The gym_shoe_1 is the black shoe near the bottom of the image. The table_2 is the table on the right side of the image. I will then check if the gym_shoe_1 is on top of the table_2. The gym_shoe_1 is not on top of the table_2. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto gym_shoe_1,table_1": ["no", 1.2623985922366118e-14, 3.8121133366719533e-16, "The image shows a robotic arm in a room with furniture. There are two tables labeled \"table_1\" and \"table_2\". There is also a gym shoe labeled \"gym_shoe_1\". I need to determine if the gym_shoe_1 is next to the table_1. Looking at the image, the gym_shoe_1 is located near table_2, not table_1. Therefore, the answer is \"No\".", true, "Question: Is the gym_shoe_1 next to the table_1\n<explanation>\nThe image shows a robotic arm in a room with furniture. There are two tables labeled \"table_1\" and \"table_2\". There is also a gym shoe labeled \"gym_shoe_1\". I need to determine if the gym_shoe_1 is next to the table_1. Looking at the image, the gym_shoe_1 is located near table_2, not table_1. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto gym_shoe_1,table_2": ["no", 1.1159307561402296e-14, 3.818505259050171e-16, "The image shows a robotic arm holding an object. There are two tables labeled \"table_1\" and \"table_2\". There is a gym shoe labeled \"gym_shoe_1\" near table_1. The gym shoe is not near table_2. Therefore, the answer is \"No\".", true, "Question: Is the gym_shoe_1 next to the table_2\n<explanation>\nThe image shows a robotic arm holding an object. There are two tables labeled \"table_1\" and \"table_2\". There is a gym shoe labeled \"gym_shoe_1\" near table_1. The gym shoe is not near table_2. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"ontop gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "ontop gym_shoe_1,sock_1": {"before": false, "after": false}, "ontop gym_shoe_1,sock_2": {"before": false, "after": false}, "ontop gym_shoe_1,cabinet_1": {"before": false, "after": false}, "nextto gym_shoe_1,gym_shoe_1": {"before": null, "after": false}, "nextto gym_shoe_1,sock_1": {"before": true, "after": false}, "nextto gym_shoe_1,sock_2": {"before": false, "after": false}, "nextto gym_shoe_1,cabinet_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-on(gym_shoe_1, table_2)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"holding gym_shoe_1": ["yes", 7.225212724122632e-14, 3.1745367612575053e-15, "The image shows a robotic arm (the agent) in the foreground. The agent appears to be grasping an object. The object being grasped is a gym shoe, and it is labeled as \"gym_shoe_1\". Therefore, the agent is holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent) in the foreground. The agent appears to be grasping an object. The object being grasped is a gym shoe, and it is labeled as \"gym_shoe_1\". Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable table_2": ["yes", 1.3302415267403556e-13, 2.7608282938848495e-15, "The image shows a robotic arm (the agent) in the foreground. The table labeled \"table_2\" is also visible in the image. By visually inspecting the image, it appears that the robotic arm is positioned close enough to table_2 that it could potentially interact with it. Therefore, table_2 is in reach of the agent.", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) in the foreground. The table labeled \"table_2\" is also visible in the image. By visually inspecting the image, it appears that the robotic arm is positioned close enough to table_2 that it could potentially interact with it. Therefore, table_2 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"ontop gym_shoe_1,table_2": ["yes", 3.5254861096428725e-13, 1.0646044558881764e-14, "The image shows a gym shoe labeled \"gym_shoe_1\" and a table labeled \"table_2\". The gym shoe is clearly visible on top of the table labeled \"table_2\". Therefore, the answer is \"Yes\".", true, "Question: Is the gym_shoe_1 on top of the table_2\n<explanation>\nThe image shows a gym shoe labeled \"gym_shoe_1\" and a table labeled \"table_2\". The gym shoe is clearly visible on top of the table labeled \"table_2\". Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", true], "holding gym_shoe_1": ["no", 5.6616508898633955e-14, 1.8380689494317676e-14, "The image shows a robotic arm (the agent) and a gym shoe labeled \"gym_shoe_1\" on the floor. The agent's gripper is open and does not appear to be grasping the shoe. Therefore, the agent is not holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent) and a gym shoe labeled \"gym_shoe_1\" on the floor. The agent's gripper is open and does not appear to be grasping the shoe. Therefore, the agent is not holding the gym_shoe_1.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {}}, "action_info": "success"}, {"action": "navigate-to(sock_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable sock_2": [true, false, false], "all_correct": true}, "effects_results": {"reachable sock_2": ["yes", 3.4202580546406625e-13, 3.181335471208642e-14, "The image shows a robotic arm (the agent) and a small object on the floor, which is labeled as sock_2. The agent is positioned such that its end effector is relatively close to the sock_2. Given the robotic arm's capabilities, it appears that the sock_2 is within the agent's reach.", true, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a small object on the floor, which is labeled as sock_2. The agent is positioned such that its end effector is relatively close to the sock_2. Given the robotic arm's capabilities, it appears that the sock_2 is within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable gym_shoe_1": ["yes", 2.39082408384772e-13, 1.731907260833776e-14, "The image shows a robotic arm (the agent) and a small object on the floor, which appears to be a shoe (gym_shoe_1). The agent is positioned such that its end effector is relatively close to the shoe on the floor. Therefore, the shoe is within the reach of the agent.", false, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a small object on the floor, which appears to be a shoe (gym_shoe_1). The agent is positioned such that its end effector is relatively close to the shoe on the floor. Therefore, the shoe is within the reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_2": ["no", 2.084833194482879e-14, 7.669672426183823e-15, "The image shows a robotic arm (the agent) and a table in the distance. The question asks if the table (table_2) is within the reach of the agent. Based on the image, the table is quite far away from the agent. It is unlikely that the agent can reach the table without moving closer. Therefore, the answer is \"No\".", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table in the distance. The question asks if the table (table_2) is within the reach of the agent. Based on the image, the table is quite far away from the agent. It is unlikely that the agent can reach the table without moving closer. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable cabinet_1": ["no", 6.242874056247572e-14, 2.602417081473945e-14, "The image shows a robotic arm (the agent) and a cabinet in the distance. To determine if the cabinet is in reach, I need to assess the distance between the agent and the cabinet. The cabinet appears to be quite far away, beyond the immediate field of view of the agent. Given the perspective and the distance, it's unlikely the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach of the agent.", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a cabinet in the distance. To determine if the cabinet is in reach, I need to assess the distance between the agent and the cabinet. The cabinet appears to be quite far away, beyond the immediate field of view of the agent. Given the perspective and the distance, it's unlikely the agent can reach the cabinet without moving closer. Therefore, the cabinet is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable sock_1": {"before": true, "after": false}, "reachable table_1": {"before": true, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(table_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable table_2": ["no", 2.084833194482879e-14, 7.669672426183823e-15, "The image shows a robotic arm (the agent) and a table in the distance. The question asks if the table (table_2) is within the reach of the agent. Based on the image, the table is quite far away from the agent. It is unlikely that the agent can reach the table without moving closer. Therefore, the answer is \"No\".", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table in the distance. The question asks if the table (table_2) is within the reach of the agent. Based on the image, the table is quite far away from the agent. It is unlikely that the agent can reach the table without moving closer. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"reachable table_2": ["yes", 2.220112928132817e-13, 1.822379696962955e-14, "The image shows a robotic arm (the agent) and a table (table_2). I need to determine if the agent can reach the table. The agent is positioned above and slightly to the right of the table. Visually, it appears the agent is close enough to the table to interact with it, meaning it is within the agent's reach.", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table (table_2). I need to determine if the agent can reach the table. The agent is positioned above and slightly to the right of the table. Visually, it appears the agent is close enough to the table to interact with it, meaning it is within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable gym_shoe_1": ["yes", 2.7091580389639047e-13, 2.2238124969958806e-14, "The image shows a robotic arm (the agent) and a gym shoe (gym_shoe_1) on a table. I need to determine if the agent can reach the gym shoe. The agent is positioned above the table, and the gym shoe is on the table. Visually, it appears the agent is close enough to the gym shoe to be able to reach it.", false, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a gym shoe (gym_shoe_1) on a table. I need to determine if the agent can reach the gym shoe. The agent is positioned above the table, and the gym shoe is on the table. Visually, it appears the agent is close enough to the gym shoe to be able to reach it.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable cabinet_1": ["yes", 1.321615885306604e-13, 4.2906592856569933e-14, "The image shows a robotic arm (the agent) and a cabinet. I need to determine if the agent can reach the cabinet. The agent is positioned above and to the right of the cabinet. Visually, it appears the agent is close enough to the cabinet to be within its reach, given the length of the arm.", false, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a cabinet. I need to determine if the agent can reach the cabinet. The agent is positioned above and to the right of the cabinet. Visually, it appears the agent is close enough to the cabinet to be within its reach, given the length of the arm.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable sock_1": {"before": false, "after": false}, "reachable sock_2": {"before": true, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(sock_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable sock_2": [true, false, false], "all_correct": true}, "effects_results": {"reachable sock_2": ["yes", 4.3916969670251826e-13, 1.9295769680422598e-14, "The image shows a robotic arm (the agent) and a sock on the floor. To determine if the sock is in reach, I need to assess the distance between the agent's gripper and the sock. The sock appears to be relatively close to the base of the robotic arm. Given the arm's potential range of motion, it seems likely that the sock is within the agent's reach.", true, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a sock on the floor. To determine if the sock is in reach, I need to assess the distance between the agent's gripper and the sock. The sock appears to be relatively close to the base of the robotic arm. Given the arm's potential range of motion, it seems likely that the sock is within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable gym_shoe_1": ["yes", 3.018367077545908e-13, 1.326177886175903e-14, "The image shows a robotic arm (the agent) and a gym shoe on the floor. To determine if the gym shoe is in reach, I need to assess the distance between the agent's gripper and the shoe. Visually, the shoe appears to be relatively close to the base of the robotic arm. Given the arm's potential range of motion, it seems plausible that the agent could reach the shoe.", false, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a gym shoe on the floor. To determine if the gym shoe is in reach, I need to assess the distance between the agent's gripper and the shoe. Visually, the shoe appears to be relatively close to the base of the robotic arm. Given the arm's potential range of motion, it seems plausible that the agent could reach the shoe.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_2": ["no", 6.419001343915126e-14, 1.6229776379707468e-14, "The image shows a robotic arm (the agent) and a table in the distance. The question asks if the table is within reach of the agent. Based on the image, the table appears to be quite far away from the agent. It is unlikely that the agent can reach the table without moving closer. Therefore, the table is not in reach of the agent.", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table in the distance. The question asks if the table is within reach of the agent. Based on the image, the table appears to be quite far away from the agent. It is unlikely that the agent can reach the table without moving closer. Therefore, the table is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable cabinet_1": ["no", 1.3302415267403556e-13, 4.893685080103495e-14, "The image shows a robotic arm (the agent) and a cabinet partially visible in the background. To determine if the cabinet is in reach, I need to assess the distance between the arm and the cabinet. The cabinet appears to be quite far away, beyond the doorway. Given the arm's limited reach, it's unlikely the cabinet is within its range.", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a cabinet partially visible in the background. To determine if the cabinet is in reach, I need to assess the distance between the arm and the cabinet. The cabinet appears to be quite far away, beyond the doorway. Given the arm's limited reach, it's unlikely the cabinet is within its range.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable sock_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(table_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable table_2": ["no", 6.419001343915126e-14, 1.6229776379707468e-14, "The image shows a robotic arm (the agent) and a table in the distance. To determine if the table is in reach, I need to assess the distance between the agent and the table. The table appears to be quite far away, beyond the immediate area visible in the image. Given the perspective and the distance, it's unlikely the agent can reach the table without moving significantly closer. Therefore, the table is not in reach of the agent.", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table in the distance. To determine if the table is in reach, I need to assess the distance between the agent and the table. The table appears to be quite far away, beyond the immediate area visible in the image. Given the perspective and the distance, it's unlikely the agent can reach the table without moving significantly closer. Therefore, the table is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"reachable table_2": ["yes", 2.535594618383735e-13, 2.0813427411138334e-14, "The image shows a robotic arm (the agent) and a table (table_2) with objects on it. The robotic arm is positioned above the table. To determine if the table is in reach, I need to assess the distance between the arm and the table. Visually, the arm is directly above the table and appears close enough to manipulate objects on the table. Therefore, the table is in reach of the agent.", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table (table_2) with objects on it. The robotic arm is positioned above the table. To determine if the table is in reach, I need to assess the distance between the arm and the table. Visually, the arm is directly above the table and appears close enough to manipulate objects on the table. Therefore, the table is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable gym_shoe_1": ["yes", 1.1846440169972772e-13, 5.8979958673336264e-15, "The image shows a robotic arm (the agent) and a gym shoe (gym_shoe_1) on a table. I need to determine if the agent can reach the gym shoe. The agent is positioned above the table, and the gym shoe is on the table. Visually, it appears the agent is close enough to the gym shoe to be able to reach it.", false, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a gym shoe (gym_shoe_1) on a table. I need to determine if the agent can reach the gym shoe. The agent is positioned above the table, and the gym shoe is on the table. Visually, it appears the agent is close enough to the gym shoe to be able to reach it.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable sock_1": ["yes", 4.391697780176812e-13, 1.326177886175903e-14, "The image shows a robotic arm (the agent) positioned above a table. On the table, there is a sock (sock_1) and other objects. The robotic arm is directly above the sock, and appears close enough to grasp it. Therefore, the sock is in reach of the agent.", false, "Question: Is the sock_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a table. On the table, there is a sock (sock_1) and other objects. The robotic arm is directly above the sock, and appears close enough to grasp it. Therefore, the sock is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable cabinet_1": ["no", 1.9229398889181182e-13, 4.8619531930202756e-14, "The image shows a robotic arm (the agent) and a table with objects on it. There is a cabinet visible in the background, but it is far away from the agent. The agent's arm does not appear to be extended enough to reach the cabinet. Therefore, the cabinet is not in reach of the agent.", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table with objects on it. There is a cabinet visible in the background, but it is far away from the agent. The agent's arm does not appear to be extended enough to reach the cabinet. Therefore, the cabinet is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable sock_2": {"before": true, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(sock_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable sock_2": [true, false, false], "all_correct": true}, "effects_results": {"reachable sock_2": ["yes", 4.876990196238384e-13, 4.0032772696861965e-14, "The image shows a robotic arm (the agent) and a small object on the floor, which is labeled as sock_2. The agent is positioned such that it can likely reach the sock_2. The distance between the agent and the sock_2 appears to be within the range of the robotic arm. Therefore, the sock_2 is in reach of the agent.", true, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a small object on the floor, which is labeled as sock_2. The agent is positioned such that it can likely reach the sock_2. The distance between the agent and the sock_2 appears to be within the range of the robotic arm. Therefore, the sock_2 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable gym_shoe_1": ["yes", 3.474127452732234e-13, 2.2209351260740577e-14, "The image shows a robotic arm (the agent) and a small object on the floor, which appears to be a gym shoe (gym_shoe_1). The agent is positioned such that its end effector is relatively close to the gym shoe. Given the robotic arm's capabilities, it is likely that the gym shoe is within the agent's reach.", false, "Question: Is the gym_shoe_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a small object on the floor, which appears to be a gym shoe (gym_shoe_1). The agent is positioned such that its end effector is relatively close to the gym shoe. Given the robotic arm's capabilities, it is likely that the gym shoe is within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable table_2": ["no", 1.612162721300204e-14, 5.930815852940889e-15, "The image shows a robotic arm (the agent) and a table in the distance. The question asks if the table (table_2) is within the reach of the agent. Based on the image, the table is quite far away from the agent. It is unlikely that the agent can reach the table without moving closer. Therefore, the answer is \"No\".", true, "Question: Is the table_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a table in the distance. The question asks if the table (table_2) is within the reach of the agent. Based on the image, the table is quite far away from the agent. It is unlikely that the agent can reach the table without moving closer. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable cabinet_1": ["no", 9.79920422691967e-14, 3.181335810021821e-14, "The image shows a robotic arm (the agent) and a cabinet in the background. To determine if the cabinet is in reach, I need to assess the distance between the agent and the cabinet. The cabinet appears to be quite far away from the agent, beyond the typical reach of a robotic arm in a household setting. Therefore, the cabinet is likely not in reach of the agent.", true, "Question: Is the cabinet_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a cabinet in the background. To determine if the cabinet is in reach, I need to assess the distance between the agent and the cabinet. The cabinet appears to be quite far away from the agent, beyond the typical reach of a robotic arm in a household setting. Therefore, the cabinet is likely not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable sock_1": {"before": true, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(gym_shoe_1, sock_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 1.4257754590678295e-13, 2.4776264278604e-14, "The image shows a robotic arm (the agent) and a gym shoe on the floor. The robotic arm appears to be grasping or holding the gym shoe. Therefore, the agent is holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent) and a gym shoe on the floor. The robotic arm appears to be grasping or holding the gym shoe. Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable sock_2": ["yes", 6.26217773382759e-13, 4.536306971877034e-14, "The image shows a robotic arm (the agent) and a small object on the floor, which is labeled as sock_2. The agent is positioned such that it can likely reach the sock_2. The distance between the agent and the sock_2 appears to be within the range of the robotic arm.", true, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a small object on the floor, which is labeled as sock_2. The agent is positioned such that it can likely reach the sock_2. The distance between the agent and the sock_2 appears to be within the range of the robotic arm.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(gym_shoe_1, sock_2)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding gym_shoe_1": ["yes", 1.4257754590678295e-13, 2.4776264278604e-14, "The image shows a robotic arm (the agent) and a gym shoe on the floor. The robotic arm appears to be grasping or holding the gym shoe. Therefore, the agent is holding the gym_shoe_1.", true, "Question: Is the agent holding the gym_shoe_1\n<explanation>\nThe image shows a robotic arm (the agent) and a gym shoe on the floor. The robotic arm appears to be grasping or holding the gym shoe. Therefore, the agent is holding the gym_shoe_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable sock_2": ["yes", 6.26217773382759e-13, 4.536306971877034e-14, "The image shows a robotic arm (the agent) and a small object on the floor, which is labeled as sock_2. The agent is positioned such that it can likely reach the sock_2. The distance between the agent and the sock_2 appears to be within the range of the robotic arm.", true, "Question: Is the sock_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a small object on the floor, which is labeled as sock_2. The agent is positioned such that it can likely reach the sock_2. The distance between the agent and the sock_2 appears to be within the range of the robotic arm.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable notebook_1": ["yes", "yes"], "reachable table_2": ["yes", "yes"], "holding gym_shoe_1": ["no", "no"], "holding notebook_1": ["no", "no"], "ontop gym_shoe_1,notebook_1": ["no", "no"], "ontop gym_shoe_1,table_2": ["no", "no"], "ontop notebook_1,gym_shoe_1": ["no", "no"], "ontop notebook_1,table_2": ["yes", "no"], "nextto gym_shoe_1,notebook_1": ["no", "no"], "nextto gym_shoe_1,table_2": ["yes", "yes"], "nextto notebook_1,gym_shoe_1": ["no", "no"], "nextto notebook_1,table_2": ["yes", "yes"]}, "enum_metrics": {"accuracy": 0.9230769230769231, "yes_accuracy": 1.0, "yes_correct": 5, "yes_total": 5, "no_accuracy": 0.875, "no_correct": 7, "no_total": 8, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.75, "no_correct": 3, "no_total": 4}, "nextto": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}}}, "step": 1, "actions": ["grasp(gym_shoe_1)", "place-on(gym_shoe_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["no", "yes"], "reachable notebook_1": ["no", "yes"], "reachable table_2": ["yes", "yes"], "holding gym_shoe_1": ["no", "no"], "holding notebook_1": ["no", "no"], "ontop gym_shoe_1,notebook_1": ["no", "no"], "ontop gym_shoe_1,table_2": ["no", "no"], "ontop notebook_1,gym_shoe_1": ["no", "no"], "ontop notebook_1,table_2": ["no", "no"], "nextto gym_shoe_1,notebook_1": ["no", "no"], "nextto gym_shoe_1,table_2": ["no", "no"], "nextto notebook_1,gym_shoe_1": ["no", "no"], "nextto notebook_1,table_2": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.7692307692307693, "yes_accuracy": 0.25, "yes_correct": 1, "yes_total": 4, "no_accuracy": 1.0, "no_correct": 9, "no_total": 9, "predicates": {"reachable": {"accuracy": 0.3333333333333333, "yes_accuracy": 0.3333333333333333, "yes_correct": 1, "yes_total": 3, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 4, "no_total": 4}, "nextto": {"accuracy": 0.75, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 3, "no_total": 3}}}, "step": 3, "actions": ["navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(sock_2)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_1": ["yes", "no"], "reachable table_1": ["yes", "no"], "reachable table_2": ["yes", "yes"], "reachable sofa_1": ["yes", "no"], "holding gym_shoe_1": ["no", "no"], "holding sock_1": ["no", "no"], "ontop gym_shoe_1,sock_1": ["no", "no"], "ontop gym_shoe_1,table_1": ["no", "no"], "ontop gym_shoe_1,table_2": ["no", "no"], "ontop gym_shoe_1,sofa_1": ["no", "no"], "ontop sock_1,gym_shoe_1": ["no", "no"], "ontop sock_1,table_1": ["no", "no"], "ontop sock_1,table_2": ["no", "no"], "ontop sock_1,sofa_1": ["no", "yes"], "nextto gym_shoe_1,sock_1": ["yes", "no"], "nextto gym_shoe_1,table_1": ["yes", "no"], "nextto gym_shoe_1,table_2": ["yes", "no"], "nextto gym_shoe_1,sofa_1": ["no", "no"], "nextto sock_1,gym_shoe_1": ["yes", "no"], "nextto sock_1,table_1": ["yes", "no"], "nextto sock_1,table_2": ["yes", "no"], "nextto sock_1,sofa_1": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.5217391304347826, "yes_accuracy": 0.5, "yes_correct": 2, "yes_total": 4, "no_accuracy": 0.5263157894736842, "no_correct": 10, "no_total": 19, "predicates": {"reachable": {"accuracy": 0.4, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.0, "no_correct": 0, "no_total": 3}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.875, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.125, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.14285714285714285, "no_correct": 1, "no_total": 7}}}, "step": 4, "actions": ["grasp(gym_shoe_1)", "place-on(gym_shoe_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_1": ["yes", "no"], "reachable table_1": ["yes", "no"], "reachable table_2": ["yes", "yes"], "reachable sofa_1": ["no", "no"], "holding gym_shoe_1": ["yes", "yes"], "holding sock_1": ["no", "no"], "ontop gym_shoe_1,sock_1": ["no", "no"], "ontop gym_shoe_1,table_1": ["no", "no"], "ontop gym_shoe_1,table_2": ["no", "no"], "ontop gym_shoe_1,sofa_1": ["no", "no"], "ontop sock_1,gym_shoe_1": ["no", "no"], "ontop sock_1,table_1": ["yes", "no"], "ontop sock_1,table_2": ["no", "no"], "ontop sock_1,sofa_1": ["no", "yes"], "nextto gym_shoe_1,sock_1": ["yes", "no"], "nextto gym_shoe_1,table_1": ["yes", "no"], "nextto gym_shoe_1,table_2": ["yes", "no"], "nextto gym_shoe_1,sofa_1": ["yes", "no"], "nextto sock_1,gym_shoe_1": ["yes", "no"], "nextto sock_1,table_1": ["yes", "no"], "nextto sock_1,table_2": ["no", "no"], "nextto sock_1,sofa_1": ["yes", "yes"]}, "enum_metrics": {"accuracy": 0.5652173913043478, "yes_accuracy": 0.8, "yes_correct": 4, "yes_total": 5, "no_accuracy": 0.5, "no_correct": 9, "no_total": 18, "predicates": {"reachable": {"accuracy": 0.6, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.3333333333333333, "no_correct": 1, "no_total": 3}, "holding": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.75, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.8571428571428571, "no_correct": 6, "no_total": 7}, "nextto": {"accuracy": 0.25, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.14285714285714285, "no_correct": 1, "no_total": 7}}}, "step": 5, "actions": ["place-on(gym_shoe_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_1": ["yes", "no"], "reachable table_1": ["yes", "no"], "reachable table_2": ["yes", "yes"], "reachable sofa_1": ["no", "no"], "holding gym_shoe_1": ["no", "no"], "holding sock_1": ["no", "no"], "ontop gym_shoe_1,sock_1": ["no", "no"], "ontop gym_shoe_1,table_1": ["no", "no"], "ontop gym_shoe_1,table_2": ["no", "yes"], "ontop gym_shoe_1,sofa_1": ["no", "no"], "ontop sock_1,gym_shoe_1": ["no", "no"], "ontop sock_1,table_1": ["no", "no"], "ontop sock_1,table_2": ["no", "no"], "ontop sock_1,sofa_1": ["no", "yes"], "nextto gym_shoe_1,sock_1": ["yes", "no"], "nextto gym_shoe_1,table_1": ["yes", "no"], "nextto gym_shoe_1,table_2": ["no", "no"], "nextto gym_shoe_1,sofa_1": ["no", "no"], "nextto sock_1,gym_shoe_1": ["yes", "no"], "nextto sock_1,table_1": ["yes", "no"], "nextto sock_1,table_2": ["yes", "no"], "nextto sock_1,sofa_1": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.5652173913043478, "yes_accuracy": 0.4, "yes_correct": 2, "yes_total": 5, "no_accuracy": 0.6111111111111112, "no_correct": 11, "no_total": 18, "predicates": {"reachable": {"accuracy": 0.6, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.3333333333333333, "no_correct": 1, "no_total": 3}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.75, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 2, "no_accuracy": 1.0, "no_correct": 6, "no_total": 6}, "nextto": {"accuracy": 0.25, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.2857142857142857, "no_correct": 2, "no_total": 7}}}, "step": 6, "actions": ["grasp(gym_shoe_1)", "place-on(gym_shoe_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "no"], "reachable sock_2": ["yes", "yes"], "reachable table_2": ["no", "no"], "reachable cabinet_1": ["no", "no"], "holding gym_shoe_1": ["yes", "no"], "holding sock_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop gym_shoe_1,sock_2": ["no", "no"], "ontop gym_shoe_1,table_2": ["no", "yes"], "ontop gym_shoe_1,cabinet_1": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "ontop sock_2,table_2": ["no", "no"], "ontop sock_2,cabinet_1": ["no", "no"], "inside gym_shoe_1,cabinet_1": ["no", "no"], "inside sock_2,cabinet_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["no", "no"], "nextto gym_shoe_1,table_2": ["no", "no"], "nextto gym_shoe_1,cabinet_1": ["no", "no"], "nextto sock_2,gym_shoe_1": ["no", "no"], "nextto sock_2,table_2": ["no", "no"], "nextto sock_2,cabinet_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8095238095238095, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.8421052631578947, "no_correct": 16, "no_total": 19, "predicates": {"reachable": {"accuracy": 0.75, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.6666666666666666, "no_correct": 2, "no_total": 3}, "holding": {"accuracy": 0.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.8333333333333334, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "nextto": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 6, "no_total": 6}}}, "step": 9, "actions": ["navigate-to(table_2)", "place-on(gym_shoe_1, table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable table_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "no"], "reachable sofa_1": ["no", "no"], "holding gym_shoe_1": ["no", "no"], "open cabinet_1": ["no", "no"], "ontop gym_shoe_1,table_2": ["yes", "yes"], "ontop gym_shoe_1,cabinet_1": ["no", "no"], "ontop gym_shoe_1,sofa_1": ["no", "no"], "inside gym_shoe_1,cabinet_1": ["no", "no"], "nextto gym_shoe_1,table_2": ["yes", "no"], "nextto gym_shoe_1,cabinet_1": ["no", "no"], "nextto gym_shoe_1,sofa_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8461538461538461, "yes_accuracy": 1.0, "yes_correct": 3, "yes_total": 3, "no_accuracy": 0.8, "no_correct": 8, "no_total": 10, "predicates": {"reachable": {"accuracy": 0.75, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "nextto": {"accuracy": 0.6666666666666666, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.6666666666666666, "no_correct": 2, "no_total": 3}}}, "step": 10, "actions": ["navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "no"], "reachable sock_2": ["yes", "yes"], "reachable table_2": ["no", "no"], "reachable cabinet_1": ["no", "no"], "holding gym_shoe_1": ["yes", "no"], "holding sock_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop gym_shoe_1,sock_2": ["no", "no"], "ontop gym_shoe_1,table_2": ["no", "yes"], "ontop gym_shoe_1,cabinet_1": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "ontop sock_2,table_2": ["no", "no"], "ontop sock_2,cabinet_1": ["no", "no"], "inside gym_shoe_1,cabinet_1": ["no", "no"], "inside sock_2,cabinet_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["no", "no"], "nextto gym_shoe_1,table_2": ["no", "no"], "nextto gym_shoe_1,cabinet_1": ["no", "no"], "nextto sock_2,gym_shoe_1": ["yes", "no"], "nextto sock_2,table_2": ["no", "no"], "nextto sock_2,cabinet_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.7619047619047619, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.7894736842105263, "no_correct": 15, "no_total": 19, "predicates": {"reachable": {"accuracy": 0.75, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.6666666666666666, "no_correct": 2, "no_total": 3}, "holding": {"accuracy": 0.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.0, "no_correct": 0, "no_total": 2}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.8333333333333334, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "nextto": {"accuracy": 0.8333333333333334, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.8333333333333334, "no_correct": 5, "no_total": 6}}}, "step": 11, "actions": ["navigate-to(table_2)", "place-on(gym_shoe_1, table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "yes"], "reachable sock_1": ["yes", "no"], "reachable table_2": ["yes", "yes"], "reachable cabinet_1": ["no", "no"], "reachable sofa_1": ["no", "no"], "holding gym_shoe_1": ["no", "no"], "holding sock_1": ["no", "no"], "open cabinet_1": ["no", "no"], "ontop gym_shoe_1,sock_1": ["yes", "no"], "ontop gym_shoe_1,table_2": ["yes", "yes"], "ontop gym_shoe_1,cabinet_1": ["no", "no"], "ontop gym_shoe_1,sofa_1": ["no", "no"], "ontop sock_1,gym_shoe_1": ["yes", "no"], "ontop sock_1,table_2": ["yes", "no"], "ontop sock_1,cabinet_1": ["no", "no"], "ontop sock_1,sofa_1": ["no", "yes"], "inside gym_shoe_1,cabinet_1": ["no", "no"], "inside sock_1,cabinet_1": ["no", "no"], "nextto gym_shoe_1,sock_1": ["yes", "no"], "nextto gym_shoe_1,table_2": ["yes", "no"], "nextto gym_shoe_1,cabinet_1": ["yes", "no"], "nextto gym_shoe_1,sofa_1": ["no", "no"], "nextto sock_1,gym_shoe_1": ["yes", "no"], "nextto sock_1,table_2": ["no", "no"], "nextto sock_1,cabinet_1": ["yes", "no"], "nextto sock_1,sofa_1": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.5769230769230769, "yes_accuracy": 0.6, "yes_correct": 3, "yes_total": 5, "no_accuracy": 0.5714285714285714, "no_correct": 12, "no_total": 21, "predicates": {"reachable": {"accuracy": 0.8, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": 0.6666666666666666, "no_correct": 2, "no_total": 3}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.5, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.5, "no_correct": 3, "no_total": 6}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "nextto": {"accuracy": 0.25, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 0.2857142857142857, "no_correct": 2, "no_total": 7}}}, "step": 12, "actions": ["navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "no"], "reachable sock_2": ["yes", "yes"], "reachable table_2": ["no", "no"], "reachable cabinet_1": ["no", "no"], "holding gym_shoe_1": ["yes", "no"], "holding sock_2": ["no", "no"], "open cabinet_1": ["no", "no"], "ontop gym_shoe_1,sock_2": ["no", "no"], "ontop gym_shoe_1,table_2": ["no", "yes"], "ontop gym_shoe_1,cabinet_1": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "ontop sock_2,table_2": ["no", "no"], "ontop sock_2,cabinet_1": ["no", "no"], "inside gym_shoe_1,cabinet_1": ["no", "no"], "inside sock_2,cabinet_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["no", "no"], "nextto gym_shoe_1,table_2": ["no", "no"], "nextto gym_shoe_1,cabinet_1": ["no", "no"], "nextto sock_2,gym_shoe_1": ["yes", "no"], "nextto sock_2,table_2": ["no", "no"], "nextto sock_2,cabinet_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8095238095238095, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.8421052631578947, "no_correct": 16, "no_total": 19, "predicates": {"reachable": {"accuracy": 0.75, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.6666666666666666, "no_correct": 2, "no_total": 3}, "holding": {"accuracy": 0.5, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.8333333333333334, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "nextto": {"accuracy": 0.8333333333333334, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.8333333333333334, "no_correct": 5, "no_total": 6}}}, "step": 13, "actions": ["place-next-to(gym_shoe_1, sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"]}, {"enum_results": {"reachable gym_shoe_1": ["yes", "no"], "reachable sock_2": ["yes", "yes"], "reachable table_2": ["no", "no"], "reachable cabinet_1": ["no", "no"], "holding gym_shoe_1": ["yes", "no"], "holding sock_2": ["no", "no"], "open cabinet_1": ["no", "no"], "ontop gym_shoe_1,sock_2": ["no", "no"], "ontop gym_shoe_1,table_2": ["no", "yes"], "ontop gym_shoe_1,cabinet_1": ["no", "no"], "ontop sock_2,gym_shoe_1": ["no", "no"], "ontop sock_2,table_2": ["no", "no"], "ontop sock_2,cabinet_1": ["no", "no"], "inside gym_shoe_1,cabinet_1": ["no", "no"], "inside sock_2,cabinet_1": ["no", "no"], "nextto gym_shoe_1,sock_2": ["no", "no"], "nextto gym_shoe_1,table_2": ["no", "no"], "nextto gym_shoe_1,cabinet_1": ["no", "no"], "nextto sock_2,gym_shoe_1": ["yes", "no"], "nextto sock_2,table_2": ["no", "no"], "nextto sock_2,cabinet_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.8095238095238095, "yes_accuracy": 0.5, "yes_correct": 1, "yes_total": 2, "no_accuracy": 0.8421052631578947, "no_correct": 16, "no_total": 19, "predicates": {"reachable": {"accuracy": 0.75, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.6666666666666666, "no_correct": 2, "no_total": 3}, "holding": {"accuracy": 0.5, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.5, "no_correct": 1, "no_total": 2}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.8333333333333334, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 5, "no_total": 5}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "nextto": {"accuracy": 0.8333333333333334, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.8333333333333334, "no_correct": 5, "no_total": 6}}}, "step": 14, "actions": ["place-next-to(gym_shoe_1, sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"]}], "remaining_actions": ["grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"]}, "data/planning/igibson/medium/sorting_groceries_medium.pddl_Beechwood_0_int_23": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(apple_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable apple_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable apple_1": ["yes", 1.655481524434621e-12, 3.435842444430605e-14, "The image shows a robotic arm positioned above a counter. On the counter, there are several objects including an apple labeled \"apple_1\". The robotic arm appears to be directly above the apple, and the distance between the arm's gripper and the apple seems small enough for the arm to grasp it. Therefore, the apple is in reach of the agent.", true, "<explanation>\nThe image shows a robotic arm positioned above a counter. On the counter, there are several objects including an apple labeled \"apple_1\". The robotic arm appears to be directly above the apple, and the distance between the arm's gripper and the apple seems small enough for the arm to grasp it. Therefore, the apple is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable apple_2": ["yes", 1.6012676211027421e-12, 3.7658214085056416e-14, "The image shows a robotic arm and a countertop with several objects on it, including an apple labeled \"apple_2\". The robotic arm is positioned above the countertop. I need to determine if the apple_2 is within the range of the robotic arm. Visually, the apple_2 appears to be close enough to the robotic arm that the arm could potentially reach it.", false, "<explanation>\nThe image shows a robotic arm and a countertop with several objects on it, including an apple labeled \"apple_2\". The robotic arm is positioned above the countertop. I need to determine if the apple_2 is within the range of the robotic arm. Visually, the apple_2 appears to be close enough to the robotic arm that the arm could potentially reach it.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable electric_refrigerator_1": ["no", 4.1443020890041815e-13, 2.6493635437623356e-14, "The image shows a robotic arm (the agent) and an electric refrigerator labeled as \"electric_refrigerator_1\". The robotic arm is positioned above a counter, and the refrigerator is located to the left of the counter. Visually, the robotic arm does not appear to be close enough to directly interact with or reach the refrigerator. Therefore, the refrigerator is not in reach of the agent.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and an electric refrigerator labeled as \"electric_refrigerator_1\". The robotic arm is positioned above a counter, and the refrigerator is located to the left of the counter. Visually, the robotic arm does not appear to be close enough to directly interact with or reach the refrigerator. Therefore, the refrigerator is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable orange_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(electric_refrigerator_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable electric_refrigerator_1": ["no", 4.1443020890041815e-13, 2.6493635437623356e-14, "The image shows a robotic arm (the agent) and an electric refrigerator labeled as \"electric_refrigerator_1\". The robotic arm is positioned above a counter, and the refrigerator is located to the left of the counter. Visually, the robotic arm does not appear to be close enough to directly interact with or reach the refrigerator. The distance between the arm and the refrigerator seems too large for a single reach.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and an electric refrigerator labeled as \"electric_refrigerator_1\". The robotic arm is positioned above a counter, and the refrigerator is located to the left of the counter. Visually, the robotic arm does not appear to be close enough to directly interact with or reach the refrigerator. The distance between the arm and the refrigerator seems too large for a single reach.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"reachable electric_refrigerator_1": ["yes", 2.345683089227061e-14, 3.1745367612575053e-15, "The image shows a robotic arm positioned near a refrigerator. The robotic arm appears to be very close to the refrigerator, and it is likely that the agent can reach the refrigerator. Therefore, the answer is \"Yes\".", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm positioned near a refrigerator. The robotic arm appears to be very close to the refrigerator, and it is likely that the agent can reach the refrigerator. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"reachable apple_1": {"before": true, "after": false}, "reachable apple_2": {"before": true, "after": false}, "reachable orange_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "open-container(electric_refrigerator_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable electric_refrigerator_1": ["yes", 3.88047375536691e-14, 5.251650859788761e-15, "The image shows a robotic arm positioned near a refrigerator. The robotic arm appears to be very close to the refrigerator, and it is likely that the agent can reach the refrigerator. Therefore, the answer is \"Yes\".", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm positioned near a refrigerator. The robotic arm appears to be very close to the refrigerator, and it is likely that the agent can reach the refrigerator. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", true], "open electric_refrigerator_1": ["no", 1.7941445312925908e-13, 6.600289433923712e-14, "The image shows a white door with a black handle. The robotic arm is near the door. The door appears to be closed, as there is no visible opening or interior of a refrigerator. Therefore, the electric refrigerator is not open.", true, "Question: Is the electric_refrigerator_1 open\n<explanation>\nThe image shows a white door with a black handle. The robotic arm is near the door. The door appears to be closed, as there is no visible opening or interior of a refrigerator. Therefore, the electric refrigerator is not open.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding apple_1": [true, false, false], "holding apple_2": [true, false, false], "holding orange_1": [true, false, false], "all_correct": true}, "effects_results": {"open electric_refrigerator_1": ["yes", 7.095978535667791e-13, 2.610464741505808e-13, "The image shows a white appliance, which appears to be a refrigerator. The door of the refrigerator is slightly ajar, revealing the interior. Therefore, the refrigerator is open.", true, "<explanation>\nThe image shows a white appliance, which appears to be a refrigerator. The door of the refrigerator is slightly ajar, revealing the interior. Therefore, the refrigerator is open.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {}}, "action_info": "success"}, {"action": "navigate-to(apple_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable apple_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable apple_1": ["yes", 2.806513918832132e-12, 8.474937331776067e-14, "The image shows a robotic arm (the agent) and a countertop with an apple labeled \"apple_1\". The robotic arm is positioned directly above the apple. The distance between the gripper of the robotic arm and the apple appears to be small enough for the agent to grasp it. Therefore, the apple is in reach of the agent.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a countertop with an apple labeled \"apple_1\". The robotic arm is positioned directly above the apple. The distance between the gripper of the robotic arm and the apple appears to be small enough for the agent to grasp it. Therefore, the apple is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable electric_refrigerator_1": ["no", 7.761872470712222e-14, 5.622681360355772e-15, "The image shows a kitchen scene with a robotic arm (the agent). The agent is holding an object and is positioned near a countertop with some items on it. The electric_refrigerator_1 is visible in the background, to the left of the agent. However, based on the image, the agent is not close enough to directly interact with or reach the electric_refrigerator_1. The distance appears to be too far for the agent's arm to extend and manipulate the refrigerator.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). The agent is holding an object and is positioned near a countertop with some items on it. The electric_refrigerator_1 is visible in the background, to the left of the agent. However, based on the image, the agent is not close enough to directly interact with or reach the electric_refrigerator_1. The distance appears to be too far for the agent's arm to extend and manipulate the refrigerator.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"reachable apple_2": {"before": false, "after": false}, "reachable orange_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(apple_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable apple_1": ["yes", 2.4767401671232925e-12, 7.47910712311714e-14, "The image shows a robotic arm (the agent) and a countertop with an apple labeled \"apple_1\". The robotic arm is positioned directly above the apple. The distance between the gripper of the robotic arm and the apple appears to be small enough for the agent to grasp it. Therefore, the apple is in reach of the agent.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a countertop with an apple labeled \"apple_1\". The robotic arm is positioned directly above the apple. The distance between the gripper of the robotic arm and the apple appears to be small enough for the agent to grasp it. Therefore, the apple is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding apple_2": [true, false, false], "holding orange_1": [true, false, false], "all_correct": true}, "effects_results": {"holding apple_1": ["yes", 1.106575660096698e-12, 2.6024165732541765e-14, "The image shows a robotic arm (the agent) and an apple labeled \"apple_1\". The apple is positioned very close to the robotic arm's gripper, and appears to be grasped by it. Therefore, the agent is holding the apple_1.", true, "Question: Is the agent holding the apple_1\n<explanation>\nThe image shows a robotic arm (the agent) and an apple labeled \"apple_1\". The apple is positioned very close to the robotic arm's gripper, and appears to be grasped by it. Therefore, the agent is holding the apple_1.\n</explanation>\n<answer>\nYes\n</answer>", true], "ontop apple_1,electric_refrigerator_1": ["no", 1.425775594593101e-13, 1.6156156002877092e-13, "I need to determine if the apple labeled \"apple_1\" is located on top of the electric refrigerator labeled \"electric_refrigerator_1\". Looking at the image, the apple is on the counter, and the electric refrigerator is to the left of the counter. The apple is not on top of the refrigerator.", true, "Question: Is the apple_1 on top of the electric_refrigerator_1\n<explanation>\nI need to determine if the apple labeled \"apple_1\" is located on top of the electric refrigerator labeled \"electric_refrigerator_1\". Looking at the image, the apple is on the counter, and the electric refrigerator is to the left of the counter. The apple is not on top of the refrigerator.\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto apple_1,electric_refrigerator_1": ["no", 1.3589024111700099e-13, 1.1154551471403464e-14, "I will first locate the apple_1 and the electric_refrigerator_1 in the image. The apple_1 is on the counter, and the electric_refrigerator_1 is to the left of the counter. They are not directly adjacent to each other, but they are relatively close. However, the question asks if they are *next* to each other, which implies immediate adjacency. Since there is a counter between them, they are not next to each other.", true, "Question: Is the apple_1 next to the electric_refrigerator_1\n<explanation>\nI will first locate the apple_1 and the electric_refrigerator_1 in the image. The apple_1 is on the counter, and the electric_refrigerator_1 is to the left of the counter. They are not directly adjacent to each other, but they are relatively close. However, the question asks if they are *next* to each other, which implies immediate adjacency. Since there is a counter between them, they are not next to each other.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"ontop apple_1,apple_1": {"before": null, "after": false}, "ontop apple_1,apple_2": {"before": false, "after": false}, "ontop apple_1,orange_1": {"before": false, "after": false}, "ontop apple_1,table_1": {"before": false, "after": false}, "nextto apple_1,apple_1": {"before": null, "after": false}, "nextto apple_1,apple_2": {"before": true, "after": false}, "nextto apple_1,orange_1": {"before": false, "after": false}, "nextto apple_1,table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(electric_refrigerator_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {"reachable electric_refrigerator_1": ["no", 3.419436432681826e-14, 2.8068444175356234e-15, "The image shows a kitchen scene with a robotic arm (the agent) holding an object. The agent's arm is extended towards a countertop. The electric_refrigerator_1 is visible in the background, to the left of the countertop. The distance between the agent and the refrigerator appears to be significant. The agent's arm is not extended towards the refrigerator, and it does not appear to be within the agent's reachable workspace. Therefore, the electric_refrigerator_1 is not in reach of the agent.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent) holding an object. The agent's arm is extended towards a countertop. The electric_refrigerator_1 is visible in the background, to the left of the countertop. The distance between the agent and the refrigerator appears to be significant. The agent's arm is not extended towards the refrigerator, and it does not appear to be within the agent's reachable workspace. Therefore, the electric_refrigerator_1 is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"reachable electric_refrigerator_1": ["yes", 1.6176221874584368e-14, 8.658508006170913e-15, "The image shows a robotic arm holding an apple. The background shows a portion of what appears to be a refrigerator. The question asks if the electric_refrigerator_1 is in reach of the agent. Since the refrigerator is visible in the background and the agent (robotic arm) is capable of movement, it is reasonable to assume that the refrigerator is within the agent's reach.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm holding an apple. The background shows a portion of what appears to be a refrigerator. The question asks if the electric_refrigerator_1 is in reach of the agent. Since the refrigerator is visible in the background and the agent (robotic arm) is capable of movement, it is reasonable to assume that the refrigerator is within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable apple_1": ["yes", 5.365972857024337e-12, 4.991132290452227e-13, "The image shows a robotic arm holding a green apple. The question asks if the apple is in reach of the agent. Since the agent is currently holding the apple, it is clearly within reach.", false, "<explanation>\nThe image shows a robotic arm holding a green apple. The question asks if the apple is in reach of the agent. Since the agent is currently holding the apple, it is clearly within reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable apple_2": {"before": false, "after": false}, "reachable orange_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}], "replans": [{"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable electric_refrigerator_1": ["no", "no"], "holding bread_1": ["yes", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["no", "no"], "holding carrot_2": ["no", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["no", "no"], "open cabinet_1": ["no", "no"], "open electric_refrigerator_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop bread_1,electric_refrigerator_1": ["no", "no"], "ontop countertop_1,bread_1": ["yes", "no"], "ontop countertop_1,carrot_1": ["yes", "no"], "ontop countertop_1,carrot_2": ["yes", "no"], "ontop countertop_1,carrot_3": ["yes", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,electric_refrigerator_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["no", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_2,electric_refrigerator_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["yes", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop carrot_3,electric_refrigerator_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "ontop apple_2,electric_refrigerator_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside bread_1,electric_refrigerator_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,electric_refrigerator_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_1,electric_refrigerator_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_2,electric_refrigerator_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside carrot_3,electric_refrigerator_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "inside apple_2,electric_refrigerator_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto bread_1,electric_refrigerator_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,electric_refrigerator_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["yes", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_1,electric_refrigerator_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_2,electric_refrigerator_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["yes", "no"], "nextto carrot_3,electric_refrigerator_1": ["yes", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_1,electric_refrigerator_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"], "nextto apple_2,electric_refrigerator_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5694444444444444, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5079365079365079, "no_correct": 64, "no_total": 126, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "holding": {"accuracy": 0.7142857142857143, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.7142857142857143, "no_correct": 5, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.8571428571428571, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.84, "no_correct": 42, "no_total": 50}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 14, "no_total": 14}, "nextto": {"accuracy": 0.07142857142857142, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.0, "no_correct": 0, "no_total": 52}}}, "step": 1, "actions": ["navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "navigate-to(apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable apple_1": ["yes", "yes"], "reachable electric_refrigerator_1": ["yes", "yes"], "holding apple_1": ["yes", "yes"], "open electric_refrigerator_1": ["no", "yes"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "nextto apple_1,electric_refrigerator_1": ["yes", "yes"]}, "enum_metrics": {"accuracy": 0.8571428571428571, "yes_accuracy": 0.8, "yes_correct": 4, "yes_total": 5, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 2, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "open": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "ontop": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "nextto": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}}}, "step": 6, "actions": ["place-next-to(apple_1, apple_1)", "open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"]}], "remaining_actions": ["open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, "data/planning/igibson/medium/sorting_groceries_medium.pddl_Beechwood_0_int_24": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(apple_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable apple_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable apple_1": ["yes", 1.9354900711657241e-13, 6.62288242842912e-15, "The image shows a robotic arm (the agent) and several objects on a counter, including an apple labeled \"apple_1\". The robotic arm is positioned close to the counter where the apple is located. Visually, it appears the arm could extend and grasp the apple. Therefore, the apple is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and several objects on a counter, including an apple labeled \"apple_1\". The robotic arm is positioned close to the counter where the apple is located. Visually, it appears the arm could extend and grasp the apple. Therefore, the apple is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable apple_2": ["yes", 5.613325966156643e-14, 2.7947106705662056e-15, "The image shows a robotic arm (the agent) and several objects on a counter, including two apples labeled \"apple_1\" and \"apple_2\", as well as a carrot. The agent is positioned above the counter. I need to determine if \"apple_2\" is within the agent's reach. Visually, \"apple_2\" is close to the agent and appears to be within the range of the robotic arm's movement.", false, "Question: Is the apple_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and several objects on a counter, including two apples labeled \"apple_1\" and \"apple_2\", as well as a carrot. The agent is positioned above the counter. I need to determine if \"apple_2\" is within the agent's reach. Visually, \"apple_2\" is close to the agent and appears to be within the range of the robotic arm's movement.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable electric_refrigerator_1": ["no", 1.2652628341477522e-14, 1.3335770366075246e-15, "The image shows a robotic arm (the agent) and an electric refrigerator labeled as \"electric_refrigerator_1\". The agent is positioned near a countertop with fruits on it. The refrigerator is located on the wall to the left of the agent. Visually, the agent appears to be far enough away from the refrigerator that it would not be able to directly interact with it without moving closer. Therefore, the refrigerator is not in reach of the agent.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and an electric refrigerator labeled as \"electric_refrigerator_1\". The agent is positioned near a countertop with fruits on it. The refrigerator is located on the wall to the left of the agent. Visually, the agent appears to be far enough away from the refrigerator that it would not be able to directly interact with it without moving closer. Therefore, the refrigerator is not in reach of the agent.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable orange_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(apple_1, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_1": ["yes", 1.1985714070544828e-13, 3.030462979083243e-14, "The image shows a robotic arm (the agent) and several objects on a counter, including an apple labeled \"apple_1\". The robotic arm is positioned above the apple, and appears to be grasping it. Therefore, the agent is holding the apple_1.", true, "Question: Is the agent holding the apple_1\n<explanation>\nThe image shows a robotic arm (the agent) and several objects on a counter, including an apple labeled \"apple_1\". The robotic arm is positioned above the apple, and appears to be grasping it. Therefore, the agent is holding the apple_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable apple_1": ["yes", 1.6969890390908932e-13, 5.806777195177916e-15, "The image shows a robotic arm (the agent) and an apple labeled \"apple_1\" on a counter. The robotic arm is positioned close enough to the counter that it could potentially reach the apple. The distance between the arm and the apple appears to be within the arm's range of motion. Therefore, the apple is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and an apple labeled \"apple_1\" on a counter. The robotic arm is positioned close enough to the counter that it could potentially reach the apple. The distance between the arm and the apple appears to be within the arm's range of motion. Therefore, the apple is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(apple_1, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_1": ["yes", 1.1985714070544828e-13, 3.030462979083243e-14, "The image shows a robotic arm (the agent) and several objects on a counter, including an apple labeled \"apple_1\". The robotic arm is positioned above the apple, and appears to be grasping it. Therefore, the agent is holding the apple_1.", true, "Question: Is the agent holding the apple_1\n<explanation>\nThe image shows a robotic arm (the agent) and several objects on a counter, including an apple labeled \"apple_1\". The robotic arm is positioned above the apple, and appears to be grasping it. Therefore, the agent is holding the apple_1.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable apple_1": ["yes", 1.6969890390908932e-13, 5.806777195177916e-15, "The image shows a robotic arm (the agent) and an apple labeled \"apple_1\" on a counter. The robotic arm is positioned close enough to the counter that it could potentially reach the apple. The distance between the arm and the apple appears to be within the arm's range of motion. Therefore, the apple is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and an apple labeled \"apple_1\" on a counter. The robotic arm is positioned close enough to the counter that it could potentially reach the apple. The distance between the arm and the apple appears to be within the arm's range of motion. Therefore, the apple is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable electric_refrigerator_1": ["yes", "no"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["no", "no"], "holding carrot_2": ["no", "no"], "holding carrot_3": ["no", "no"], "holding apple_1": ["yes", "no"], "holding apple_2": ["no", "no"], "open cabinet_1": ["no", "no"], "open electric_refrigerator_1": ["no", "no"], "ontop bread_1,countertop_1": ["no", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop bread_1,electric_refrigerator_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["no", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["no", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_2,electric_refrigerator_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop carrot_3,electric_refrigerator_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "ontop apple_2,electric_refrigerator_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside bread_1,electric_refrigerator_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,electric_refrigerator_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_1,electric_refrigerator_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_2,electric_refrigerator_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside carrot_3,electric_refrigerator_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "inside apple_2,electric_refrigerator_1": ["no", "no"], "nextto bread_1,countertop_1": ["no", "no"], "nextto bread_1,carrot_1": ["no", "no"], "nextto bread_1,carrot_2": ["no", "no"], "nextto bread_1,carrot_3": ["no", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["no", "no"], "nextto bread_1,electric_refrigerator_1": ["no", "no"], "nextto countertop_1,bread_1": ["no", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,electric_refrigerator_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["yes", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_1,electric_refrigerator_1": ["no", "no"], "nextto carrot_2,bread_1": ["no", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_2,electric_refrigerator_1": ["no", "no"], "nextto carrot_3,bread_1": ["no", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["no", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["yes", "no"], "nextto carrot_3,electric_refrigerator_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_1,electric_refrigerator_1": ["yes", "no"], "nextto apple_2,bread_1": ["no", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"], "nextto apple_2,electric_refrigerator_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.7083333333333334, "yes_accuracy": 0.9444444444444444, "yes_correct": 17, "yes_total": 18, "no_accuracy": 0.6746031746031746, "no_correct": 85, "no_total": 126, "predicates": {"reachable": {"accuracy": 0.8888888888888888, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": 0.0, "no_correct": 0, "no_total": 1}, "holding": {"accuracy": 0.8571428571428571, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.8571428571428571, "no_correct": 6, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.9642857142857143, "yes_accuracy": 0.8333333333333334, "yes_correct": 5, "yes_total": 6, "no_accuracy": 0.98, "no_correct": 49, "no_total": 50}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 14, "no_total": 14}, "nextto": {"accuracy": 0.32142857142857145, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.2692307692307692, "no_correct": 14, "no_total": 52}}}, "step": 1, "actions": ["place-next-to(apple_1, apple_1)", "open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable electric_refrigerator_1": ["yes", "no"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["no", "no"], "holding carrot_2": ["no", "no"], "holding carrot_3": ["no", "no"], "holding apple_1": ["yes", "no"], "holding apple_2": ["no", "no"], "open cabinet_1": ["no", "no"], "open electric_refrigerator_1": ["no", "no"], "ontop bread_1,countertop_1": ["no", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop bread_1,electric_refrigerator_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["no", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["no", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_2,electric_refrigerator_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop carrot_3,electric_refrigerator_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "ontop apple_2,electric_refrigerator_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside bread_1,electric_refrigerator_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,electric_refrigerator_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_1,electric_refrigerator_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_2,electric_refrigerator_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside carrot_3,electric_refrigerator_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "inside apple_2,electric_refrigerator_1": ["no", "no"], "nextto bread_1,countertop_1": ["no", "no"], "nextto bread_1,carrot_1": ["no", "no"], "nextto bread_1,carrot_2": ["no", "no"], "nextto bread_1,carrot_3": ["no", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["no", "no"], "nextto bread_1,electric_refrigerator_1": ["no", "no"], "nextto countertop_1,bread_1": ["no", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,electric_refrigerator_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["yes", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_1,electric_refrigerator_1": ["no", "no"], "nextto carrot_2,bread_1": ["no", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_2,electric_refrigerator_1": ["no", "no"], "nextto carrot_3,bread_1": ["no", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["no", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["yes", "no"], "nextto carrot_3,electric_refrigerator_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_1,electric_refrigerator_1": ["yes", "no"], "nextto apple_2,bread_1": ["no", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"], "nextto apple_2,electric_refrigerator_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.7083333333333334, "yes_accuracy": 0.9444444444444444, "yes_correct": 17, "yes_total": 18, "no_accuracy": 0.6746031746031746, "no_correct": 85, "no_total": 126, "predicates": {"reachable": {"accuracy": 0.8888888888888888, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": 0.0, "no_correct": 0, "no_total": 1}, "holding": {"accuracy": 0.8571428571428571, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.8571428571428571, "no_correct": 6, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.9642857142857143, "yes_accuracy": 0.8333333333333334, "yes_correct": 5, "yes_total": 6, "no_accuracy": 0.98, "no_correct": 49, "no_total": 50}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 14, "no_total": 14}, "nextto": {"accuracy": 0.32142857142857145, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.2692307692307692, "no_correct": 14, "no_total": 52}}}, "step": 2, "actions": ["place-next-to(apple_1, apple_1)", "open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"]}], "remaining_actions": ["open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, "data/planning/igibson/medium/sorting_groceries_medium.pddl_Beechwood_0_int_29": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(apple_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable apple_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable apple_1": ["yes", 5.030192842120362e-13, 1.0439833540839757e-14, "The image shows a robotic arm (the agent) and an apple labeled \"apple_1\" on a counter. The robotic arm is positioned such that it appears to be close enough to potentially grasp the apple. The distance between the robotic arm and the apple appears to be within the arm's range of motion. Therefore, the apple_1 is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and an apple labeled \"apple_1\" on a counter. The robotic arm is positioned such that it appears to be close enough to potentially grasp the apple. The distance between the robotic arm and the apple appears to be within the arm's range of motion. Therefore, the apple_1 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable apple_2": ["yes", 3.9367047490780627e-13, 7.210326458887816e-15, "The image shows a robotic arm (the agent) and an apple labeled \"apple_2\". I need to determine if the robotic arm is close enough to the apple to interact with it. The robotic arm is positioned above the counter where the apple is located. Visually, it appears that the arm is within a reasonable distance to grasp the apple. Therefore, the apple is in reach of the agent.", false, "Question: Is the apple_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and an apple labeled \"apple_2\". I need to determine if the robotic arm is close enough to the apple to interact with it. The robotic arm is positioned above the counter where the apple is located. Visually, it appears that the arm is within a reasonable distance to grasp the apple. Therefore, the apple is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable electric_refrigerator_1": ["no", 5.818162927351614e-14, 2.896692802140913e-15, "The image shows a kitchen scene with a robotic arm (the agent). The agent is holding an apple. The image also shows an electric refrigerator labeled as \"electric_refrigerator_1\". To determine if the refrigerator is in reach, I need to assess the distance between the agent and the refrigerator. The agent is positioned near the counter with apples, and the refrigerator is on the wall to the left of the agent. Visually, the agent appears to be far enough away from the refrigerator that it would not be considered \"in reach\" without moving closer.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). The agent is holding an apple. The image also shows an electric refrigerator labeled as \"electric_refrigerator_1\". To determine if the refrigerator is in reach, I need to assess the distance between the agent and the refrigerator. The agent is positioned near the counter with apples, and the refrigerator is on the wall to the left of the agent. Visually, the agent appears to be far enough away from the refrigerator that it would not be considered \"in reach\" without moving closer.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable orange_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "navigate-to(electric_refrigerator_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {"reachable electric_refrigerator_1": ["no", 5.818162927351614e-14, 2.896692802140913e-15, "The image shows a kitchen scene with a robotic arm (the agent). The agent is holding an apple. The image also shows an electric refrigerator labeled as \"electric_refrigerator_1\". To determine if the refrigerator is in reach, I need to assess the distance between the agent and the refrigerator. The agent is positioned near the counter with apples, and the refrigerator is on the wall to the left of the agent. Visually, the agent appears to be far enough away from the refrigerator that it would not be considered \"in reach\" without moving closer.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a kitchen scene with a robotic arm (the agent). The agent is holding an apple. The image also shows an electric refrigerator labeled as \"electric_refrigerator_1\". To determine if the refrigerator is in reach, I need to assess the distance between the agent and the refrigerator. The agent is positioned near the counter with apples, and the refrigerator is on the wall to the left of the agent. Visually, the agent appears to be far enough away from the refrigerator that it would not be considered \"in reach\" without moving closer.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": {"reachable electric_refrigerator_1": ["yes", 2.3501425482877654e-14, 3.604059969030109e-15, "The image shows a robotic arm (the agent) positioned very close to a white door. To the right of the door, there is a black appliance, which appears to be a refrigerator. The robotic arm is directly in front of the refrigerator. Therefore, the refrigerator is in reach of the agent.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned very close to a white door. To the right of the door, there is a black appliance, which appears to be a refrigerator. The robotic arm is directly in front of the refrigerator. Therefore, the refrigerator is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"reachable apple_1": {"before": true, "after": false}, "reachable apple_2": {"before": true, "after": false}, "reachable orange_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "open-container(electric_refrigerator_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable electric_refrigerator_1": ["yes", 3.8579782543537305e-14, 5.2212063780820734e-15, "The image shows a robotic arm (the agent) positioned very close to a white door. To the right of the door, there is a black appliance, which appears to be a refrigerator. The robotic arm is directly in front of the refrigerator, and appears to be close enough to interact with it. Therefore, the refrigerator is in reach of the agent.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned very close to a white door. To the right of the door, there is a black appliance, which appears to be a refrigerator. The robotic arm is directly in front of the refrigerator, and appears to be close enough to interact with it. Therefore, the refrigerator is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "open electric_refrigerator_1": ["no", 1.8361411024438168e-13, 6.754784855371107e-14, "The image shows a white door with a black handle. The robotic arm is near the door. The door appears to be closed, as there is no visible interior of a refrigerator. Therefore, the electric_refrigerator_1 is not open.", true, "Question: Is the electric_refrigerator_1 open\n<explanation>\nThe image shows a white door with a black handle. The robotic arm is near the door. The door appears to be closed, as there is no visible interior of a refrigerator. Therefore, the electric_refrigerator_1 is not open.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding apple_1": [true, false, false], "holding apple_2": [true, false, false], "holding orange_1": [true, false, false], "all_correct": true}, "effects_results": {"open electric_refrigerator_1": ["no", 1.5246041462722154e-13, 2.513647113806111e-13, "The image shows a cabinet with shelves inside. There is a robotic arm inside the cabinet. The cabinet does not appear to be a refrigerator. Therefore, the electric_refrigerator_1 is not visible in the image and cannot be open.", false, "Question: Is the electric_refrigerator_1 open\n<explanation>\nThe image shows a cabinet with shelves inside. There is a robotic arm inside the cabinet. The cabinet does not appear to be a refrigerator. Therefore, the electric_refrigerator_1 is not visible in the image and cannot be open.\n</explanation>\n<answer>\nNo\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {}}, "action_info": "success"}, {"action": "navigate-to(apple_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable apple_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable apple_1": ["yes", 4.98878445064771e-13, 1.32946581396726e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable apple_2": ["yes", 6.40572610146467e-13, 1.7070680196555436e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including apples labeled \"apple_1\" and \"apple_2\". The agent's gripper is positioned close to \"apple_2\". Based on the image, it appears that the agent is close enough to grasp \"apple_2\". Therefore, \"apple_2\" is in reach of the agent.", false, "Question: Is the apple_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including apples labeled \"apple_1\" and \"apple_2\". The agent's gripper is positioned close to \"apple_2\". Based on the image, it appears that the agent is close enough to grasp \"apple_2\". Therefore, \"apple_2\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable orange_1": {"before": false, "after": false}, "reachable electric_refrigerator_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["no", 4.612894810053503e-13, 6.242874056247572e-14, "The image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.", false, "Question: Is the agent holding the apple_2?\n<explanation>\nThe image shows a robotic arm (the agent) holding an object. The object appears to be a hair dryer. The image also shows several apples labeled as apple_1 and apple_2. However, the agent is not holding apple_2; it is holding the hair dryer.\n</explanation>\n<answer>\nNo\n</answer>", true], "reachable apple_1": ["yes", 6.405726643565757e-13, 1.707068189062133e-14, "The image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a countertop. There are several objects on the countertop, including an apple labeled \"apple_1\". The robotic arm is directly above the countertop and appears to be close enough to potentially grasp \"apple_1\". Therefore, \"apple_1\" is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}], "replans": [{"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable broccoli_1": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "reachable electric_refrigerator_1": ["no", "no"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["no", "no"], "holding carrot_2": ["no", "no"], "holding carrot_3": ["no", "no"], "holding broccoli_1": ["no", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["no", "no"], "open cabinet_1": ["no", "no"], "open electric_refrigerator_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,broccoli_1": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop bread_1,electric_refrigerator_1": ["no", "no"], "ontop countertop_1,bread_1": ["yes", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,broccoli_1": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop countertop_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["no", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,broccoli_1": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["yes", "no"], "ontop carrot_2,broccoli_1": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_2,electric_refrigerator_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,broccoli_1": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop carrot_3,electric_refrigerator_1": ["no", "no"], "ontop broccoli_1,bread_1": ["no", "no"], "ontop broccoli_1,countertop_1": ["no", "yes"], "ontop broccoli_1,carrot_1": ["no", "no"], "ontop broccoli_1,carrot_2": ["no", "no"], "ontop broccoli_1,carrot_3": ["no", "no"], "ontop broccoli_1,apple_1": ["no", "no"], "ontop broccoli_1,apple_2": ["no", "no"], "ontop broccoli_1,cabinet_1": ["no", "no"], "ontop broccoli_1,electric_refrigerator_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,broccoli_1": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,broccoli_1": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "ontop apple_2,electric_refrigerator_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside bread_1,electric_refrigerator_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside countertop_1,electric_refrigerator_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_1,electric_refrigerator_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_2,electric_refrigerator_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside carrot_3,electric_refrigerator_1": ["no", "no"], "inside broccoli_1,cabinet_1": ["no", "no"], "inside broccoli_1,electric_refrigerator_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "inside apple_2,electric_refrigerator_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,broccoli_1": ["no", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["no", "no"], "nextto bread_1,electric_refrigerator_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,broccoli_1": ["no", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto countertop_1,electric_refrigerator_1": ["yes", "no"], "nextto carrot_1,bread_1": ["no", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["yes", "no"], "nextto carrot_1,broccoli_1": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_1,electric_refrigerator_1": ["no", "no"], "nextto carrot_2,bread_1": ["no", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["no", "yes"], "nextto carrot_2,broccoli_1": ["no", "no"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["no", "no"], "nextto carrot_2,electric_refrigerator_1": ["no", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["no", "yes"], "nextto carrot_3,broccoli_1": ["yes", "no"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto carrot_3,electric_refrigerator_1": ["no", "no"], "nextto broccoli_1,bread_1": ["no", "no"], "nextto broccoli_1,countertop_1": ["yes", "no"], "nextto broccoli_1,carrot_1": ["yes", "no"], "nextto broccoli_1,carrot_2": ["yes", "no"], "nextto broccoli_1,carrot_3": ["yes", "no"], "nextto broccoli_1,apple_1": ["yes", "no"], "nextto broccoli_1,apple_2": ["yes", "yes"], "nextto broccoli_1,cabinet_1": ["no", "no"], "nextto broccoli_1,electric_refrigerator_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["no", "no"], "nextto apple_1,broccoli_1": ["no", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_1,electric_refrigerator_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,broccoli_1": ["no", "yes"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["no", "no"], "nextto apple_2,electric_refrigerator_1": ["no", "no"]}, "enum_metrics": {"accuracy": 0.6944444444444444, "yes_accuracy": 0.8181818181818182, "yes_correct": 18, "yes_total": 22, "no_accuracy": 0.6772151898734177, "no_correct": 107, "no_total": 158, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 9, "yes_total": 9, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 8, "no_total": 8}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 2, "no_total": 2}, "ontop": {"accuracy": 0.9305555555555556, "yes_accuracy": 0.8571428571428571, "yes_correct": 6, "yes_total": 7, "no_accuracy": 0.9384615384615385, "no_correct": 61, "no_total": 65}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 16, "no_total": 16}, "nextto": {"accuracy": 0.3055555555555556, "yes_accuracy": 0.5, "yes_correct": 3, "yes_total": 6, "no_accuracy": 0.2878787878787879, "no_correct": 19, "no_total": 66}}}, "step": 1, "actions": ["navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "navigate-to(apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable electric_refrigerator_1": ["no", "yes"], "open electric_refrigerator_1": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0, "predicates": {"reachable": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "open": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}}}, "step": 3, "actions": ["navigate-to(apple_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "navigate-to(apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 4, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 5, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 6, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 7, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 8, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 9, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 10, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 11, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 12, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 13, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 14, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 15, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 16, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 17, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 18, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 19, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "reachable cabinet_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_2": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["yes", "no"], "open cabinet_1": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,cabinet_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,cabinet_1": ["yes", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,carrot_2": ["yes", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,cabinet_1": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_1": ["yes", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,cabinet_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,cabinet_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,cabinet_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,cabinet_1": ["no", "no"], "inside bread_1,cabinet_1": ["no", "no"], "inside countertop_1,cabinet_1": ["no", "no"], "inside carrot_1,cabinet_1": ["no", "no"], "inside carrot_2,cabinet_1": ["no", "no"], "inside carrot_3,cabinet_1": ["no", "no"], "inside apple_1,cabinet_1": ["no", "no"], "inside apple_2,cabinet_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "no"], "nextto bread_1,carrot_3": ["yes", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,cabinet_1": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,cabinet_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "yes"], "nextto carrot_1,cabinet_1": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "no"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,cabinet_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "no"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,cabinet_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_1,cabinet_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "yes"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "no"], "nextto apple_2,cabinet_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5867768595041323, "yes_accuracy": 1.0, "yes_correct": 18, "yes_total": 18, "no_accuracy": 0.5145631067961165, "no_correct": 53, "no_total": 103, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 8, "yes_total": 8, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.42857142857142855, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.42857142857142855, "no_correct": 3, "no_total": 7}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.9387755102040817, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.9302325581395349, "no_correct": 40, "no_total": 43}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "nextto": {"accuracy": 0.12244897959183673, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.044444444444444446, "no_correct": 2, "no_total": 45}}}, "step": 20, "actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}], "remaining_actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, "data/planning/igibson/medium/sorting_groceries_medium.pddl_Pomaria_1_int_0": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable apple_1": ["yes", 2.5387618439801085e-13, 6.7655706341082644e-15, "The image shows a robotic arm (the agent) and several objects, including apples labeled \"apple_2\" and \"apple_1\". The agent is positioned near a table with objects on it. I need to determine if \"apple_1\" is within the agent's reach. Looking at the image, \"apple_1\" is on the counter, and the robotic arm is close enough to potentially reach it. Therefore, the answer is \"Yes\".", false, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and several objects, including apples labeled \"apple_2\" and \"apple_1\". The agent is positioned near a table with objects on it. I need to determine if \"apple_1\" is within the agent's reach. Looking at the image, \"apple_1\" is on the counter, and the robotic arm is close enough to potentially reach it. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "navigate-to(electric_refrigerator_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable electric_refrigerator_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable electric_refrigerator_1": ["yes", 2.3327029869367466e-14, 4.053629905565381e-15, "The image shows a robotic arm (the agent) and a refrigerator labeled \"electric_refrigerator_1\". The robotic arm is positioned relatively close to the refrigerator. Based on the image, it appears the agent can reach the refrigerator.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a refrigerator labeled \"electric_refrigerator_1\". The robotic arm is positioned relatively close to the refrigerator. Based on the image, it appears the agent can reach the refrigerator.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable apple_1": ["yes", 3.2275844865682635e-13, 2.649362527322799e-14, "The image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if apple_1 is within the agent's reach. Based on the image, apple_1 is close to the agent and appears to be within the range of the robotic arm's movement.", false, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if apple_1 is within the agent's reach. Based on the image, apple_1 is close to the agent and appears to be within the range of the robotic arm's movement.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable apple_2": ["yes", 2.848332463986636e-13, 2.649361849696441e-14, "The image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if \"apple_2\" is within the agent's reach. Based on the image, \"apple_2\" is close to the agent and appears to be within the range of the robotic arm's movement.", false, "Question: Is the apple_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if \"apple_2\" is within the agent's reach. Based on the image, \"apple_2\" is close to the agent and appears to be within the range of the robotic arm's movement.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable orange_1": {"before": true, "after": false}, "reachable table_1": {"before": true, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["yes", 5.545271612229265e-14, 1.4020642455467736e-14, "The image shows a robotic arm, which is the agent. The agent is holding an object. The object is labeled as \"apple_2\" in the image. Therefore, the agent is holding the apple_2.", true, "Question: Is the agent holding the apple_2\n<explanation>\nThe image shows a robotic arm, which is the agent. The agent is holding an object. The object is labeled as \"apple_2\" in the image. Therefore, the agent is holding the apple_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable apple_1": ["yes", 2.6104636573036355e-13, 2.428109389983682e-14, "The image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if apple_1 is within the agent's reach. Based on the image, apple_1 is close to the agent and appears to be within the range of the robotic arm's movement.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if apple_1 is within the agent's reach. Based on the image, apple_1 is close to the agent and appears to be within the range of the robotic arm's movement.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["yes", 5.545271612229265e-14, 1.4020642455467736e-14, "The image shows a robotic arm, which is the agent. The agent is holding an object. The object is labeled as \"apple_2\" in the image. Therefore, the agent is holding the apple_2.", true, "Question: Is the agent holding the apple_2\n<explanation>\nThe image shows a robotic arm, which is the agent. The agent is holding an object. The object is labeled as \"apple_2\" in the image. Therefore, the agent is holding the apple_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable apple_1": ["yes", 2.6104636573036355e-13, 2.428109389983682e-14, "The image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if apple_1 is within the agent's reach. Based on the image, apple_1 is close to the agent and appears to be within the range of the robotic arm's movement.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if apple_1 is within the agent's reach. Based on the image, apple_1 is close to the agent and appears to be within the range of the robotic arm's movement.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable bread_1": ["yes", "no"], "reachable countertop_1": ["yes", "no"], "reachable flour_1": ["no", "no"], "reachable milk_1": ["yes", "yes"], "reachable chair_1": ["yes", "yes"], "reachable meat_1": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "reachable cheese_1": ["yes", "yes"], "reachable yogurt_1": ["yes", "yes"], "reachable soup_1": ["yes", "yes"], "reachable carrot_1": ["yes", "no"], "reachable carrot_2": ["yes", "no"], "reachable carrot_3": ["yes", "no"], "reachable apple_1": ["yes", "no"], "reachable apple_2": ["yes", "no"], "reachable orange_1": ["yes", "yes"], "reachable orange_3": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding flour_1": ["no", "no"], "holding meat_1": ["no", "no"], "holding cheese_1": ["no", "no"], "holding yogurt_1": ["no", "no"], "holding soup_1": ["no", "no"], "holding carrot_1": ["no", "no"], "holding carrot_2": ["no", "no"], "holding carrot_3": ["no", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["no", "no"], "holding orange_1": ["no", "no"], "holding orange_3": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,flour_1": ["no", "no"], "ontop bread_1,milk_1": ["no", "no"], "ontop bread_1,chair_1": ["no", "no"], "ontop bread_1,meat_1": ["no", "no"], "ontop bread_1,table_1": ["no", "no"], "ontop bread_1,cheese_1": ["no", "no"], "ontop bread_1,yogurt_1": ["no", "no"], "ontop bread_1,soup_1": ["no", "no"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,orange_1": ["no", "no"], "ontop bread_1,orange_3": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,flour_1": ["no", "no"], "ontop countertop_1,milk_1": ["no", "no"], "ontop countertop_1,chair_1": ["no", "no"], "ontop countertop_1,meat_1": ["no", "no"], "ontop countertop_1,table_1": ["no", "no"], "ontop countertop_1,cheese_1": ["no", "no"], "ontop countertop_1,yogurt_1": ["no", "no"], "ontop countertop_1,soup_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,orange_1": ["no", "no"], "ontop countertop_1,orange_3": ["no", "no"], "ontop flour_1,bread_1": ["no", "no"], "ontop flour_1,countertop_1": ["yes", "no"], "ontop flour_1,milk_1": ["no", "no"], "ontop flour_1,chair_1": ["no", "no"], "ontop flour_1,meat_1": ["no", "no"], "ontop flour_1,table_1": ["no", "no"], "ontop flour_1,cheese_1": ["no", "no"], "ontop flour_1,yogurt_1": ["no", "no"], "ontop flour_1,soup_1": ["no", "no"], "ontop flour_1,carrot_1": ["no", "no"], "ontop flour_1,carrot_2": ["no", "no"], "ontop flour_1,carrot_3": ["no", "no"], "ontop flour_1,apple_1": ["no", "no"], "ontop flour_1,apple_2": ["no", "no"], "ontop flour_1,orange_1": ["no", "no"], "ontop flour_1,orange_3": ["no", "no"], "ontop meat_1,bread_1": ["no", "no"], "ontop meat_1,countertop_1": ["yes", "no"], "ontop meat_1,flour_1": ["no", "no"], "ontop meat_1,milk_1": ["no", "no"], "ontop meat_1,chair_1": ["no", "no"], "ontop meat_1,table_1": ["no", "yes"], "ontop meat_1,cheese_1": ["no", "no"], "ontop meat_1,yogurt_1": ["no", "no"], "ontop meat_1,soup_1": ["no", "no"], "ontop meat_1,carrot_1": ["no", "no"], "ontop meat_1,carrot_2": ["no", "no"], "ontop meat_1,carrot_3": ["no", "no"], "ontop meat_1,apple_1": ["no", "no"], "ontop meat_1,apple_2": ["no", "no"], "ontop meat_1,orange_1": ["no", "no"], "ontop meat_1,orange_3": ["no", "no"], "ontop cheese_1,bread_1": ["no", "no"], "ontop cheese_1,countertop_1": ["yes", "no"], "ontop cheese_1,flour_1": ["no", "no"], "ontop cheese_1,milk_1": ["no", "no"], "ontop cheese_1,chair_1": ["no", "no"], "ontop cheese_1,meat_1": ["no", "no"], "ontop cheese_1,table_1": ["yes", "yes"], "ontop cheese_1,yogurt_1": ["no", "no"], "ontop cheese_1,soup_1": ["no", "no"], "ontop cheese_1,carrot_1": ["no", "no"], "ontop cheese_1,carrot_2": ["no", "no"], "ontop cheese_1,carrot_3": ["no", "no"], "ontop cheese_1,apple_1": ["no", "no"], "ontop cheese_1,apple_2": ["no", "no"], "ontop cheese_1,orange_1": ["no", "no"], "ontop cheese_1,orange_3": ["no", "no"], "ontop yogurt_1,bread_1": ["no", "no"], "ontop yogurt_1,countertop_1": ["yes", "no"], "ontop yogurt_1,flour_1": ["no", "no"], "ontop yogurt_1,milk_1": ["no", "no"], "ontop yogurt_1,chair_1": ["no", "no"], "ontop yogurt_1,meat_1": ["no", "no"], "ontop yogurt_1,table_1": ["no", "yes"], "ontop yogurt_1,cheese_1": ["no", "no"], "ontop yogurt_1,soup_1": ["no", "no"], "ontop yogurt_1,carrot_1": ["no", "no"], "ontop yogurt_1,carrot_2": ["no", "no"], "ontop yogurt_1,carrot_3": ["no", "no"], "ontop yogurt_1,apple_1": ["no", "no"], "ontop yogurt_1,apple_2": ["no", "no"], "ontop yogurt_1,orange_1": ["no", "no"], "ontop yogurt_1,orange_3": ["no", "no"], "ontop soup_1,bread_1": ["no", "no"], "ontop soup_1,countertop_1": ["no", "no"], "ontop soup_1,flour_1": ["no", "no"], "ontop soup_1,milk_1": ["no", "no"], "ontop soup_1,chair_1": ["no", "no"], "ontop soup_1,meat_1": ["no", "no"], "ontop soup_1,table_1": ["yes", "yes"], "ontop soup_1,cheese_1": ["no", "no"], "ontop soup_1,yogurt_1": ["no", "no"], "ontop soup_1,carrot_1": ["no", "no"], "ontop soup_1,carrot_2": ["no", "no"], "ontop soup_1,carrot_3": ["no", "no"], "ontop soup_1,apple_1": ["no", "no"], "ontop soup_1,apple_2": ["no", "no"], "ontop soup_1,orange_1": ["no", "no"], "ontop soup_1,orange_3": ["no", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,flour_1": ["no", "no"], "ontop carrot_1,milk_1": ["no", "no"], "ontop carrot_1,chair_1": ["no", "no"], "ontop carrot_1,meat_1": ["no", "no"], "ontop carrot_1,table_1": ["no", "no"], "ontop carrot_1,cheese_1": ["no", "no"], "ontop carrot_1,yogurt_1": ["no", "no"], "ontop carrot_1,soup_1": ["no", "no"], "ontop carrot_1,carrot_2": ["no", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,orange_1": ["no", "no"], "ontop carrot_1,orange_3": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,flour_1": ["no", "no"], "ontop carrot_2,milk_1": ["no", "no"], "ontop carrot_2,chair_1": ["no", "no"], "ontop carrot_2,meat_1": ["no", "no"], "ontop carrot_2,table_1": ["no", "no"], "ontop carrot_2,cheese_1": ["no", "no"], "ontop carrot_2,yogurt_1": ["no", "no"], "ontop carrot_2,soup_1": ["no", "no"], "ontop carrot_2,carrot_1": ["no", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,orange_1": ["no", "no"], "ontop carrot_2,orange_3": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,flour_1": ["no", "no"], "ontop carrot_3,milk_1": ["no", "no"], "ontop carrot_3,chair_1": ["no", "no"], "ontop carrot_3,meat_1": ["no", "no"], "ontop carrot_3,table_1": ["no", "no"], "ontop carrot_3,cheese_1": ["no", "no"], "ontop carrot_3,yogurt_1": ["no", "no"], "ontop carrot_3,soup_1": ["no", "no"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,orange_1": ["no", "no"], "ontop carrot_3,orange_3": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,flour_1": ["no", "no"], "ontop apple_1,milk_1": ["no", "no"], "ontop apple_1,chair_1": ["no", "no"], "ontop apple_1,meat_1": ["no", "no"], "ontop apple_1,table_1": ["no", "no"], "ontop apple_1,cheese_1": ["no", "no"], "ontop apple_1,yogurt_1": ["no", "no"], "ontop apple_1,soup_1": ["no", "no"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,orange_1": ["no", "no"], "ontop apple_1,orange_3": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,flour_1": ["no", "no"], "ontop apple_2,milk_1": ["no", "no"], "ontop apple_2,chair_1": ["no", "no"], "ontop apple_2,meat_1": ["no", "no"], "ontop apple_2,table_1": ["no", "no"], "ontop apple_2,cheese_1": ["no", "no"], "ontop apple_2,yogurt_1": ["no", "no"], "ontop apple_2,soup_1": ["no", "no"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,orange_1": ["no", "no"], "ontop apple_2,orange_3": ["no", "no"], "ontop orange_1,bread_1": ["no", "no"], "ontop orange_1,countertop_1": ["no", "no"], "ontop orange_1,flour_1": ["no", "no"], "ontop orange_1,milk_1": ["no", "no"], "ontop orange_1,chair_1": ["no", "no"], "ontop orange_1,meat_1": ["no", "no"], "ontop orange_1,table_1": ["yes", "yes"], "ontop orange_1,cheese_1": ["no", "no"], "ontop orange_1,yogurt_1": ["no", "no"], "ontop orange_1,soup_1": ["no", "no"], "ontop orange_1,carrot_1": ["no", "no"], "ontop orange_1,carrot_2": ["no", "no"], "ontop orange_1,carrot_3": ["no", "no"], "ontop orange_1,apple_1": ["no", "no"], "ontop orange_1,apple_2": ["no", "no"], "ontop orange_1,orange_3": ["no", "no"], "ontop orange_3,bread_1": ["no", "no"], "ontop orange_3,countertop_1": ["no", "no"], "ontop orange_3,flour_1": ["no", "no"], "ontop orange_3,milk_1": ["no", "no"], "ontop orange_3,chair_1": ["no", "no"], "ontop orange_3,meat_1": ["no", "no"], "ontop orange_3,table_1": ["yes", "yes"], "ontop orange_3,cheese_1": ["no", "no"], "ontop orange_3,yogurt_1": ["no", "no"], "ontop orange_3,soup_1": ["no", "no"], "ontop orange_3,carrot_1": ["no", "no"], "ontop orange_3,carrot_2": ["no", "no"], "ontop orange_3,carrot_3": ["no", "no"], "ontop orange_3,apple_1": ["no", "no"], "ontop orange_3,apple_2": ["no", "no"], "ontop orange_3,orange_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,flour_1": ["no", "no"], "nextto bread_1,milk_1": ["no", "no"], "nextto bread_1,chair_1": ["no", "no"], "nextto bread_1,meat_1": ["no", "no"], "nextto bread_1,table_1": ["yes", "no"], "nextto bread_1,cheese_1": ["no", "no"], "nextto bread_1,yogurt_1": ["no", "no"], "nextto bread_1,soup_1": ["no", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "yes"], "nextto bread_1,carrot_3": ["yes", "yes"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,orange_1": ["no", "no"], "nextto bread_1,orange_3": ["no", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,flour_1": ["yes", "no"], "nextto countertop_1,milk_1": ["no", "no"], "nextto countertop_1,chair_1": ["no", "no"], "nextto countertop_1,meat_1": ["yes", "no"], "nextto countertop_1,table_1": ["yes", "no"], "nextto countertop_1,cheese_1": ["no", "no"], "nextto countertop_1,yogurt_1": ["no", "no"], "nextto countertop_1,soup_1": ["no", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,orange_1": ["no", "no"], "nextto countertop_1,orange_3": ["no", "no"], "nextto flour_1,bread_1": ["yes", "no"], "nextto flour_1,countertop_1": ["yes", "no"], "nextto flour_1,milk_1": ["no", "no"], "nextto flour_1,chair_1": ["no", "no"], "nextto flour_1,meat_1": ["no", "no"], "nextto flour_1,table_1": ["no", "no"], "nextto flour_1,cheese_1": ["no", "no"], "nextto flour_1,yogurt_1": ["no", "no"], "nextto flour_1,soup_1": ["no", "no"], "nextto flour_1,carrot_1": ["yes", "no"], "nextto flour_1,carrot_2": ["yes", "no"], "nextto flour_1,carrot_3": ["yes", "no"], "nextto flour_1,apple_1": ["yes", "no"], "nextto flour_1,apple_2": ["no", "no"], "nextto flour_1,orange_1": ["no", "no"], "nextto flour_1,orange_3": ["no", "no"], "nextto meat_1,bread_1": ["yes", "no"], "nextto meat_1,countertop_1": ["yes", "no"], "nextto meat_1,flour_1": ["no", "no"], "nextto meat_1,milk_1": ["no", "no"], "nextto meat_1,chair_1": ["yes", "no"], "nextto meat_1,table_1": ["no", "no"], "nextto meat_1,cheese_1": ["yes", "no"], "nextto meat_1,yogurt_1": ["no", "no"], "nextto meat_1,soup_1": ["no", "no"], "nextto meat_1,carrot_1": ["yes", "no"], "nextto meat_1,carrot_2": ["yes", "no"], "nextto meat_1,carrot_3": ["yes", "no"], "nextto meat_1,apple_1": ["yes", "no"], "nextto meat_1,apple_2": ["yes", "no"], "nextto meat_1,orange_1": ["no", "no"], "nextto meat_1,orange_3": ["no", "yes"], "nextto cheese_1,bread_1": ["yes", "no"], "nextto cheese_1,countertop_1": ["no", "no"], "nextto cheese_1,flour_1": ["no", "no"], "nextto cheese_1,milk_1": ["yes", "no"], "nextto cheese_1,chair_1": ["no", "no"], "nextto cheese_1,meat_1": ["no", "no"], "nextto cheese_1,table_1": ["yes", "no"], "nextto cheese_1,yogurt_1": ["yes", "no"], "nextto cheese_1,soup_1": ["yes", "yes"], "nextto cheese_1,carrot_1": ["no", "no"], "nextto cheese_1,carrot_2": ["no", "no"], "nextto cheese_1,carrot_3": ["no", "no"], "nextto cheese_1,apple_1": ["no", "no"], "nextto cheese_1,apple_2": ["no", "no"], "nextto cheese_1,orange_1": ["yes", "yes"], "nextto cheese_1,orange_3": ["yes", "no"], "nextto yogurt_1,bread_1": ["no", "no"], "nextto yogurt_1,countertop_1": ["no", "no"], "nextto yogurt_1,flour_1": ["no", "no"], "nextto yogurt_1,milk_1": ["yes", "no"], "nextto yogurt_1,chair_1": ["yes", "no"], "nextto yogurt_1,meat_1": ["yes", "no"], "nextto yogurt_1,table_1": ["yes", "no"], "nextto yogurt_1,cheese_1": ["yes", "no"], "nextto yogurt_1,soup_1": ["yes", "no"], "nextto yogurt_1,carrot_1": ["no", "no"], "nextto yogurt_1,carrot_2": ["no", "no"], "nextto yogurt_1,carrot_3": ["no", "no"], "nextto yogurt_1,apple_1": ["no", "no"], "nextto yogurt_1,apple_2": ["no", "no"], "nextto yogurt_1,orange_1": ["yes", "no"], "nextto yogurt_1,orange_3": ["yes", "no"], "nextto soup_1,bread_1": ["yes", "no"], "nextto soup_1,countertop_1": ["no", "no"], "nextto soup_1,flour_1": ["no", "no"], "nextto soup_1,milk_1": ["no", "no"], "nextto soup_1,chair_1": ["no", "no"], "nextto soup_1,meat_1": ["no", "no"], "nextto soup_1,table_1": ["yes", "no"], "nextto soup_1,cheese_1": ["yes", "yes"], "nextto soup_1,yogurt_1": ["yes", "no"], "nextto soup_1,carrot_1": ["no", "no"], "nextto soup_1,carrot_2": ["no", "no"], "nextto soup_1,carrot_3": ["no", "no"], "nextto soup_1,apple_1": ["no", "no"], "nextto soup_1,apple_2": ["no", "no"], "nextto soup_1,orange_1": ["yes", "no"], "nextto soup_1,orange_3": ["yes", "no"], "nextto carrot_1,bread_1": ["no", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,flour_1": ["no", "no"], "nextto carrot_1,milk_1": ["no", "no"], "nextto carrot_1,chair_1": ["no", "no"], "nextto carrot_1,meat_1": ["no", "no"], "nextto carrot_1,table_1": ["yes", "no"], "nextto carrot_1,cheese_1": ["no", "no"], "nextto carrot_1,yogurt_1": ["no", "no"], "nextto carrot_1,soup_1": ["no", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "no"], "nextto carrot_1,orange_1": ["no", "no"], "nextto carrot_1,orange_3": ["no", "no"], "nextto carrot_2,bread_1": ["yes", "yes"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,flour_1": ["yes", "no"], "nextto carrot_2,milk_1": ["no", "no"], "nextto carrot_2,chair_1": ["no", "no"], "nextto carrot_2,meat_1": ["yes", "no"], "nextto carrot_2,table_1": ["yes", "no"], "nextto carrot_2,cheese_1": ["yes", "no"], "nextto carrot_2,yogurt_1": ["no", "no"], "nextto carrot_2,soup_1": ["no", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["no", "yes"], "nextto carrot_2,apple_1": ["yes", "yes"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,orange_1": ["no", "no"], "nextto carrot_2,orange_3": ["no", "no"], "nextto carrot_3,bread_1": ["yes", "yes"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,flour_1": ["yes", "no"], "nextto carrot_3,milk_1": ["no", "no"], "nextto carrot_3,chair_1": ["no", "no"], "nextto carrot_3,meat_1": ["yes", "no"], "nextto carrot_3,table_1": ["yes", "no"], "nextto carrot_3,cheese_1": ["no", "no"], "nextto carrot_3,yogurt_1": ["no", "no"], "nextto carrot_3,soup_1": ["no", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["no", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,orange_1": ["yes", "no"], "nextto carrot_3,orange_3": ["yes", "no"], "nextto apple_1,bread_1": ["no", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,flour_1": ["yes", "no"], "nextto apple_1,milk_1": ["no", "no"], "nextto apple_1,chair_1": ["no", "no"], "nextto apple_1,meat_1": ["yes", "no"], "nextto apple_1,table_1": ["yes", "no"], "nextto apple_1,cheese_1": ["no", "no"], "nextto apple_1,yogurt_1": ["no", "no"], "nextto apple_1,soup_1": ["no", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "yes"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "yes"], "nextto apple_1,orange_1": ["no", "no"], "nextto apple_1,orange_3": ["no", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,flour_1": ["yes", "no"], "nextto apple_2,milk_1": ["no", "no"], "nextto apple_2,chair_1": ["no", "no"], "nextto apple_2,meat_1": ["yes", "no"], "nextto apple_2,table_1": ["yes", "no"], "nextto apple_2,cheese_1": ["yes", "no"], "nextto apple_2,yogurt_1": ["yes", "no"], "nextto apple_2,soup_1": ["no", "no"], "nextto apple_2,carrot_1": ["yes", "no"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "yes"], "nextto apple_2,orange_1": ["no", "no"], "nextto apple_2,orange_3": ["no", "no"], "nextto orange_1,bread_1": ["yes", "no"], "nextto orange_1,countertop_1": ["no", "no"], "nextto orange_1,flour_1": ["yes", "no"], "nextto orange_1,milk_1": ["yes", "no"], "nextto orange_1,chair_1": ["yes", "no"], "nextto orange_1,meat_1": ["yes", "no"], "nextto orange_1,table_1": ["yes", "no"], "nextto orange_1,cheese_1": ["yes", "yes"], "nextto orange_1,yogurt_1": ["yes", "no"], "nextto orange_1,soup_1": ["yes", "no"], "nextto orange_1,carrot_1": ["no", "no"], "nextto orange_1,carrot_2": ["no", "no"], "nextto orange_1,carrot_3": ["yes", "no"], "nextto orange_1,apple_1": ["no", "no"], "nextto orange_1,apple_2": ["no", "no"], "nextto orange_1,orange_3": ["yes", "no"], "nextto orange_3,bread_1": ["yes", "no"], "nextto orange_3,countertop_1": ["no", "no"], "nextto orange_3,flour_1": ["yes", "no"], "nextto orange_3,milk_1": ["yes", "no"], "nextto orange_3,chair_1": ["yes", "yes"], "nextto orange_3,meat_1": ["yes", "yes"], "nextto orange_3,table_1": ["yes", "no"], "nextto orange_3,cheese_1": ["yes", "no"], "nextto orange_3,yogurt_1": ["yes", "no"], "nextto orange_3,soup_1": ["yes", "no"], "nextto orange_3,carrot_1": ["no", "no"], "nextto orange_3,carrot_2": ["no", "no"], "nextto orange_3,carrot_3": ["yes", "no"], "nextto orange_3,apple_1": ["no", "no"], "nextto orange_3,apple_2": ["no", "no"], "nextto orange_3,orange_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.7515657620041754, "yes_accuracy": 0.868421052631579, "yes_correct": 33, "yes_total": 38, "no_accuracy": 0.7414965986394558, "no_correct": 327, "no_total": 441, "predicates": {"reachable": {"accuracy": 0.5882352941176471, "yes_accuracy": 1.0, "yes_correct": 9, "yes_total": 9, "no_accuracy": 0.125, "no_correct": 1, "no_total": 8}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 14, "no_total": 14}, "ontop": {"accuracy": 0.9732142857142857, "yes_accuracy": 0.8333333333333334, "yes_correct": 10, "yes_total": 12, "no_accuracy": 0.9811320754716981, "no_correct": 208, "no_total": 212}, "nextto": {"accuracy": 0.5267857142857143, "yes_accuracy": 0.8235294117647058, "yes_correct": 14, "yes_total": 17, "no_accuracy": 0.5024154589371981, "no_correct": 104, "no_total": 207}}}, "step": 1, "actions": ["navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "navigate-to(apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "no"], "reachable countertop_1": ["yes", "no"], "reachable flour_1": ["yes", "no"], "reachable carrot_1": ["yes", "no"], "reachable carrot_3": ["yes", "no"], "reachable broccoli_1": ["yes", "no"], "reachable apple_1": ["yes", "no"], "reachable apple_2": ["yes", "no"], "reachable electric_refrigerator_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding flour_1": ["yes", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding broccoli_1": ["yes", "no"], "holding apple_1": ["yes", "no"], "holding apple_2": ["yes", "no"], "open electric_refrigerator_1": ["no", "no"], "ontop bread_1,countertop_1": ["no", "yes"], "ontop bread_1,flour_1": ["no", "no"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,broccoli_1": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,electric_refrigerator_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,flour_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,broccoli_1": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,electric_refrigerator_1": ["no", "no"], "ontop flour_1,bread_1": ["no", "no"], "ontop flour_1,countertop_1": ["no", "no"], "ontop flour_1,carrot_1": ["no", "no"], "ontop flour_1,carrot_3": ["no", "no"], "ontop flour_1,broccoli_1": ["no", "no"], "ontop flour_1,apple_1": ["yes", "no"], "ontop flour_1,apple_2": ["yes", "no"], "ontop flour_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["no", "yes"], "ontop carrot_1,flour_1": ["no", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,broccoli_1": ["no", "no"], "ontop carrot_1,apple_1": ["yes", "no"], "ontop carrot_1,apple_2": ["yes", "no"], "ontop carrot_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["no", "yes"], "ontop carrot_3,flour_1": ["no", "no"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,broccoli_1": ["no", "no"], "ontop carrot_3,apple_1": ["yes", "no"], "ontop carrot_3,apple_2": ["yes", "no"], "ontop carrot_3,electric_refrigerator_1": ["no", "no"], "ontop broccoli_1,bread_1": ["no", "no"], "ontop broccoli_1,countertop_1": ["no", "yes"], "ontop broccoli_1,flour_1": ["no", "no"], "ontop broccoli_1,carrot_1": ["no", "no"], "ontop broccoli_1,carrot_3": ["no", "no"], "ontop broccoli_1,apple_1": ["yes", "no"], "ontop broccoli_1,apple_2": ["no", "no"], "ontop broccoli_1,electric_refrigerator_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,flour_1": ["no", "no"], "ontop apple_1,carrot_1": ["yes", "no"], "ontop apple_1,carrot_3": ["yes", "no"], "ontop apple_1,broccoli_1": ["no", "no"], "ontop apple_1,apple_2": ["yes", "no"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,flour_1": ["no", "no"], "ontop apple_2,carrot_1": ["yes", "no"], "ontop apple_2,carrot_3": ["yes", "no"], "ontop apple_2,broccoli_1": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,electric_refrigerator_1": ["no", "no"], "inside bread_1,electric_refrigerator_1": ["no", "no"], "inside countertop_1,electric_refrigerator_1": ["no", "no"], "inside flour_1,electric_refrigerator_1": ["no", "no"], "inside carrot_1,electric_refrigerator_1": ["no", "no"], "inside carrot_3,electric_refrigerator_1": ["no", "no"], "inside broccoli_1,electric_refrigerator_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_2,electric_refrigerator_1": ["yes", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,flour_1": ["yes", "no"], "nextto bread_1,carrot_1": ["no", "no"], "nextto bread_1,carrot_3": ["yes", "yes"], "nextto bread_1,broccoli_1": ["no", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,electric_refrigerator_1": ["yes", "no"], "nextto countertop_1,bread_1": ["no", "no"], "nextto countertop_1,flour_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["no", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,broccoli_1": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,electric_refrigerator_1": ["no", "no"], "nextto flour_1,bread_1": ["yes", "no"], "nextto flour_1,countertop_1": ["yes", "no"], "nextto flour_1,carrot_1": ["no", "no"], "nextto flour_1,carrot_3": ["yes", "no"], "nextto flour_1,broccoli_1": ["no", "no"], "nextto flour_1,apple_1": ["yes", "no"], "nextto flour_1,apple_2": ["yes", "no"], "nextto flour_1,electric_refrigerator_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,flour_1": ["yes", "no"], "nextto carrot_1,carrot_3": ["yes", "no"], "nextto carrot_1,broccoli_1": ["yes", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "no"], "nextto carrot_1,electric_refrigerator_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "yes"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,flour_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["no", "no"], "nextto carrot_3,broccoli_1": ["yes", "no"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,electric_refrigerator_1": ["yes", "no"], "nextto broccoli_1,bread_1": ["no", "no"], "nextto broccoli_1,countertop_1": ["no", "no"], "nextto broccoli_1,flour_1": ["no", "no"], "nextto broccoli_1,carrot_1": ["no", "no"], "nextto broccoli_1,carrot_3": ["yes", "no"], "nextto broccoli_1,apple_1": ["yes", "no"], "nextto broccoli_1,apple_2": ["no", "no"], "nextto broccoli_1,electric_refrigerator_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,flour_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,broccoli_1": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "yes"], "nextto apple_1,electric_refrigerator_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,flour_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,broccoli_1": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "yes"], "nextto apple_2,electric_refrigerator_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5, "yes_accuracy": 0.6363636363636364, "yes_correct": 7, "yes_total": 11, "no_accuracy": 0.48951048951048953, "no_correct": 70, "no_total": 143, "predicates": {"reachable": {"accuracy": 0.1111111111111111, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 8}, "holding": {"accuracy": 0.25, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.25, "no_correct": 2, "no_total": 8}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.75, "yes_accuracy": 0.3333333333333333, "yes_correct": 2, "yes_total": 6, "no_accuracy": 0.7931034482758621, "no_correct": 46, "no_total": 58}, "inside": {"accuracy": 0.875, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.875, "no_correct": 7, "no_total": 8}, "nextto": {"accuracy": 0.28125, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.23333333333333334, "no_correct": 14, "no_total": 60}}}, "step": 2, "actions": ["place-next-to(apple_2, apple_1)", "place-next-to(apple_1, apple_1)", "open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "no"], "reachable countertop_1": ["yes", "no"], "reachable flour_1": ["yes", "no"], "reachable carrot_1": ["yes", "no"], "reachable carrot_3": ["yes", "no"], "reachable broccoli_1": ["yes", "no"], "reachable apple_1": ["yes", "no"], "reachable apple_2": ["yes", "no"], "reachable electric_refrigerator_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding flour_1": ["yes", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding broccoli_1": ["yes", "no"], "holding apple_1": ["yes", "no"], "holding apple_2": ["yes", "no"], "open electric_refrigerator_1": ["no", "no"], "ontop bread_1,countertop_1": ["no", "yes"], "ontop bread_1,flour_1": ["no", "no"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,broccoli_1": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,electric_refrigerator_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,flour_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,broccoli_1": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,electric_refrigerator_1": ["no", "no"], "ontop flour_1,bread_1": ["no", "no"], "ontop flour_1,countertop_1": ["no", "no"], "ontop flour_1,carrot_1": ["no", "no"], "ontop flour_1,carrot_3": ["no", "no"], "ontop flour_1,broccoli_1": ["no", "no"], "ontop flour_1,apple_1": ["yes", "no"], "ontop flour_1,apple_2": ["yes", "no"], "ontop flour_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["no", "yes"], "ontop carrot_1,flour_1": ["no", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,broccoli_1": ["no", "no"], "ontop carrot_1,apple_1": ["yes", "no"], "ontop carrot_1,apple_2": ["yes", "no"], "ontop carrot_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["no", "yes"], "ontop carrot_3,flour_1": ["no", "no"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,broccoli_1": ["no", "no"], "ontop carrot_3,apple_1": ["yes", "no"], "ontop carrot_3,apple_2": ["yes", "no"], "ontop carrot_3,electric_refrigerator_1": ["no", "no"], "ontop broccoli_1,bread_1": ["no", "no"], "ontop broccoli_1,countertop_1": ["no", "yes"], "ontop broccoli_1,flour_1": ["no", "no"], "ontop broccoli_1,carrot_1": ["no", "no"], "ontop broccoli_1,carrot_3": ["no", "no"], "ontop broccoli_1,apple_1": ["yes", "no"], "ontop broccoli_1,apple_2": ["no", "no"], "ontop broccoli_1,electric_refrigerator_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,flour_1": ["no", "no"], "ontop apple_1,carrot_1": ["yes", "no"], "ontop apple_1,carrot_3": ["yes", "no"], "ontop apple_1,broccoli_1": ["no", "no"], "ontop apple_1,apple_2": ["yes", "no"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,flour_1": ["no", "no"], "ontop apple_2,carrot_1": ["yes", "no"], "ontop apple_2,carrot_3": ["yes", "no"], "ontop apple_2,broccoli_1": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,electric_refrigerator_1": ["no", "no"], "inside bread_1,electric_refrigerator_1": ["no", "no"], "inside countertop_1,electric_refrigerator_1": ["no", "no"], "inside flour_1,electric_refrigerator_1": ["no", "no"], "inside carrot_1,electric_refrigerator_1": ["no", "no"], "inside carrot_3,electric_refrigerator_1": ["no", "no"], "inside broccoli_1,electric_refrigerator_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_2,electric_refrigerator_1": ["yes", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,flour_1": ["yes", "no"], "nextto bread_1,carrot_1": ["no", "no"], "nextto bread_1,carrot_3": ["yes", "yes"], "nextto bread_1,broccoli_1": ["no", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,electric_refrigerator_1": ["yes", "no"], "nextto countertop_1,bread_1": ["no", "no"], "nextto countertop_1,flour_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["no", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,broccoli_1": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,electric_refrigerator_1": ["no", "no"], "nextto flour_1,bread_1": ["yes", "no"], "nextto flour_1,countertop_1": ["yes", "no"], "nextto flour_1,carrot_1": ["no", "no"], "nextto flour_1,carrot_3": ["yes", "no"], "nextto flour_1,broccoli_1": ["no", "no"], "nextto flour_1,apple_1": ["yes", "no"], "nextto flour_1,apple_2": ["yes", "no"], "nextto flour_1,electric_refrigerator_1": ["yes", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,flour_1": ["yes", "no"], "nextto carrot_1,carrot_3": ["yes", "no"], "nextto carrot_1,broccoli_1": ["yes", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "no"], "nextto carrot_1,electric_refrigerator_1": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "yes"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,flour_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["no", "no"], "nextto carrot_3,broccoli_1": ["yes", "no"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,electric_refrigerator_1": ["yes", "no"], "nextto broccoli_1,bread_1": ["no", "no"], "nextto broccoli_1,countertop_1": ["no", "no"], "nextto broccoli_1,flour_1": ["no", "no"], "nextto broccoli_1,carrot_1": ["no", "no"], "nextto broccoli_1,carrot_3": ["yes", "no"], "nextto broccoli_1,apple_1": ["yes", "no"], "nextto broccoli_1,apple_2": ["no", "no"], "nextto broccoli_1,electric_refrigerator_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,flour_1": ["yes", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,broccoli_1": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "yes"], "nextto apple_1,electric_refrigerator_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,flour_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,broccoli_1": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "yes"], "nextto apple_2,electric_refrigerator_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.5, "yes_accuracy": 0.6363636363636364, "yes_correct": 7, "yes_total": 11, "no_accuracy": 0.48951048951048953, "no_correct": 70, "no_total": 143, "predicates": {"reachable": {"accuracy": 0.1111111111111111, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 8}, "holding": {"accuracy": 0.25, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.25, "no_correct": 2, "no_total": 8}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.75, "yes_accuracy": 0.3333333333333333, "yes_correct": 2, "yes_total": 6, "no_accuracy": 0.7931034482758621, "no_correct": 46, "no_total": 58}, "inside": {"accuracy": 0.875, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.875, "no_correct": 7, "no_total": 8}, "nextto": {"accuracy": 0.28125, "yes_accuracy": 1.0, "yes_correct": 4, "yes_total": 4, "no_accuracy": 0.23333333333333334, "no_correct": 14, "no_total": 60}}}, "step": 3, "actions": ["place-next-to(apple_2, apple_1)", "place-next-to(apple_1, apple_1)", "open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"]}], "remaining_actions": ["place-next-to(apple_1, apple_1)", "open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, "data/planning/igibson/medium/sorting_groceries_medium.pddl_Pomaria_1_int_20": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable apple_1": ["yes", 2.5387618439801085e-13, 6.7655706341082644e-15, "The image shows a robotic arm (the agent) and several objects, including apples labeled \"apple_2\" and \"apple_1\". The agent is positioned near a table with objects on it. I need to determine if \"apple_1\" is within the agent's reach. Looking at the image, \"apple_1\" is on the counter, and the robotic arm is close enough to potentially reach it. Therefore, the answer is \"Yes\".", false, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and several objects, including apples labeled \"apple_2\" and \"apple_1\". The agent is positioned near a table with objects on it. I need to determine if \"apple_1\" is within the agent's reach. Looking at the image, \"apple_1\" is on the counter, and the robotic arm is close enough to potentially reach it. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "navigate-to(electric_refrigerator_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {}, "non_visible_precond_results": {"reachable electric_refrigerator_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable electric_refrigerator_1": ["yes", 3.811205772632706e-14, 7.50470937157426e-15, "The image shows a robotic arm (the agent) and a refrigerator labeled \"electric_refrigerator_1\". The robotic arm is positioned relatively close to the refrigerator. Based on the image, it appears the agent can reach the refrigerator.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and a refrigerator labeled \"electric_refrigerator_1\". The robotic arm is positioned relatively close to the refrigerator. Based on the image, it appears the agent can reach the refrigerator.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable apple_1": ["yes", 4.303926735404334e-13, 3.5328782000548786e-14, "The image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if apple_1 is within the agent's reach. Based on the image, apple_1 is close to the agent and appears to be within the range of the robotic arm's movement.", false, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if apple_1 is within the agent's reach. Based on the image, apple_1 is close to the agent and appears to be within the range of the robotic arm's movement.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable apple_2": ["yes", 3.9367001412188296e-13, 3.6617017469368907e-14, "The image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if \"apple_2\" is within the agent's reach. Based on the image, \"apple_2\" is close to the agent and appears to be within the range of the robotic arm's movement.", false, "Question: Is the apple_2 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if \"apple_2\" is within the agent's reach. Based on the image, \"apple_2\" is close to the agent and appears to be within the range of the robotic arm's movement.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"reachable orange_1": {"before": true, "after": false}, "reachable table_1": {"before": true, "after": false}}}, "action_info": "success"}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["yes", 7.866424119084073e-14, 2.2537683253952973e-14, "The image shows a robotic arm, which is the agent. The agent is holding an object. The object is labeled as \"apple_2\" in the image. Therefore, the agent is holding the apple_2.", true, "Question: Is the agent holding the apple_2\n<explanation>\nThe image shows a robotic arm, which is the agent. The agent is holding an object. The object is labeled as \"apple_2\" in the image. Therefore, the agent is holding the apple_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable apple_1": ["yes", 3.7982014452001e-13, 3.532877522428521e-14, "The image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if apple_1 is within the agent's reach. Based on the image, apple_1 is close to the agent and appears to be within the range of the robotic arm's movement.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if apple_1 is within the agent's reach. Based on the image, apple_1 is close to the agent and appears to be within the range of the robotic arm's movement.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}, {"action": "place-next-to(apple_2, apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"holding apple_2": ["yes", 7.866424119084073e-14, 2.2537683253952973e-14, "The image shows a robotic arm, which is the agent. The agent is holding an object. The object is labeled as \"apple_2\" in the image. Therefore, the agent is holding the apple_2.", true, "Question: Is the agent holding the apple_2\n<explanation>\nThe image shows a robotic arm, which is the agent. The agent is holding an object. The object is labeled as \"apple_2\" in the image. Therefore, the agent is holding the apple_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "reachable apple_1": ["yes", 3.7982014452001e-13, 3.532877522428521e-14, "The image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if apple_1 is within the agent's reach. Based on the image, apple_1 is close to the agent and appears to be within the range of the robotic arm's movement.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and two apples labeled \"apple_1\" and \"apple_2\". The agent is holding an object. I need to determine if apple_1 is within the agent's reach. Based on the image, apple_1 is close to the agent and appears to be within the range of the robotic arm's movement.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": true, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable bread_1": ["yes", "no"], "reachable countertop_1": ["yes", "no"], "reachable flour_1": ["no", "no"], "reachable milk_1": ["yes", "yes"], "reachable chair_1": ["yes", "yes"], "reachable meat_1": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "reachable cheese_1": ["yes", "yes"], "reachable yogurt_1": ["yes", "yes"], "reachable soup_1": ["yes", "yes"], "reachable carrot_1": ["yes", "no"], "reachable carrot_2": ["yes", "no"], "reachable carrot_3": ["yes", "no"], "reachable apple_1": ["yes", "no"], "reachable apple_2": ["yes", "no"], "reachable orange_1": ["yes", "yes"], "reachable orange_3": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding flour_1": ["no", "no"], "holding meat_1": ["no", "no"], "holding cheese_1": ["no", "no"], "holding yogurt_1": ["no", "no"], "holding soup_1": ["no", "no"], "holding carrot_1": ["no", "no"], "holding carrot_2": ["no", "no"], "holding carrot_3": ["no", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["no", "no"], "holding orange_1": ["no", "no"], "holding orange_3": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,flour_1": ["no", "no"], "ontop bread_1,milk_1": ["no", "no"], "ontop bread_1,chair_1": ["no", "no"], "ontop bread_1,meat_1": ["no", "no"], "ontop bread_1,table_1": ["no", "no"], "ontop bread_1,cheese_1": ["no", "no"], "ontop bread_1,yogurt_1": ["no", "no"], "ontop bread_1,soup_1": ["no", "no"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,orange_1": ["no", "no"], "ontop bread_1,orange_3": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,flour_1": ["no", "no"], "ontop countertop_1,milk_1": ["no", "no"], "ontop countertop_1,chair_1": ["no", "no"], "ontop countertop_1,meat_1": ["no", "no"], "ontop countertop_1,table_1": ["no", "no"], "ontop countertop_1,cheese_1": ["no", "no"], "ontop countertop_1,yogurt_1": ["no", "no"], "ontop countertop_1,soup_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,orange_1": ["no", "no"], "ontop countertop_1,orange_3": ["no", "no"], "ontop flour_1,bread_1": ["no", "no"], "ontop flour_1,countertop_1": ["yes", "no"], "ontop flour_1,milk_1": ["no", "no"], "ontop flour_1,chair_1": ["no", "no"], "ontop flour_1,meat_1": ["no", "no"], "ontop flour_1,table_1": ["no", "no"], "ontop flour_1,cheese_1": ["no", "no"], "ontop flour_1,yogurt_1": ["no", "no"], "ontop flour_1,soup_1": ["no", "no"], "ontop flour_1,carrot_1": ["no", "no"], "ontop flour_1,carrot_2": ["no", "no"], "ontop flour_1,carrot_3": ["no", "no"], "ontop flour_1,apple_1": ["no", "no"], "ontop flour_1,apple_2": ["no", "no"], "ontop flour_1,orange_1": ["no", "no"], "ontop flour_1,orange_3": ["no", "no"], "ontop meat_1,bread_1": ["no", "no"], "ontop meat_1,countertop_1": ["yes", "no"], "ontop meat_1,flour_1": ["no", "no"], "ontop meat_1,milk_1": ["no", "no"], "ontop meat_1,chair_1": ["no", "no"], "ontop meat_1,table_1": ["no", "yes"], "ontop meat_1,cheese_1": ["no", "no"], "ontop meat_1,yogurt_1": ["no", "no"], "ontop meat_1,soup_1": ["no", "no"], "ontop meat_1,carrot_1": ["no", "no"], "ontop meat_1,carrot_2": ["no", "no"], "ontop meat_1,carrot_3": ["no", "no"], "ontop meat_1,apple_1": ["no", "no"], "ontop meat_1,apple_2": ["no", "no"], "ontop meat_1,orange_1": ["no", "no"], "ontop meat_1,orange_3": ["no", "no"], "ontop cheese_1,bread_1": ["no", "no"], "ontop cheese_1,countertop_1": ["yes", "no"], "ontop cheese_1,flour_1": ["no", "no"], "ontop cheese_1,milk_1": ["no", "no"], "ontop cheese_1,chair_1": ["no", "no"], "ontop cheese_1,meat_1": ["no", "no"], "ontop cheese_1,table_1": ["yes", "yes"], "ontop cheese_1,yogurt_1": ["no", "no"], "ontop cheese_1,soup_1": ["no", "no"], "ontop cheese_1,carrot_1": ["no", "no"], "ontop cheese_1,carrot_2": ["no", "no"], "ontop cheese_1,carrot_3": ["no", "no"], "ontop cheese_1,apple_1": ["no", "no"], "ontop cheese_1,apple_2": ["no", "no"], "ontop cheese_1,orange_1": ["no", "no"], "ontop cheese_1,orange_3": ["no", "no"], "ontop yogurt_1,bread_1": ["no", "no"], "ontop yogurt_1,countertop_1": ["yes", "no"], "ontop yogurt_1,flour_1": ["no", "no"], "ontop yogurt_1,milk_1": ["no", "no"], "ontop yogurt_1,chair_1": ["no", "no"], "ontop yogurt_1,meat_1": ["no", "no"], "ontop yogurt_1,table_1": ["no", "yes"], "ontop yogurt_1,cheese_1": ["no", "no"], "ontop yogurt_1,soup_1": ["no", "no"], "ontop yogurt_1,carrot_1": ["no", "no"], "ontop yogurt_1,carrot_2": ["no", "no"], "ontop yogurt_1,carrot_3": ["no", "no"], "ontop yogurt_1,apple_1": ["no", "no"], "ontop yogurt_1,apple_2": ["no", "no"], "ontop yogurt_1,orange_1": ["no", "no"], "ontop yogurt_1,orange_3": ["no", "no"], "ontop soup_1,bread_1": ["no", "no"], "ontop soup_1,countertop_1": ["no", "no"], "ontop soup_1,flour_1": ["no", "no"], "ontop soup_1,milk_1": ["no", "no"], "ontop soup_1,chair_1": ["no", "no"], "ontop soup_1,meat_1": ["no", "no"], "ontop soup_1,table_1": ["yes", "yes"], "ontop soup_1,cheese_1": ["no", "no"], "ontop soup_1,yogurt_1": ["no", "no"], "ontop soup_1,carrot_1": ["no", "no"], "ontop soup_1,carrot_2": ["no", "no"], "ontop soup_1,carrot_3": ["no", "no"], "ontop soup_1,apple_1": ["no", "no"], "ontop soup_1,apple_2": ["no", "no"], "ontop soup_1,orange_1": ["no", "no"], "ontop soup_1,orange_3": ["no", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,flour_1": ["no", "no"], "ontop carrot_1,milk_1": ["no", "no"], "ontop carrot_1,chair_1": ["no", "no"], "ontop carrot_1,meat_1": ["no", "no"], "ontop carrot_1,table_1": ["no", "no"], "ontop carrot_1,cheese_1": ["no", "no"], "ontop carrot_1,yogurt_1": ["no", "no"], "ontop carrot_1,soup_1": ["no", "no"], "ontop carrot_1,carrot_2": ["no", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,orange_1": ["no", "no"], "ontop carrot_1,orange_3": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,flour_1": ["no", "no"], "ontop carrot_2,milk_1": ["no", "no"], "ontop carrot_2,chair_1": ["no", "no"], "ontop carrot_2,meat_1": ["no", "no"], "ontop carrot_2,table_1": ["no", "no"], "ontop carrot_2,cheese_1": ["no", "no"], "ontop carrot_2,yogurt_1": ["no", "no"], "ontop carrot_2,soup_1": ["no", "no"], "ontop carrot_2,carrot_1": ["no", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,orange_1": ["no", "no"], "ontop carrot_2,orange_3": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,flour_1": ["no", "no"], "ontop carrot_3,milk_1": ["no", "no"], "ontop carrot_3,chair_1": ["no", "no"], "ontop carrot_3,meat_1": ["no", "no"], "ontop carrot_3,table_1": ["no", "no"], "ontop carrot_3,cheese_1": ["no", "no"], "ontop carrot_3,yogurt_1": ["no", "no"], "ontop carrot_3,soup_1": ["no", "no"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,orange_1": ["no", "no"], "ontop carrot_3,orange_3": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,flour_1": ["no", "no"], "ontop apple_1,milk_1": ["no", "no"], "ontop apple_1,chair_1": ["no", "no"], "ontop apple_1,meat_1": ["no", "no"], "ontop apple_1,table_1": ["no", "no"], "ontop apple_1,cheese_1": ["no", "no"], "ontop apple_1,yogurt_1": ["no", "no"], "ontop apple_1,soup_1": ["no", "no"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,orange_1": ["no", "no"], "ontop apple_1,orange_3": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,flour_1": ["no", "no"], "ontop apple_2,milk_1": ["no", "no"], "ontop apple_2,chair_1": ["no", "no"], "ontop apple_2,meat_1": ["no", "no"], "ontop apple_2,table_1": ["no", "no"], "ontop apple_2,cheese_1": ["no", "no"], "ontop apple_2,yogurt_1": ["no", "no"], "ontop apple_2,soup_1": ["no", "no"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,orange_1": ["no", "no"], "ontop apple_2,orange_3": ["no", "no"], "ontop orange_1,bread_1": ["no", "no"], "ontop orange_1,countertop_1": ["no", "no"], "ontop orange_1,flour_1": ["no", "no"], "ontop orange_1,milk_1": ["no", "no"], "ontop orange_1,chair_1": ["no", "no"], "ontop orange_1,meat_1": ["no", "no"], "ontop orange_1,table_1": ["yes", "yes"], "ontop orange_1,cheese_1": ["no", "no"], "ontop orange_1,yogurt_1": ["no", "no"], "ontop orange_1,soup_1": ["no", "no"], "ontop orange_1,carrot_1": ["no", "no"], "ontop orange_1,carrot_2": ["no", "no"], "ontop orange_1,carrot_3": ["no", "no"], "ontop orange_1,apple_1": ["no", "no"], "ontop orange_1,apple_2": ["no", "no"], "ontop orange_1,orange_3": ["no", "no"], "ontop orange_3,bread_1": ["no", "no"], "ontop orange_3,countertop_1": ["no", "no"], "ontop orange_3,flour_1": ["no", "no"], "ontop orange_3,milk_1": ["no", "no"], "ontop orange_3,chair_1": ["no", "no"], "ontop orange_3,meat_1": ["no", "no"], "ontop orange_3,table_1": ["yes", "yes"], "ontop orange_3,cheese_1": ["no", "no"], "ontop orange_3,yogurt_1": ["no", "no"], "ontop orange_3,soup_1": ["no", "no"], "ontop orange_3,carrot_1": ["no", "no"], "ontop orange_3,carrot_2": ["no", "no"], "ontop orange_3,carrot_3": ["no", "no"], "ontop orange_3,apple_1": ["no", "no"], "ontop orange_3,apple_2": ["no", "no"], "ontop orange_3,orange_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,flour_1": ["no", "no"], "nextto bread_1,milk_1": ["no", "no"], "nextto bread_1,chair_1": ["no", "no"], "nextto bread_1,meat_1": ["no", "no"], "nextto bread_1,table_1": ["yes", "no"], "nextto bread_1,cheese_1": ["no", "no"], "nextto bread_1,yogurt_1": ["no", "no"], "nextto bread_1,soup_1": ["no", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "yes"], "nextto bread_1,carrot_3": ["yes", "yes"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,orange_1": ["no", "no"], "nextto bread_1,orange_3": ["no", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,flour_1": ["yes", "no"], "nextto countertop_1,milk_1": ["no", "no"], "nextto countertop_1,chair_1": ["no", "no"], "nextto countertop_1,meat_1": ["yes", "no"], "nextto countertop_1,table_1": ["yes", "no"], "nextto countertop_1,cheese_1": ["no", "no"], "nextto countertop_1,yogurt_1": ["no", "no"], "nextto countertop_1,soup_1": ["no", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,orange_1": ["no", "no"], "nextto countertop_1,orange_3": ["no", "no"], "nextto flour_1,bread_1": ["yes", "no"], "nextto flour_1,countertop_1": ["yes", "no"], "nextto flour_1,milk_1": ["no", "no"], "nextto flour_1,chair_1": ["no", "no"], "nextto flour_1,meat_1": ["no", "no"], "nextto flour_1,table_1": ["no", "no"], "nextto flour_1,cheese_1": ["no", "no"], "nextto flour_1,yogurt_1": ["no", "no"], "nextto flour_1,soup_1": ["no", "no"], "nextto flour_1,carrot_1": ["yes", "no"], "nextto flour_1,carrot_2": ["yes", "no"], "nextto flour_1,carrot_3": ["yes", "no"], "nextto flour_1,apple_1": ["yes", "no"], "nextto flour_1,apple_2": ["no", "no"], "nextto flour_1,orange_1": ["no", "no"], "nextto flour_1,orange_3": ["no", "no"], "nextto meat_1,bread_1": ["yes", "no"], "nextto meat_1,countertop_1": ["yes", "no"], "nextto meat_1,flour_1": ["no", "no"], "nextto meat_1,milk_1": ["no", "no"], "nextto meat_1,chair_1": ["yes", "no"], "nextto meat_1,table_1": ["no", "no"], "nextto meat_1,cheese_1": ["yes", "no"], "nextto meat_1,yogurt_1": ["no", "no"], "nextto meat_1,soup_1": ["no", "no"], "nextto meat_1,carrot_1": ["yes", "no"], "nextto meat_1,carrot_2": ["yes", "no"], "nextto meat_1,carrot_3": ["yes", "no"], "nextto meat_1,apple_1": ["yes", "no"], "nextto meat_1,apple_2": ["yes", "no"], "nextto meat_1,orange_1": ["no", "no"], "nextto meat_1,orange_3": ["no", "yes"], "nextto cheese_1,bread_1": ["yes", "no"], "nextto cheese_1,countertop_1": ["no", "no"], "nextto cheese_1,flour_1": ["no", "no"], "nextto cheese_1,milk_1": ["yes", "no"], "nextto cheese_1,chair_1": ["no", "no"], "nextto cheese_1,meat_1": ["no", "no"], "nextto cheese_1,table_1": ["yes", "no"], "nextto cheese_1,yogurt_1": ["yes", "no"], "nextto cheese_1,soup_1": ["yes", "yes"], "nextto cheese_1,carrot_1": ["no", "no"], "nextto cheese_1,carrot_2": ["no", "no"], "nextto cheese_1,carrot_3": ["no", "no"], "nextto cheese_1,apple_1": ["no", "no"], "nextto cheese_1,apple_2": ["no", "no"], "nextto cheese_1,orange_1": ["yes", "yes"], "nextto cheese_1,orange_3": ["yes", "no"], "nextto yogurt_1,bread_1": ["no", "no"], "nextto yogurt_1,countertop_1": ["no", "no"], "nextto yogurt_1,flour_1": ["no", "no"], "nextto yogurt_1,milk_1": ["yes", "no"], "nextto yogurt_1,chair_1": ["yes", "no"], "nextto yogurt_1,meat_1": ["yes", "no"], "nextto yogurt_1,table_1": ["yes", "no"], "nextto yogurt_1,cheese_1": ["yes", "no"], "nextto yogurt_1,soup_1": ["yes", "no"], "nextto yogurt_1,carrot_1": ["no", "no"], "nextto yogurt_1,carrot_2": ["no", "no"], "nextto yogurt_1,carrot_3": ["no", "no"], "nextto yogurt_1,apple_1": ["no", "no"], "nextto yogurt_1,apple_2": ["no", "no"], "nextto yogurt_1,orange_1": ["yes", "no"], "nextto yogurt_1,orange_3": ["yes", "no"], "nextto soup_1,bread_1": ["yes", "no"], "nextto soup_1,countertop_1": ["no", "no"], "nextto soup_1,flour_1": ["no", "no"], "nextto soup_1,milk_1": ["no", "no"], "nextto soup_1,chair_1": ["no", "no"], "nextto soup_1,meat_1": ["no", "no"], "nextto soup_1,table_1": ["yes", "no"], "nextto soup_1,cheese_1": ["yes", "yes"], "nextto soup_1,yogurt_1": ["yes", "no"], "nextto soup_1,carrot_1": ["no", "no"], "nextto soup_1,carrot_2": ["no", "no"], "nextto soup_1,carrot_3": ["no", "no"], "nextto soup_1,apple_1": ["no", "no"], "nextto soup_1,apple_2": ["no", "no"], "nextto soup_1,orange_1": ["yes", "no"], "nextto soup_1,orange_3": ["yes", "no"], "nextto carrot_1,bread_1": ["no", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,flour_1": ["no", "no"], "nextto carrot_1,milk_1": ["no", "no"], "nextto carrot_1,chair_1": ["no", "no"], "nextto carrot_1,meat_1": ["no", "no"], "nextto carrot_1,table_1": ["yes", "no"], "nextto carrot_1,cheese_1": ["no", "no"], "nextto carrot_1,yogurt_1": ["no", "no"], "nextto carrot_1,soup_1": ["no", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "no"], "nextto carrot_1,orange_1": ["no", "no"], "nextto carrot_1,orange_3": ["no", "no"], "nextto carrot_2,bread_1": ["yes", "yes"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,flour_1": ["yes", "no"], "nextto carrot_2,milk_1": ["no", "no"], "nextto carrot_2,chair_1": ["no", "no"], "nextto carrot_2,meat_1": ["yes", "no"], "nextto carrot_2,table_1": ["yes", "no"], "nextto carrot_2,cheese_1": ["yes", "no"], "nextto carrot_2,yogurt_1": ["no", "no"], "nextto carrot_2,soup_1": ["no", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["no", "yes"], "nextto carrot_2,apple_1": ["yes", "yes"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,orange_1": ["no", "no"], "nextto carrot_2,orange_3": ["no", "no"], "nextto carrot_3,bread_1": ["yes", "yes"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,flour_1": ["yes", "no"], "nextto carrot_3,milk_1": ["no", "no"], "nextto carrot_3,chair_1": ["no", "no"], "nextto carrot_3,meat_1": ["yes", "no"], "nextto carrot_3,table_1": ["yes", "no"], "nextto carrot_3,cheese_1": ["no", "no"], "nextto carrot_3,yogurt_1": ["no", "no"], "nextto carrot_3,soup_1": ["no", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["no", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,orange_1": ["yes", "no"], "nextto carrot_3,orange_3": ["yes", "no"], "nextto apple_1,bread_1": ["no", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,flour_1": ["yes", "no"], "nextto apple_1,milk_1": ["no", "no"], "nextto apple_1,chair_1": ["no", "no"], "nextto apple_1,meat_1": ["yes", "no"], "nextto apple_1,table_1": ["yes", "no"], "nextto apple_1,cheese_1": ["no", "no"], "nextto apple_1,yogurt_1": ["no", "no"], "nextto apple_1,soup_1": ["no", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "yes"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "yes"], "nextto apple_1,orange_1": ["no", "no"], "nextto apple_1,orange_3": ["no", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,flour_1": ["yes", "no"], "nextto apple_2,milk_1": ["no", "no"], "nextto apple_2,chair_1": ["no", "no"], "nextto apple_2,meat_1": ["yes", "no"], "nextto apple_2,table_1": ["yes", "no"], "nextto apple_2,cheese_1": ["yes", "no"], "nextto apple_2,yogurt_1": ["yes", "no"], "nextto apple_2,soup_1": ["no", "no"], "nextto apple_2,carrot_1": ["yes", "no"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "yes"], "nextto apple_2,orange_1": ["no", "no"], "nextto apple_2,orange_3": ["no", "no"], "nextto orange_1,bread_1": ["yes", "no"], "nextto orange_1,countertop_1": ["no", "no"], "nextto orange_1,flour_1": ["yes", "no"], "nextto orange_1,milk_1": ["yes", "no"], "nextto orange_1,chair_1": ["yes", "no"], "nextto orange_1,meat_1": ["yes", "no"], "nextto orange_1,table_1": ["yes", "no"], "nextto orange_1,cheese_1": ["yes", "yes"], "nextto orange_1,yogurt_1": ["yes", "no"], "nextto orange_1,soup_1": ["yes", "no"], "nextto orange_1,carrot_1": ["no", "no"], "nextto orange_1,carrot_2": ["no", "no"], "nextto orange_1,carrot_3": ["yes", "no"], "nextto orange_1,apple_1": ["no", "no"], "nextto orange_1,apple_2": ["no", "no"], "nextto orange_1,orange_3": ["yes", "no"], "nextto orange_3,bread_1": ["yes", "no"], "nextto orange_3,countertop_1": ["no", "no"], "nextto orange_3,flour_1": ["yes", "no"], "nextto orange_3,milk_1": ["yes", "no"], "nextto orange_3,chair_1": ["yes", "yes"], "nextto orange_3,meat_1": ["yes", "yes"], "nextto orange_3,table_1": ["yes", "no"], "nextto orange_3,cheese_1": ["yes", "no"], "nextto orange_3,yogurt_1": ["yes", "no"], "nextto orange_3,soup_1": ["yes", "no"], "nextto orange_3,carrot_1": ["no", "no"], "nextto orange_3,carrot_2": ["no", "no"], "nextto orange_3,carrot_3": ["yes", "no"], "nextto orange_3,apple_1": ["no", "no"], "nextto orange_3,apple_2": ["no", "no"], "nextto orange_3,orange_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.7515657620041754, "yes_accuracy": 0.868421052631579, "yes_correct": 33, "yes_total": 38, "no_accuracy": 0.7414965986394558, "no_correct": 327, "no_total": 441, "predicates": {"reachable": {"accuracy": 0.5882352941176471, "yes_accuracy": 1.0, "yes_correct": 9, "yes_total": 9, "no_accuracy": 0.125, "no_correct": 1, "no_total": 8}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 14, "no_total": 14}, "ontop": {"accuracy": 0.9732142857142857, "yes_accuracy": 0.8333333333333334, "yes_correct": 10, "yes_total": 12, "no_accuracy": 0.9811320754716981, "no_correct": 208, "no_total": 212}, "nextto": {"accuracy": 0.5267857142857143, "yes_accuracy": 0.8235294117647058, "yes_correct": 14, "yes_total": 17, "no_accuracy": 0.5024154589371981, "no_correct": 104, "no_total": 207}}}, "step": 1, "actions": ["navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "navigate-to(apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "no"], "reachable countertop_1": ["yes", "no"], "reachable flour_1": ["yes", "no"], "reachable carrot_1": ["yes", "no"], "reachable carrot_3": ["yes", "no"], "reachable broccoli_1": ["yes", "no"], "reachable apple_1": ["yes", "no"], "reachable apple_2": ["yes", "no"], "reachable electric_refrigerator_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding flour_1": ["yes", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding broccoli_1": ["no", "no"], "holding apple_1": ["yes", "no"], "holding apple_2": ["yes", "no"], "open electric_refrigerator_1": ["no", "no"], "ontop bread_1,countertop_1": ["no", "yes"], "ontop bread_1,flour_1": ["no", "no"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,broccoli_1": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,electric_refrigerator_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,flour_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,broccoli_1": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,electric_refrigerator_1": ["no", "no"], "ontop flour_1,bread_1": ["no", "no"], "ontop flour_1,countertop_1": ["no", "no"], "ontop flour_1,carrot_1": ["no", "no"], "ontop flour_1,carrot_3": ["no", "no"], "ontop flour_1,broccoli_1": ["no", "no"], "ontop flour_1,apple_1": ["no", "no"], "ontop flour_1,apple_2": ["yes", "no"], "ontop flour_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["no", "yes"], "ontop carrot_1,flour_1": ["no", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,broccoli_1": ["no", "no"], "ontop carrot_1,apple_1": ["yes", "no"], "ontop carrot_1,apple_2": ["yes", "no"], "ontop carrot_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["no", "yes"], "ontop carrot_3,flour_1": ["no", "no"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,broccoli_1": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,electric_refrigerator_1": ["no", "no"], "ontop broccoli_1,bread_1": ["no", "no"], "ontop broccoli_1,countertop_1": ["no", "yes"], "ontop broccoli_1,flour_1": ["no", "no"], "ontop broccoli_1,carrot_1": ["no", "no"], "ontop broccoli_1,carrot_3": ["no", "no"], "ontop broccoli_1,apple_1": ["no", "no"], "ontop broccoli_1,apple_2": ["no", "no"], "ontop broccoli_1,electric_refrigerator_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,flour_1": ["no", "no"], "ontop apple_1,carrot_1": ["yes", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,broccoli_1": ["no", "no"], "ontop apple_1,apple_2": ["yes", "no"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,flour_1": ["no", "no"], "ontop apple_2,carrot_1": ["yes", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,broccoli_1": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,electric_refrigerator_1": ["no", "no"], "inside bread_1,electric_refrigerator_1": ["no", "no"], "inside countertop_1,electric_refrigerator_1": ["no", "no"], "inside flour_1,electric_refrigerator_1": ["no", "no"], "inside carrot_1,electric_refrigerator_1": ["no", "no"], "inside carrot_3,electric_refrigerator_1": ["no", "no"], "inside broccoli_1,electric_refrigerator_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_2,electric_refrigerator_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,flour_1": ["yes", "no"], "nextto bread_1,carrot_1": ["no", "no"], "nextto bread_1,carrot_3": ["no", "yes"], "nextto bread_1,broccoli_1": ["no", "no"], "nextto bread_1,apple_1": ["no", "no"], "nextto bread_1,apple_2": ["no", "no"], "nextto bread_1,electric_refrigerator_1": ["no", "no"], "nextto countertop_1,bread_1": ["no", "no"], "nextto countertop_1,flour_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_3": ["no", "no"], "nextto countertop_1,broccoli_1": ["yes", "no"], "nextto countertop_1,apple_1": ["no", "no"], "nextto countertop_1,apple_2": ["no", "no"], "nextto countertop_1,electric_refrigerator_1": ["no", "no"], "nextto flour_1,bread_1": ["yes", "no"], "nextto flour_1,countertop_1": ["yes", "no"], "nextto flour_1,carrot_1": ["no", "no"], "nextto flour_1,carrot_3": ["yes", "no"], "nextto flour_1,broccoli_1": ["no", "no"], "nextto flour_1,apple_1": ["no", "no"], "nextto flour_1,apple_2": ["no", "no"], "nextto flour_1,electric_refrigerator_1": ["no", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,flour_1": ["yes", "no"], "nextto carrot_1,carrot_3": ["yes", "no"], "nextto carrot_1,broccoli_1": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "no"], "nextto carrot_1,electric_refrigerator_1": ["yes", "no"], "nextto carrot_3,bread_1": ["no", "yes"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,flour_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["no", "no"], "nextto carrot_3,broccoli_1": ["yes", "no"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,electric_refrigerator_1": ["yes", "no"], "nextto broccoli_1,bread_1": ["no", "no"], "nextto broccoli_1,countertop_1": ["no", "no"], "nextto broccoli_1,flour_1": ["no", "no"], "nextto broccoli_1,carrot_1": ["no", "no"], "nextto broccoli_1,carrot_3": ["no", "no"], "nextto broccoli_1,apple_1": ["no", "no"], "nextto broccoli_1,apple_2": ["no", "no"], "nextto broccoli_1,electric_refrigerator_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,flour_1": ["no", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,broccoli_1": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "yes"], "nextto apple_1,electric_refrigerator_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,flour_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,broccoli_1": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "yes"], "nextto apple_2,electric_refrigerator_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.6168831168831169, "yes_accuracy": 0.45454545454545453, "yes_correct": 5, "yes_total": 11, "no_accuracy": 0.6293706293706294, "no_correct": 90, "no_total": 143, "predicates": {"reachable": {"accuracy": 0.1111111111111111, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 8}, "holding": {"accuracy": 0.375, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.375, "no_correct": 3, "no_total": 8}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.84375, "yes_accuracy": 0.3333333333333333, "yes_correct": 2, "yes_total": 6, "no_accuracy": 0.896551724137931, "no_correct": 52, "no_total": 58}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 8, "no_total": 8}, "nextto": {"accuracy": 0.4375, "yes_accuracy": 0.5, "yes_correct": 2, "yes_total": 4, "no_accuracy": 0.43333333333333335, "no_correct": 26, "no_total": 60}}}, "step": 2, "actions": ["place-next-to(apple_2, apple_1)", "place-next-to(apple_1, apple_1)", "open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "no"], "reachable countertop_1": ["yes", "no"], "reachable flour_1": ["yes", "no"], "reachable carrot_1": ["yes", "no"], "reachable carrot_3": ["yes", "no"], "reachable broccoli_1": ["yes", "no"], "reachable apple_1": ["yes", "no"], "reachable apple_2": ["yes", "no"], "reachable electric_refrigerator_1": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding flour_1": ["yes", "no"], "holding carrot_1": ["yes", "no"], "holding carrot_3": ["yes", "no"], "holding broccoli_1": ["no", "no"], "holding apple_1": ["yes", "no"], "holding apple_2": ["yes", "no"], "open electric_refrigerator_1": ["no", "no"], "ontop bread_1,countertop_1": ["no", "yes"], "ontop bread_1,flour_1": ["no", "no"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,broccoli_1": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,electric_refrigerator_1": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,flour_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,broccoli_1": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,electric_refrigerator_1": ["no", "no"], "ontop flour_1,bread_1": ["no", "no"], "ontop flour_1,countertop_1": ["no", "no"], "ontop flour_1,carrot_1": ["no", "no"], "ontop flour_1,carrot_3": ["no", "no"], "ontop flour_1,broccoli_1": ["no", "no"], "ontop flour_1,apple_1": ["no", "no"], "ontop flour_1,apple_2": ["yes", "no"], "ontop flour_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["no", "yes"], "ontop carrot_1,flour_1": ["no", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,broccoli_1": ["no", "no"], "ontop carrot_1,apple_1": ["yes", "no"], "ontop carrot_1,apple_2": ["yes", "no"], "ontop carrot_1,electric_refrigerator_1": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["no", "yes"], "ontop carrot_3,flour_1": ["no", "no"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,broccoli_1": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,electric_refrigerator_1": ["no", "no"], "ontop broccoli_1,bread_1": ["no", "no"], "ontop broccoli_1,countertop_1": ["no", "yes"], "ontop broccoli_1,flour_1": ["no", "no"], "ontop broccoli_1,carrot_1": ["no", "no"], "ontop broccoli_1,carrot_3": ["no", "no"], "ontop broccoli_1,apple_1": ["no", "no"], "ontop broccoli_1,apple_2": ["no", "no"], "ontop broccoli_1,electric_refrigerator_1": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,flour_1": ["no", "no"], "ontop apple_1,carrot_1": ["yes", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,broccoli_1": ["no", "no"], "ontop apple_1,apple_2": ["yes", "no"], "ontop apple_1,electric_refrigerator_1": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,flour_1": ["no", "no"], "ontop apple_2,carrot_1": ["yes", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,broccoli_1": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,electric_refrigerator_1": ["no", "no"], "inside bread_1,electric_refrigerator_1": ["no", "no"], "inside countertop_1,electric_refrigerator_1": ["no", "no"], "inside flour_1,electric_refrigerator_1": ["no", "no"], "inside carrot_1,electric_refrigerator_1": ["no", "no"], "inside carrot_3,electric_refrigerator_1": ["no", "no"], "inside broccoli_1,electric_refrigerator_1": ["no", "no"], "inside apple_1,electric_refrigerator_1": ["no", "no"], "inside apple_2,electric_refrigerator_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,flour_1": ["yes", "no"], "nextto bread_1,carrot_1": ["no", "no"], "nextto bread_1,carrot_3": ["no", "yes"], "nextto bread_1,broccoli_1": ["no", "no"], "nextto bread_1,apple_1": ["no", "no"], "nextto bread_1,apple_2": ["no", "no"], "nextto bread_1,electric_refrigerator_1": ["no", "no"], "nextto countertop_1,bread_1": ["no", "no"], "nextto countertop_1,flour_1": ["yes", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_3": ["no", "no"], "nextto countertop_1,broccoli_1": ["yes", "no"], "nextto countertop_1,apple_1": ["no", "no"], "nextto countertop_1,apple_2": ["no", "no"], "nextto countertop_1,electric_refrigerator_1": ["no", "no"], "nextto flour_1,bread_1": ["yes", "no"], "nextto flour_1,countertop_1": ["yes", "no"], "nextto flour_1,carrot_1": ["no", "no"], "nextto flour_1,carrot_3": ["yes", "no"], "nextto flour_1,broccoli_1": ["no", "no"], "nextto flour_1,apple_1": ["no", "no"], "nextto flour_1,apple_2": ["no", "no"], "nextto flour_1,electric_refrigerator_1": ["no", "no"], "nextto carrot_1,bread_1": ["yes", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,flour_1": ["yes", "no"], "nextto carrot_1,carrot_3": ["yes", "no"], "nextto carrot_1,broccoli_1": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "no"], "nextto carrot_1,electric_refrigerator_1": ["yes", "no"], "nextto carrot_3,bread_1": ["no", "yes"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,flour_1": ["yes", "no"], "nextto carrot_3,carrot_1": ["no", "no"], "nextto carrot_3,broccoli_1": ["yes", "no"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,electric_refrigerator_1": ["yes", "no"], "nextto broccoli_1,bread_1": ["no", "no"], "nextto broccoli_1,countertop_1": ["no", "no"], "nextto broccoli_1,flour_1": ["no", "no"], "nextto broccoli_1,carrot_1": ["no", "no"], "nextto broccoli_1,carrot_3": ["no", "no"], "nextto broccoli_1,apple_1": ["no", "no"], "nextto broccoli_1,apple_2": ["no", "no"], "nextto broccoli_1,electric_refrigerator_1": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,flour_1": ["no", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,broccoli_1": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "yes"], "nextto apple_1,electric_refrigerator_1": ["yes", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,flour_1": ["yes", "no"], "nextto apple_2,carrot_1": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,broccoli_1": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "yes"], "nextto apple_2,electric_refrigerator_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.6168831168831169, "yes_accuracy": 0.45454545454545453, "yes_correct": 5, "yes_total": 11, "no_accuracy": 0.6293706293706294, "no_correct": 90, "no_total": 143, "predicates": {"reachable": {"accuracy": 0.1111111111111111, "yes_accuracy": 1.0, "yes_correct": 1, "yes_total": 1, "no_accuracy": 0.0, "no_correct": 0, "no_total": 8}, "holding": {"accuracy": 0.375, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 0.375, "no_correct": 3, "no_total": 8}, "open": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 1, "no_total": 1}, "ontop": {"accuracy": 0.84375, "yes_accuracy": 0.3333333333333333, "yes_correct": 2, "yes_total": 6, "no_accuracy": 0.896551724137931, "no_correct": 52, "no_total": 58}, "inside": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 8, "no_total": 8}, "nextto": {"accuracy": 0.4375, "yes_accuracy": 0.5, "yes_correct": 2, "yes_total": 4, "no_accuracy": 0.43333333333333335, "no_correct": 26, "no_total": 60}}}, "step": 3, "actions": ["place-next-to(apple_2, apple_1)", "place-next-to(apple_1, apple_1)", "open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"]}], "remaining_actions": ["place-next-to(apple_1, apple_1)", "open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, "data/planning/igibson/medium/sorting_groceries_medium.pddl_Pomaria_1_int_23": {"all_correct": false, "goal_reached": false, "action_results": [{"action": "navigate-to(apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable apple_1": ["yes", 2.5387618439801085e-13, 6.7655706341082644e-15, "The image shows a robotic arm (the agent) and several objects, including apples labeled \"apple_2\" and \"apple_1\". The agent is positioned near a table with objects on it. I need to determine if \"apple_1\" is within the agent's reach. Looking at the image, \"apple_1\" is on the counter, and the robotic arm is close enough to potentially reach it. Therefore, the answer is \"Yes\".", false, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and several objects, including apples labeled \"apple_2\" and \"apple_1\". The agent is positioned near a table with objects on it. I need to determine if \"apple_1\" is within the agent's reach. Looking at the image, \"apple_1\" is on the counter, and the robotic arm is close enough to potentially reach it. Therefore, the answer is \"Yes\".\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false}, "non_visible_precond_results": {"all_correct": true}, "effects_results": null, "action_info": null}, {"action": "navigate-to(electric_refrigerator_1)", "action_correct": true, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable electric_refrigerator_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable electric_refrigerator_1": ["yes", 2.1670818893711197e-13, 3.323327669915027e-14, "The image shows a robotic arm (the agent) and an electric refrigerator. The robotic arm is positioned close to the refrigerator. Based on the image, it appears the agent is close enough to interact with the refrigerator. Therefore, the refrigerator is in reach of the agent.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and an electric refrigerator. The robotic arm is positioned close to the refrigerator. Based on the image, it appears the agent is close enough to interact with the refrigerator. Therefore, the refrigerator is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": true, "all_state_correct": true, "updated_non_visible_preds": {"reachable apple_1": {"before": true, "after": false}, "reachable apple_2": {"before": true, "after": false}, "reachable orange_1": {"before": true, "after": false}, "reachable table_1": {"before": true, "after": false}}}, "action_info": "success"}, {"action": "open-container(electric_refrigerator_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable electric_refrigerator_1": ["yes", 2.7056536264918885e-13, 4.149254250189645e-14, "The image shows a robotic arm (the agent) and an electric refrigerator. The robotic arm is positioned close to the refrigerator. Based on the image, it appears the agent is close enough to interact with the refrigerator. Therefore, the refrigerator is in reach of the agent.", true, "Question: Is the electric_refrigerator_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm (the agent) and an electric refrigerator. The robotic arm is positioned close to the refrigerator. Based on the image, it appears the agent is close enough to interact with the refrigerator. Therefore, the refrigerator is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "open electric_refrigerator_1": ["no", 1.1992264006919356e-13, 8.242154381958924e-14, "The image shows a kitchen scene with a robotic arm and a large appliance that appears to be a refrigerator. I need to determine if the refrigerator is open. Looking at the image, the doors of the refrigerator are closed. Therefore, the answer is \"No\".", true, "<explanation>\nThe image shows a kitchen scene with a robotic arm and a large appliance that appears to be a refrigerator. I need to determine if the refrigerator is open. Looking at the image, the doors of the refrigerator are closed. Therefore, the answer is \"No\".\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding apple_1": [true, false, false], "holding apple_2": [true, false, false], "holding orange_1": [true, false, false], "all_correct": true}, "effects_results": {"open electric_refrigerator_1": ["no", 7.201720095923944e-14, 1.8573480427275246e-12, "The image shows a robotic arm holding an object, a table, and a floor. There is no refrigerator visible in the image. Therefore, it is impossible to determine if the electric_refrigerator_1 is open.", false, "<explanation>\nThe image shows a robotic arm holding an object, a table, and a floor. There is no refrigerator visible in the image. Therefore, it is impossible to determine if the electric_refrigerator_1 is open.\n</explanation>\n<answer>\nNo\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {}}, "action_info": "success"}, {"action": "navigate-to(apple_1)", "action_correct": false, "action_state_correct": true, "preconditions_results": {}, "non_visible_precond_results": {"reachable apple_1": [true, false, false], "all_correct": true}, "effects_results": {"reachable apple_1": ["yes", 7.819931768099364e-13, 2.6758336621772114e-14, "The image shows a robotic arm (the agent) and a countertop with several objects, including apples labeled as apple_1, apple_2, carrot_1, carrot_2, and carrot_3. The robotic arm is positioned above the countertop. To determine if apple_1 is in reach, I need to assess the distance between the arm and apple_1. Visually, the arm is directly above the countertop and appears close enough to grasp apple_1. Therefore, apple_1 is in reach of the agent.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a countertop with several objects, including apples labeled as apple_1, apple_2, carrot_1, carrot_2, and carrot_3. The robotic arm is positioned above the countertop. To determine if apple_1 is in reach, I need to assess the distance between the arm and apple_1. Visually, the arm is directly above the countertop and appears close enough to grasp apple_1. Therefore, apple_1 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "reachable apple_2": ["yes", 5.054825915479233e-13, 1.3470655492486047e-14, "The image shows a robotic arm (the agent) and a countertop with several objects, including \"apple_2\". To determine if \"apple_2\" is in reach of the agent, I need to visually assess the distance between the robotic arm and the apple. The robotic arm is positioned above the countertop and appears to be close enough to potentially grasp \"apple_2\". Therefore, it is likely within the agent's reach.", false, "<explanation>\nThe image shows a robotic arm (the agent) and a countertop with several objects, including \"apple_2\". To determine if \"apple_2\" is in reach of the agent, I need to visually assess the distance between the robotic arm and the apple. The robotic arm is positioned above the countertop and appears to be close enough to potentially grasp \"apple_2\". Therefore, it is likely within the agent's reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "all_correct": false, "all_state_correct": true, "updated_non_visible_preds": {"reachable orange_1": {"before": false, "after": false}, "reachable electric_refrigerator_1": {"before": false, "after": false}, "reachable table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable apple_1": ["yes", 7.819931768099364e-13, 2.6758336621772114e-14, "The image shows a robotic arm (the agent) and a countertop with several objects, including apples labeled as apple_1, apple_2, carrot_1, carrot_2, and carrot_3. The robotic arm is positioned above the countertop. To determine if apple_1 is in reach, I need to assess the distance between the arm and apple_1. Visually, the arm is directly above the countertop and appears close enough to grasp apple_1. Therefore, apple_1 is in reach of the agent.", true, "<explanation>\nThe image shows a robotic arm (the agent) and a countertop with several objects, including apples labeled as apple_1, apple_2, carrot_1, carrot_2, and carrot_3. The robotic arm is positioned above the countertop. To determine if apple_1 is in reach, I need to assess the distance between the arm and apple_1. Visually, the arm is directly above the countertop and appears close enough to grasp apple_1. Therefore, apple_1 is in reach of the agent.\n</explanation>\n<answer>\nYes\n</answer>", true], "holding apple_2": ["no", 6.090179901184489e-13, 1.1992274848941081e-13, "The image shows a robotic arm (the agent) positioned above a counter. There are several objects on the counter, including apples and carrots. The agent is not visibly grasping or holding any of the objects on the counter, including apple_2. Therefore, the agent is not holding apple_2.", true, "Question: Is the agent holding the apple_2\n<explanation>\nThe image shows a robotic arm (the agent) positioned above a counter. There are several objects on the counter, including apples and carrots. The agent is not visibly grasping or holding any of the objects on the counter, including apple_2. Therefore, the agent is not holding apple_2.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding orange_1": [true, false, false], "all_correct": true}, "effects_results": {"holding apple_1": ["no", 9.254811408334826e-14, 8.608315374815465e-15, "The image shows a robotic arm (the agent) and several objects on a counter, including apples labeled \"apple_1\", \"apple_2\", and carrots labeled \"carrot_1\", \"carrot_2\", and \"carrot_3\". The robotic arm is positioned near the objects, but it is not grasping or holding any of them. Therefore, the agent is not holding apple_1.", false, "Question: Is the agent holding the apple_1\n<explanation>\nThe image shows a robotic arm (the agent) and several objects on a counter, including apples labeled \"apple_1\", \"apple_2\", and carrots labeled \"carrot_1\", \"carrot_2\", and \"carrot_3\". The robotic arm is positioned near the objects, but it is not grasping or holding any of them. Therefore, the agent is not holding apple_1.\n</explanation>\n<answer>\nNo\n</answer>", false], "ontop apple_1,apple_2": ["no", 2.0806201542471897e-13, 3.1907344876045546e-14, "The image shows two apples labeled as apple_1 and apple_2, along with other objects like carrots. Visually, apple_1 is positioned to the left of apple_2 and appears to be resting directly on the countertop, not on top of apple_2. Therefore, apple_1 is not on top of apple_2.", true, "<explanation>\nThe image shows two apples labeled as apple_1 and apple_2, along with other objects like carrots. Visually, apple_1 is positioned to the left of apple_2 and appears to be resting directly on the countertop, not on top of apple_2. Therefore, apple_1 is not on top of apple_2.\n</explanation>\n<answer>\nNo\n</answer>", true], "nextto apple_1,apple_2": ["yes", 1.27806077353243e-13, 2.3408498768783806e-15, "I will examine the image to determine the relative positions of apple_1 and apple_2. From the image, I can see that apple_1 and apple_2 are located on the counter, and they are adjacent to each other. Therefore, apple_1 is next to apple_2.", false, "Question: Is the apple_1 next to the apple_2\n<explanation>\nI will examine the image to determine the relative positions of apple_1 and apple_2. From the image, I can see that apple_1 and apple_2 are located on the counter, and they are adjacent to each other. Therefore, apple_1 is next to apple_2.\n</explanation>\n<answer>\nYes\n</answer>", false], "all_correct": false, "all_state_correct": false, "updated_non_visible_preds": {"ontop apple_1,apple_1": {"before": null, "after": false}, "ontop apple_1,orange_1": {"before": false, "after": false}, "ontop apple_1,electric_refrigerator_1": {"before": false, "after": false}, "ontop apple_1,table_1": {"before": false, "after": false}, "nextto apple_1,apple_1": {"before": null, "after": false}, "nextto apple_1,orange_1": {"before": false, "after": false}, "nextto apple_1,electric_refrigerator_1": {"before": false, "after": false}, "nextto apple_1,table_1": {"before": false, "after": false}}}, "action_info": "success"}, {"action": "grasp(apple_1)", "action_correct": false, "action_state_correct": false, "preconditions_results": {"reachable apple_1": ["yes", 1.1265380989167184e-12, 1.418102136776676e-14, "The image shows a robotic arm and a counter with several objects on it, including an apple labeled \"apple_1\". The robotic arm is positioned close to the counter. Visually, the apple_1 appears to be within the range of motion of the robotic arm, meaning it is in reach.", true, "Question: Is the apple_1 in reach of the agent\n<explanation>\nThe image shows a robotic arm and a counter with several objects on it, including an apple labeled \"apple_1\". The robotic arm is positioned close to the counter. Visually, the apple_1 appears to be within the range of motion of the robotic arm, meaning it is in reach.\n</explanation>\n<answer>\nYes\n</answer>", true], "holding apple_2": ["no", 8.202801908855847e-14, 9.796849983546071e-15, "The image shows a robotic arm (the agent) and several objects on a counter, including apples and carrots. The labels \"apple_1\", \"apple_2\", \"carrot_1\", \"carrot_2\", and \"carrot_3\" are visible on the objects. The robotic arm is positioned near the objects, but it is not grasping or holding \"apple_2\". It appears to be holding nothing.", true, "Question: Is the agent holding the apple_2\n<explanation>\nThe image shows a robotic arm (the agent) and several objects on a counter, including apples and carrots. The labels \"apple_1\", \"apple_2\", \"carrot_1\", \"carrot_2\", and \"carrot_3\" are visible on the objects. The robotic arm is positioned near the objects, but it is not grasping or holding \"apple_2\". It appears to be holding nothing.\n</explanation>\n<answer>\nNo\n</answer>", true], "all_correct": true, "all_state_correct": true}, "non_visible_precond_results": {"holding orange_1": [true, false, false], "all_correct": true}, "effects_results": null, "action_info": "not legal"}], "replans": [{"enum_results": {"reachable bread_1": ["yes", "no"], "reachable countertop_1": ["yes", "no"], "reachable flour_1": ["no", "no"], "reachable milk_1": ["yes", "yes"], "reachable chair_1": ["yes", "yes"], "reachable meat_1": ["yes", "yes"], "reachable table_1": ["yes", "yes"], "reachable cheese_1": ["yes", "yes"], "reachable yogurt_1": ["yes", "yes"], "reachable soup_1": ["yes", "yes"], "reachable carrot_1": ["yes", "no"], "reachable carrot_2": ["yes", "no"], "reachable carrot_3": ["yes", "no"], "reachable apple_1": ["yes", "no"], "reachable apple_2": ["yes", "no"], "reachable orange_1": ["yes", "yes"], "reachable orange_3": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding flour_1": ["no", "no"], "holding meat_1": ["no", "no"], "holding cheese_1": ["no", "no"], "holding yogurt_1": ["no", "no"], "holding soup_1": ["no", "no"], "holding carrot_1": ["no", "no"], "holding carrot_2": ["no", "no"], "holding carrot_3": ["no", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["no", "no"], "holding orange_1": ["no", "no"], "holding orange_3": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,flour_1": ["no", "no"], "ontop bread_1,milk_1": ["no", "no"], "ontop bread_1,chair_1": ["no", "no"], "ontop bread_1,meat_1": ["no", "no"], "ontop bread_1,table_1": ["no", "no"], "ontop bread_1,cheese_1": ["no", "no"], "ontop bread_1,yogurt_1": ["no", "no"], "ontop bread_1,soup_1": ["no", "no"], "ontop bread_1,carrot_1": ["no", "no"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop bread_1,orange_1": ["no", "no"], "ontop bread_1,orange_3": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,flour_1": ["no", "no"], "ontop countertop_1,milk_1": ["no", "no"], "ontop countertop_1,chair_1": ["no", "no"], "ontop countertop_1,meat_1": ["no", "no"], "ontop countertop_1,table_1": ["no", "no"], "ontop countertop_1,cheese_1": ["no", "no"], "ontop countertop_1,yogurt_1": ["no", "no"], "ontop countertop_1,soup_1": ["no", "no"], "ontop countertop_1,carrot_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop countertop_1,orange_1": ["no", "no"], "ontop countertop_1,orange_3": ["no", "no"], "ontop flour_1,bread_1": ["no", "no"], "ontop flour_1,countertop_1": ["yes", "no"], "ontop flour_1,milk_1": ["no", "no"], "ontop flour_1,chair_1": ["no", "no"], "ontop flour_1,meat_1": ["no", "no"], "ontop flour_1,table_1": ["no", "no"], "ontop flour_1,cheese_1": ["no", "no"], "ontop flour_1,yogurt_1": ["no", "no"], "ontop flour_1,soup_1": ["no", "no"], "ontop flour_1,carrot_1": ["no", "no"], "ontop flour_1,carrot_2": ["no", "no"], "ontop flour_1,carrot_3": ["no", "no"], "ontop flour_1,apple_1": ["no", "no"], "ontop flour_1,apple_2": ["no", "no"], "ontop flour_1,orange_1": ["no", "no"], "ontop flour_1,orange_3": ["no", "no"], "ontop meat_1,bread_1": ["no", "no"], "ontop meat_1,countertop_1": ["yes", "no"], "ontop meat_1,flour_1": ["no", "no"], "ontop meat_1,milk_1": ["no", "no"], "ontop meat_1,chair_1": ["no", "no"], "ontop meat_1,table_1": ["no", "yes"], "ontop meat_1,cheese_1": ["no", "no"], "ontop meat_1,yogurt_1": ["no", "no"], "ontop meat_1,soup_1": ["no", "no"], "ontop meat_1,carrot_1": ["no", "no"], "ontop meat_1,carrot_2": ["no", "no"], "ontop meat_1,carrot_3": ["no", "no"], "ontop meat_1,apple_1": ["no", "no"], "ontop meat_1,apple_2": ["no", "no"], "ontop meat_1,orange_1": ["no", "no"], "ontop meat_1,orange_3": ["no", "no"], "ontop cheese_1,bread_1": ["no", "no"], "ontop cheese_1,countertop_1": ["yes", "no"], "ontop cheese_1,flour_1": ["no", "no"], "ontop cheese_1,milk_1": ["no", "no"], "ontop cheese_1,chair_1": ["no", "no"], "ontop cheese_1,meat_1": ["no", "no"], "ontop cheese_1,table_1": ["yes", "yes"], "ontop cheese_1,yogurt_1": ["no", "no"], "ontop cheese_1,soup_1": ["no", "no"], "ontop cheese_1,carrot_1": ["no", "no"], "ontop cheese_1,carrot_2": ["no", "no"], "ontop cheese_1,carrot_3": ["no", "no"], "ontop cheese_1,apple_1": ["no", "no"], "ontop cheese_1,apple_2": ["no", "no"], "ontop cheese_1,orange_1": ["no", "no"], "ontop cheese_1,orange_3": ["no", "no"], "ontop yogurt_1,bread_1": ["no", "no"], "ontop yogurt_1,countertop_1": ["yes", "no"], "ontop yogurt_1,flour_1": ["no", "no"], "ontop yogurt_1,milk_1": ["no", "no"], "ontop yogurt_1,chair_1": ["no", "no"], "ontop yogurt_1,meat_1": ["no", "no"], "ontop yogurt_1,table_1": ["no", "yes"], "ontop yogurt_1,cheese_1": ["no", "no"], "ontop yogurt_1,soup_1": ["no", "no"], "ontop yogurt_1,carrot_1": ["no", "no"], "ontop yogurt_1,carrot_2": ["no", "no"], "ontop yogurt_1,carrot_3": ["no", "no"], "ontop yogurt_1,apple_1": ["no", "no"], "ontop yogurt_1,apple_2": ["no", "no"], "ontop yogurt_1,orange_1": ["no", "no"], "ontop yogurt_1,orange_3": ["no", "no"], "ontop soup_1,bread_1": ["no", "no"], "ontop soup_1,countertop_1": ["no", "no"], "ontop soup_1,flour_1": ["no", "no"], "ontop soup_1,milk_1": ["no", "no"], "ontop soup_1,chair_1": ["no", "no"], "ontop soup_1,meat_1": ["no", "no"], "ontop soup_1,table_1": ["yes", "yes"], "ontop soup_1,cheese_1": ["no", "no"], "ontop soup_1,yogurt_1": ["no", "no"], "ontop soup_1,carrot_1": ["no", "no"], "ontop soup_1,carrot_2": ["no", "no"], "ontop soup_1,carrot_3": ["no", "no"], "ontop soup_1,apple_1": ["no", "no"], "ontop soup_1,apple_2": ["no", "no"], "ontop soup_1,orange_1": ["no", "no"], "ontop soup_1,orange_3": ["no", "no"], "ontop carrot_1,bread_1": ["no", "no"], "ontop carrot_1,countertop_1": ["yes", "yes"], "ontop carrot_1,flour_1": ["no", "no"], "ontop carrot_1,milk_1": ["no", "no"], "ontop carrot_1,chair_1": ["no", "no"], "ontop carrot_1,meat_1": ["no", "no"], "ontop carrot_1,table_1": ["no", "no"], "ontop carrot_1,cheese_1": ["no", "no"], "ontop carrot_1,yogurt_1": ["no", "no"], "ontop carrot_1,soup_1": ["no", "no"], "ontop carrot_1,carrot_2": ["no", "no"], "ontop carrot_1,carrot_3": ["no", "no"], "ontop carrot_1,apple_1": ["no", "no"], "ontop carrot_1,apple_2": ["no", "no"], "ontop carrot_1,orange_1": ["no", "no"], "ontop carrot_1,orange_3": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,flour_1": ["no", "no"], "ontop carrot_2,milk_1": ["no", "no"], "ontop carrot_2,chair_1": ["no", "no"], "ontop carrot_2,meat_1": ["no", "no"], "ontop carrot_2,table_1": ["no", "no"], "ontop carrot_2,cheese_1": ["no", "no"], "ontop carrot_2,yogurt_1": ["no", "no"], "ontop carrot_2,soup_1": ["no", "no"], "ontop carrot_2,carrot_1": ["no", "no"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_2,orange_1": ["no", "no"], "ontop carrot_2,orange_3": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,flour_1": ["no", "no"], "ontop carrot_3,milk_1": ["no", "no"], "ontop carrot_3,chair_1": ["no", "no"], "ontop carrot_3,meat_1": ["no", "no"], "ontop carrot_3,table_1": ["no", "no"], "ontop carrot_3,cheese_1": ["no", "no"], "ontop carrot_3,yogurt_1": ["no", "no"], "ontop carrot_3,soup_1": ["no", "no"], "ontop carrot_3,carrot_1": ["no", "no"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop carrot_3,orange_1": ["no", "no"], "ontop carrot_3,orange_3": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,flour_1": ["no", "no"], "ontop apple_1,milk_1": ["no", "no"], "ontop apple_1,chair_1": ["no", "no"], "ontop apple_1,meat_1": ["no", "no"], "ontop apple_1,table_1": ["no", "no"], "ontop apple_1,cheese_1": ["no", "no"], "ontop apple_1,yogurt_1": ["no", "no"], "ontop apple_1,soup_1": ["no", "no"], "ontop apple_1,carrot_1": ["no", "no"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_1,orange_1": ["no", "no"], "ontop apple_1,orange_3": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,flour_1": ["no", "no"], "ontop apple_2,milk_1": ["no", "no"], "ontop apple_2,chair_1": ["no", "no"], "ontop apple_2,meat_1": ["no", "no"], "ontop apple_2,table_1": ["no", "no"], "ontop apple_2,cheese_1": ["no", "no"], "ontop apple_2,yogurt_1": ["no", "no"], "ontop apple_2,soup_1": ["no", "no"], "ontop apple_2,carrot_1": ["no", "no"], "ontop apple_2,carrot_2": ["no", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "ontop apple_2,orange_1": ["no", "no"], "ontop apple_2,orange_3": ["no", "no"], "ontop orange_1,bread_1": ["no", "no"], "ontop orange_1,countertop_1": ["no", "no"], "ontop orange_1,flour_1": ["no", "no"], "ontop orange_1,milk_1": ["no", "no"], "ontop orange_1,chair_1": ["no", "no"], "ontop orange_1,meat_1": ["no", "no"], "ontop orange_1,table_1": ["yes", "yes"], "ontop orange_1,cheese_1": ["no", "no"], "ontop orange_1,yogurt_1": ["no", "no"], "ontop orange_1,soup_1": ["no", "no"], "ontop orange_1,carrot_1": ["no", "no"], "ontop orange_1,carrot_2": ["no", "no"], "ontop orange_1,carrot_3": ["no", "no"], "ontop orange_1,apple_1": ["no", "no"], "ontop orange_1,apple_2": ["no", "no"], "ontop orange_1,orange_3": ["no", "no"], "ontop orange_3,bread_1": ["no", "no"], "ontop orange_3,countertop_1": ["no", "no"], "ontop orange_3,flour_1": ["no", "no"], "ontop orange_3,milk_1": ["no", "no"], "ontop orange_3,chair_1": ["no", "no"], "ontop orange_3,meat_1": ["no", "no"], "ontop orange_3,table_1": ["yes", "yes"], "ontop orange_3,cheese_1": ["no", "no"], "ontop orange_3,yogurt_1": ["no", "no"], "ontop orange_3,soup_1": ["no", "no"], "ontop orange_3,carrot_1": ["no", "no"], "ontop orange_3,carrot_2": ["no", "no"], "ontop orange_3,carrot_3": ["no", "no"], "ontop orange_3,apple_1": ["no", "no"], "ontop orange_3,apple_2": ["no", "no"], "ontop orange_3,orange_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,flour_1": ["no", "no"], "nextto bread_1,milk_1": ["no", "no"], "nextto bread_1,chair_1": ["no", "no"], "nextto bread_1,meat_1": ["no", "no"], "nextto bread_1,table_1": ["yes", "no"], "nextto bread_1,cheese_1": ["no", "no"], "nextto bread_1,yogurt_1": ["no", "no"], "nextto bread_1,soup_1": ["no", "no"], "nextto bread_1,carrot_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "yes"], "nextto bread_1,carrot_3": ["yes", "yes"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto bread_1,orange_1": ["no", "no"], "nextto bread_1,orange_3": ["no", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,flour_1": ["yes", "no"], "nextto countertop_1,milk_1": ["no", "no"], "nextto countertop_1,chair_1": ["no", "no"], "nextto countertop_1,meat_1": ["yes", "no"], "nextto countertop_1,table_1": ["yes", "no"], "nextto countertop_1,cheese_1": ["no", "no"], "nextto countertop_1,yogurt_1": ["no", "no"], "nextto countertop_1,soup_1": ["no", "no"], "nextto countertop_1,carrot_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto countertop_1,orange_1": ["no", "no"], "nextto countertop_1,orange_3": ["no", "no"], "nextto flour_1,bread_1": ["yes", "no"], "nextto flour_1,countertop_1": ["yes", "no"], "nextto flour_1,milk_1": ["no", "no"], "nextto flour_1,chair_1": ["no", "no"], "nextto flour_1,meat_1": ["no", "no"], "nextto flour_1,table_1": ["no", "no"], "nextto flour_1,cheese_1": ["no", "no"], "nextto flour_1,yogurt_1": ["no", "no"], "nextto flour_1,soup_1": ["no", "no"], "nextto flour_1,carrot_1": ["yes", "no"], "nextto flour_1,carrot_2": ["yes", "no"], "nextto flour_1,carrot_3": ["yes", "no"], "nextto flour_1,apple_1": ["yes", "no"], "nextto flour_1,apple_2": ["no", "no"], "nextto flour_1,orange_1": ["no", "no"], "nextto flour_1,orange_3": ["no", "no"], "nextto meat_1,bread_1": ["yes", "no"], "nextto meat_1,countertop_1": ["yes", "no"], "nextto meat_1,flour_1": ["no", "no"], "nextto meat_1,milk_1": ["no", "no"], "nextto meat_1,chair_1": ["yes", "no"], "nextto meat_1,table_1": ["no", "no"], "nextto meat_1,cheese_1": ["yes", "no"], "nextto meat_1,yogurt_1": ["no", "no"], "nextto meat_1,soup_1": ["no", "no"], "nextto meat_1,carrot_1": ["yes", "no"], "nextto meat_1,carrot_2": ["yes", "no"], "nextto meat_1,carrot_3": ["yes", "no"], "nextto meat_1,apple_1": ["yes", "no"], "nextto meat_1,apple_2": ["yes", "no"], "nextto meat_1,orange_1": ["no", "no"], "nextto meat_1,orange_3": ["no", "yes"], "nextto cheese_1,bread_1": ["yes", "no"], "nextto cheese_1,countertop_1": ["no", "no"], "nextto cheese_1,flour_1": ["no", "no"], "nextto cheese_1,milk_1": ["yes", "no"], "nextto cheese_1,chair_1": ["no", "no"], "nextto cheese_1,meat_1": ["no", "no"], "nextto cheese_1,table_1": ["yes", "no"], "nextto cheese_1,yogurt_1": ["yes", "no"], "nextto cheese_1,soup_1": ["yes", "yes"], "nextto cheese_1,carrot_1": ["no", "no"], "nextto cheese_1,carrot_2": ["no", "no"], "nextto cheese_1,carrot_3": ["no", "no"], "nextto cheese_1,apple_1": ["no", "no"], "nextto cheese_1,apple_2": ["no", "no"], "nextto cheese_1,orange_1": ["yes", "yes"], "nextto cheese_1,orange_3": ["yes", "no"], "nextto yogurt_1,bread_1": ["no", "no"], "nextto yogurt_1,countertop_1": ["no", "no"], "nextto yogurt_1,flour_1": ["no", "no"], "nextto yogurt_1,milk_1": ["yes", "no"], "nextto yogurt_1,chair_1": ["yes", "no"], "nextto yogurt_1,meat_1": ["yes", "no"], "nextto yogurt_1,table_1": ["yes", "no"], "nextto yogurt_1,cheese_1": ["yes", "no"], "nextto yogurt_1,soup_1": ["yes", "no"], "nextto yogurt_1,carrot_1": ["no", "no"], "nextto yogurt_1,carrot_2": ["no", "no"], "nextto yogurt_1,carrot_3": ["no", "no"], "nextto yogurt_1,apple_1": ["no", "no"], "nextto yogurt_1,apple_2": ["no", "no"], "nextto yogurt_1,orange_1": ["yes", "no"], "nextto yogurt_1,orange_3": ["yes", "no"], "nextto soup_1,bread_1": ["yes", "no"], "nextto soup_1,countertop_1": ["no", "no"], "nextto soup_1,flour_1": ["no", "no"], "nextto soup_1,milk_1": ["no", "no"], "nextto soup_1,chair_1": ["no", "no"], "nextto soup_1,meat_1": ["no", "no"], "nextto soup_1,table_1": ["yes", "no"], "nextto soup_1,cheese_1": ["yes", "yes"], "nextto soup_1,yogurt_1": ["yes", "no"], "nextto soup_1,carrot_1": ["no", "no"], "nextto soup_1,carrot_2": ["no", "no"], "nextto soup_1,carrot_3": ["no", "no"], "nextto soup_1,apple_1": ["no", "no"], "nextto soup_1,apple_2": ["no", "no"], "nextto soup_1,orange_1": ["yes", "no"], "nextto soup_1,orange_3": ["yes", "no"], "nextto carrot_1,bread_1": ["no", "no"], "nextto carrot_1,countertop_1": ["yes", "no"], "nextto carrot_1,flour_1": ["no", "no"], "nextto carrot_1,milk_1": ["no", "no"], "nextto carrot_1,chair_1": ["no", "no"], "nextto carrot_1,meat_1": ["no", "no"], "nextto carrot_1,table_1": ["yes", "no"], "nextto carrot_1,cheese_1": ["no", "no"], "nextto carrot_1,yogurt_1": ["no", "no"], "nextto carrot_1,soup_1": ["no", "no"], "nextto carrot_1,carrot_2": ["yes", "no"], "nextto carrot_1,carrot_3": ["no", "no"], "nextto carrot_1,apple_1": ["yes", "no"], "nextto carrot_1,apple_2": ["yes", "no"], "nextto carrot_1,orange_1": ["no", "no"], "nextto carrot_1,orange_3": ["no", "no"], "nextto carrot_2,bread_1": ["yes", "yes"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,flour_1": ["yes", "no"], "nextto carrot_2,milk_1": ["no", "no"], "nextto carrot_2,chair_1": ["no", "no"], "nextto carrot_2,meat_1": ["yes", "no"], "nextto carrot_2,table_1": ["yes", "no"], "nextto carrot_2,cheese_1": ["yes", "no"], "nextto carrot_2,yogurt_1": ["no", "no"], "nextto carrot_2,soup_1": ["no", "no"], "nextto carrot_2,carrot_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["no", "yes"], "nextto carrot_2,apple_1": ["yes", "yes"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_2,orange_1": ["no", "no"], "nextto carrot_2,orange_3": ["no", "no"], "nextto carrot_3,bread_1": ["yes", "yes"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,flour_1": ["yes", "no"], "nextto carrot_3,milk_1": ["no", "no"], "nextto carrot_3,chair_1": ["no", "no"], "nextto carrot_3,meat_1": ["yes", "no"], "nextto carrot_3,table_1": ["yes", "no"], "nextto carrot_3,cheese_1": ["no", "no"], "nextto carrot_3,yogurt_1": ["no", "no"], "nextto carrot_3,soup_1": ["no", "no"], "nextto carrot_3,carrot_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["no", "yes"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto carrot_3,orange_1": ["yes", "no"], "nextto carrot_3,orange_3": ["yes", "no"], "nextto apple_1,bread_1": ["no", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,flour_1": ["yes", "no"], "nextto apple_1,milk_1": ["no", "no"], "nextto apple_1,chair_1": ["no", "no"], "nextto apple_1,meat_1": ["yes", "no"], "nextto apple_1,table_1": ["yes", "no"], "nextto apple_1,cheese_1": ["no", "no"], "nextto apple_1,yogurt_1": ["no", "no"], "nextto apple_1,soup_1": ["no", "no"], "nextto apple_1,carrot_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "yes"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,apple_2": ["yes", "yes"], "nextto apple_1,orange_1": ["no", "no"], "nextto apple_1,orange_3": ["no", "no"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,flour_1": ["yes", "no"], "nextto apple_2,milk_1": ["no", "no"], "nextto apple_2,chair_1": ["no", "no"], "nextto apple_2,meat_1": ["yes", "no"], "nextto apple_2,table_1": ["yes", "no"], "nextto apple_2,cheese_1": ["yes", "no"], "nextto apple_2,yogurt_1": ["yes", "no"], "nextto apple_2,soup_1": ["no", "no"], "nextto apple_2,carrot_1": ["yes", "no"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,apple_1": ["yes", "yes"], "nextto apple_2,orange_1": ["no", "no"], "nextto apple_2,orange_3": ["no", "no"], "nextto orange_1,bread_1": ["yes", "no"], "nextto orange_1,countertop_1": ["no", "no"], "nextto orange_1,flour_1": ["yes", "no"], "nextto orange_1,milk_1": ["yes", "no"], "nextto orange_1,chair_1": ["yes", "no"], "nextto orange_1,meat_1": ["yes", "no"], "nextto orange_1,table_1": ["yes", "no"], "nextto orange_1,cheese_1": ["yes", "yes"], "nextto orange_1,yogurt_1": ["yes", "no"], "nextto orange_1,soup_1": ["yes", "no"], "nextto orange_1,carrot_1": ["no", "no"], "nextto orange_1,carrot_2": ["no", "no"], "nextto orange_1,carrot_3": ["yes", "no"], "nextto orange_1,apple_1": ["no", "no"], "nextto orange_1,apple_2": ["no", "no"], "nextto orange_1,orange_3": ["yes", "no"], "nextto orange_3,bread_1": ["yes", "no"], "nextto orange_3,countertop_1": ["no", "no"], "nextto orange_3,flour_1": ["yes", "no"], "nextto orange_3,milk_1": ["yes", "no"], "nextto orange_3,chair_1": ["yes", "yes"], "nextto orange_3,meat_1": ["yes", "yes"], "nextto orange_3,table_1": ["yes", "no"], "nextto orange_3,cheese_1": ["yes", "no"], "nextto orange_3,yogurt_1": ["yes", "no"], "nextto orange_3,soup_1": ["yes", "no"], "nextto orange_3,carrot_1": ["no", "no"], "nextto orange_3,carrot_2": ["no", "no"], "nextto orange_3,carrot_3": ["yes", "no"], "nextto orange_3,apple_1": ["no", "no"], "nextto orange_3,apple_2": ["no", "no"], "nextto orange_3,orange_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.7515657620041754, "yes_accuracy": 0.868421052631579, "yes_correct": 33, "yes_total": 38, "no_accuracy": 0.7414965986394558, "no_correct": 327, "no_total": 441, "predicates": {"reachable": {"accuracy": 0.5882352941176471, "yes_accuracy": 1.0, "yes_correct": 9, "yes_total": 9, "no_accuracy": 0.125, "no_correct": 1, "no_total": 8}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 14, "no_total": 14}, "ontop": {"accuracy": 0.9732142857142857, "yes_accuracy": 0.8333333333333334, "yes_correct": 10, "yes_total": 12, "no_accuracy": 0.9811320754716981, "no_correct": 208, "no_total": 212}, "nextto": {"accuracy": 0.5267857142857143, "yes_accuracy": 0.8235294117647058, "yes_correct": 14, "yes_total": 17, "no_accuracy": 0.5024154589371981, "no_correct": 104, "no_total": 207}}}, "step": 1, "actions": ["navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "navigate-to(apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable electric_refrigerator_1": ["no", "yes"], "open electric_refrigerator_1": ["no", "yes"]}, "enum_metrics": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 2, "no_accuracy": null, "no_correct": 0, "no_total": 0, "predicates": {"reachable": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "open": {"accuracy": 0.0, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": null, "no_correct": 0, "no_total": 0}}}, "step": 3, "actions": ["navigate-to(apple_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "navigate-to(apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable broccoli_1": ["no", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_2": ["no", "no"], "holding carrot_3": ["no", "no"], "holding broccoli_1": ["no", "no"], "holding apple_1": ["no", "no"], "holding apple_2": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,broccoli_1": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,broccoli_1": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["yes", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_3": ["no", "no"], "ontop carrot_2,broccoli_1": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_2": ["no", "no"], "ontop carrot_3,broccoli_1": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop broccoli_1,bread_1": ["no", "no"], "ontop broccoli_1,countertop_1": ["no", "yes"], "ontop broccoli_1,carrot_2": ["no", "no"], "ontop broccoli_1,carrot_3": ["no", "no"], "ontop broccoli_1,apple_1": ["no", "no"], "ontop broccoli_1,apple_2": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "yes"], "ontop apple_1,carrot_2": ["no", "no"], "ontop apple_1,carrot_3": ["no", "no"], "ontop apple_1,broccoli_1": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_2": ["yes", "no"], "ontop apple_2,carrot_3": ["no", "no"], "ontop apple_2,broccoli_1": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "nextto bread_1,countertop_1": ["no", "no"], "nextto bread_1,carrot_2": ["yes", "yes"], "nextto bread_1,carrot_3": ["yes", "yes"], "nextto bread_1,broccoli_1": ["no", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["yes", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,broccoli_1": ["no", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "yes"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,broccoli_1": ["no", "no"], "nextto carrot_2,apple_1": ["yes", "yes"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "yes"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,broccoli_1": ["no", "no"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto broccoli_1,bread_1": ["no", "no"], "nextto broccoli_1,countertop_1": ["no", "no"], "nextto broccoli_1,carrot_2": ["no", "no"], "nextto broccoli_1,carrot_3": ["no", "no"], "nextto broccoli_1,apple_1": ["no", "no"], "nextto broccoli_1,apple_2": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "yes"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,broccoli_1": ["no", "no"], "nextto apple_1,apple_2": ["yes", "yes"], "nextto apple_2,bread_1": ["yes", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,broccoli_1": ["no", "no"], "nextto apple_2,apple_1": ["yes", "yes"]}, "enum_metrics": {"accuracy": 0.7653061224489796, "yes_accuracy": 0.9130434782608695, "yes_correct": 21, "yes_total": 23, "no_accuracy": 0.72, "no_correct": 54, "no_total": 75, "predicates": {"reachable": {"accuracy": 0.8571428571428571, "yes_accuracy": 0.8571428571428571, "yes_correct": 6, "yes_total": 7, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 1.0, "yes_accuracy": null, "yes_correct": 0, "yes_total": 0, "no_accuracy": 1.0, "no_correct": 7, "no_total": 7}, "ontop": {"accuracy": 0.9285714285714286, "yes_accuracy": 0.8333333333333334, "yes_correct": 5, "yes_total": 6, "no_accuracy": 0.9444444444444444, "no_correct": 34, "no_total": 36}, "nextto": {"accuracy": 0.5476190476190477, "yes_accuracy": 1.0, "yes_correct": 10, "yes_total": 10, "no_accuracy": 0.40625, "no_correct": 13, "no_total": 32}}}, "step": 4, "actions": ["grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, {"enum_results": {"reachable bread_1": ["yes", "yes"], "reachable countertop_1": ["yes", "yes"], "reachable carrot_2": ["yes", "yes"], "reachable carrot_3": ["yes", "yes"], "reachable broccoli_1": ["yes", "yes"], "reachable apple_1": ["yes", "yes"], "reachable apple_2": ["yes", "yes"], "holding bread_1": ["no", "no"], "holding countertop_1": ["no", "no"], "holding carrot_2": ["no", "no"], "holding carrot_3": ["no", "no"], "holding broccoli_1": ["no", "no"], "holding apple_1": ["no", "yes"], "holding apple_2": ["no", "no"], "ontop bread_1,countertop_1": ["yes", "yes"], "ontop bread_1,carrot_2": ["no", "no"], "ontop bread_1,carrot_3": ["no", "no"], "ontop bread_1,broccoli_1": ["no", "no"], "ontop bread_1,apple_1": ["no", "no"], "ontop bread_1,apple_2": ["no", "no"], "ontop countertop_1,bread_1": ["no", "no"], "ontop countertop_1,carrot_2": ["no", "no"], "ontop countertop_1,carrot_3": ["no", "no"], "ontop countertop_1,broccoli_1": ["no", "no"], "ontop countertop_1,apple_1": ["no", "no"], "ontop countertop_1,apple_2": ["no", "no"], "ontop carrot_2,bread_1": ["no", "no"], "ontop carrot_2,countertop_1": ["yes", "yes"], "ontop carrot_2,carrot_3": ["yes", "no"], "ontop carrot_2,broccoli_1": ["no", "no"], "ontop carrot_2,apple_1": ["no", "no"], "ontop carrot_2,apple_2": ["no", "no"], "ontop carrot_3,bread_1": ["no", "no"], "ontop carrot_3,countertop_1": ["yes", "yes"], "ontop carrot_3,carrot_2": ["yes", "no"], "ontop carrot_3,broccoli_1": ["no", "no"], "ontop carrot_3,apple_1": ["no", "no"], "ontop carrot_3,apple_2": ["no", "no"], "ontop broccoli_1,bread_1": ["no", "no"], "ontop broccoli_1,countertop_1": ["yes", "yes"], "ontop broccoli_1,carrot_2": ["no", "no"], "ontop broccoli_1,carrot_3": ["no", "no"], "ontop broccoli_1,apple_1": ["no", "no"], "ontop broccoli_1,apple_2": ["no", "no"], "ontop apple_1,bread_1": ["no", "no"], "ontop apple_1,countertop_1": ["yes", "no"], "ontop apple_1,carrot_2": ["yes", "no"], "ontop apple_1,carrot_3": ["yes", "no"], "ontop apple_1,broccoli_1": ["no", "no"], "ontop apple_1,apple_2": ["no", "no"], "ontop apple_2,bread_1": ["no", "no"], "ontop apple_2,countertop_1": ["yes", "yes"], "ontop apple_2,carrot_2": ["yes", "no"], "ontop apple_2,carrot_3": ["yes", "no"], "ontop apple_2,broccoli_1": ["no", "no"], "ontop apple_2,apple_1": ["no", "no"], "nextto bread_1,countertop_1": ["yes", "no"], "nextto bread_1,carrot_2": ["yes", "yes"], "nextto bread_1,carrot_3": ["yes", "yes"], "nextto bread_1,broccoli_1": ["no", "no"], "nextto bread_1,apple_1": ["yes", "no"], "nextto bread_1,apple_2": ["no", "no"], "nextto countertop_1,bread_1": ["yes", "no"], "nextto countertop_1,carrot_2": ["yes", "no"], "nextto countertop_1,carrot_3": ["yes", "no"], "nextto countertop_1,broccoli_1": ["no", "no"], "nextto countertop_1,apple_1": ["yes", "no"], "nextto countertop_1,apple_2": ["yes", "no"], "nextto carrot_2,bread_1": ["yes", "yes"], "nextto carrot_2,countertop_1": ["yes", "no"], "nextto carrot_2,carrot_3": ["yes", "yes"], "nextto carrot_2,broccoli_1": ["no", "no"], "nextto carrot_2,apple_1": ["yes", "no"], "nextto carrot_2,apple_2": ["yes", "no"], "nextto carrot_3,bread_1": ["yes", "yes"], "nextto carrot_3,countertop_1": ["yes", "no"], "nextto carrot_3,carrot_2": ["yes", "yes"], "nextto carrot_3,broccoli_1": ["no", "no"], "nextto carrot_3,apple_1": ["yes", "no"], "nextto carrot_3,apple_2": ["yes", "no"], "nextto broccoli_1,bread_1": ["yes", "no"], "nextto broccoli_1,countertop_1": ["yes", "no"], "nextto broccoli_1,carrot_2": ["yes", "no"], "nextto broccoli_1,carrot_3": ["yes", "no"], "nextto broccoli_1,apple_1": ["no", "no"], "nextto broccoli_1,apple_2": ["no", "no"], "nextto apple_1,bread_1": ["yes", "no"], "nextto apple_1,countertop_1": ["yes", "no"], "nextto apple_1,carrot_2": ["yes", "no"], "nextto apple_1,carrot_3": ["yes", "no"], "nextto apple_1,broccoli_1": ["no", "no"], "nextto apple_1,apple_2": ["yes", "no"], "nextto apple_2,bread_1": ["no", "no"], "nextto apple_2,countertop_1": ["yes", "no"], "nextto apple_2,carrot_2": ["yes", "no"], "nextto apple_2,carrot_3": ["yes", "no"], "nextto apple_2,broccoli_1": ["no", "no"], "nextto apple_2,apple_1": ["yes", "no"]}, "enum_metrics": {"accuracy": 0.6530612244897959, "yes_accuracy": 0.9473684210526315, "yes_correct": 18, "yes_total": 19, "no_accuracy": 0.5822784810126582, "no_correct": 46, "no_total": 79, "predicates": {"reachable": {"accuracy": 1.0, "yes_accuracy": 1.0, "yes_correct": 7, "yes_total": 7, "no_accuracy": null, "no_correct": 0, "no_total": 0}, "holding": {"accuracy": 0.8571428571428571, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 1, "no_accuracy": 1.0, "no_correct": 6, "no_total": 6}, "ontop": {"accuracy": 0.8333333333333334, "yes_accuracy": 1.0, "yes_correct": 5, "yes_total": 5, "no_accuracy": 0.8108108108108109, "no_correct": 30, "no_total": 37}, "nextto": {"accuracy": 0.38095238095238093, "yes_accuracy": 1.0, "yes_correct": 6, "yes_total": 6, "no_accuracy": 0.2777777777777778, "no_correct": 10, "no_total": 36}}}, "step": 5, "actions": ["grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}], "remaining_actions": ["navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"]}, "problem_stats": {"data/planning/igibson/medium/sorting_books_medium.pddl_Pomaria_1_int_0": {"action_correct": 4, "action_total": 11, "remaining_actions": ["place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"], "action_accuracy": 0.36363636363636365, "failed": false}, "data/planning/igibson/medium/sorting_books_medium.pddl_Pomaria_1_int_20": {"action_correct": 3, "action_total": 12, "remaining_actions": ["grasp(book_1)", "navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"], "action_accuracy": 0.25, "failed": false}, "data/planning/igibson/medium/sorting_books_medium.pddl_Pomaria_1_int_21": {"action_correct": 3, "action_total": 12, "remaining_actions": ["grasp(book_1)", "navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"], "action_accuracy": 0.25, "failed": false}, "data/planning/igibson/medium/sorting_books_medium.pddl_Pomaria_1_int_23": {"action_correct": 3, "action_total": 12, "remaining_actions": ["grasp(book_1)", "navigate-to(shelf_1)", "place-on(book_1, shelf_1)", "navigate-to(hardback_1)", "grasp(hardback_1)", "navigate-to(shelf_1)", "place-on(hardback_1, shelf_1)"], "action_accuracy": 0.25, "failed": false}, "data/planning/igibson/medium/cleaning_out_drawers_medium.pddl_Benevolence_1_int_21": {"action_correct": 0, "action_total": 11, "remaining_actions": ["navigate-to(spoon_1)", "navigate-to(sink_1)", "place-on(bowl_1, sink_1)", "navigate-to(spoon_1)", "grasp(spoon_1)", "navigate-to(sink_1)", "place-on(spoon_1, sink_1)"], "action_accuracy": 0.0, "failed": false}, "data/planning/igibson/medium/cleaning_out_drawers_medium.pddl_Rs_int_0": {"action_correct": 1, "action_total": 13, "remaining_actions": ["open-container(cabinet_2)", "grasp(spoon_1)", "navigate-to(sink_1)", "place-on(spoon_1, sink_1)", "navigate-to(bowl_1)", "grasp(bowl_1)", "navigate-to(sink_1)", "place-on(bowl_1, sink_1)"], "action_accuracy": 0.07692307692307693, "failed": false}, "data/planning/igibson/medium/packing_food_for_work_medium.pddl_Beechwood_0_int_0": {"action_correct": 0, "action_total": 35, "remaining_actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"], "action_accuracy": 0.0, "failed": false}, "data/planning/igibson/medium/packing_food_for_work_medium.pddl_Beechwood_0_int_20": {"action_correct": 0, "action_total": 35, "remaining_actions": ["open-container(cabinet_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-next-to(snack_food_1, carton_1)", "open-container(carton_1)", "navigate-to(electric_refrigerator_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "navigate-to(snack_food_1)", "navigate-to(carton_1)", "place-inside(sandwich_1, carton_1)", "navigate-to(snack_food_1)", "grasp(snack_food_1)", "navigate-to(carton_1)", "place-inside(snack_food_1, carton_1)"], "action_accuracy": 0.0, "failed": false}, "data/planning/igibson/medium/packing_food_for_work_medium.pddl_Wainscott_0_int_0": {"action_correct": 0, "action_total": 9, "remaining_actions": ["open-container(carton_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "place-inside(sandwich_1, carton_1)", "grasp(snack_food_1)", "place-inside(snack_food_1, carton_1)"], "action_accuracy": 0.0, "failed": false}, "data/planning/igibson/medium/packing_food_for_work_medium.pddl_Wainscott_0_int_20": {"action_correct": 0, "action_total": 9, "remaining_actions": ["open-container(carton_1)", "open-container(electric_refrigerator_1)", "grasp(sandwich_1)", "place-inside(sandwich_1, carton_1)", "grasp(snack_food_1)", "place-inside(snack_food_1, carton_1)"], "action_accuracy": 0.0, "failed": false}, "data/planning/igibson/medium/putting_away_toys_medium.pddl_Benevolence_1_int_0": {"action_correct": 0, "action_total": 10, "remaining_actions": ["open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"], "action_accuracy": 0.0, "failed": false}, "data/planning/igibson/medium/putting_away_toys_medium.pddl_Benevolence_1_int_21": {"action_correct": 0, "action_total": 10, "remaining_actions": ["open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"], "action_accuracy": 0.0, "failed": false}, "data/planning/igibson/medium/putting_away_toys_medium.pddl_Ihlen_0_int_0": {"action_correct": 1, "action_total": 9, "remaining_actions": ["open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"], "action_accuracy": 0.1111111111111111, "failed": false}, "data/planning/igibson/medium/putting_away_toys_medium.pddl_Ihlen_0_int_20": {"action_correct": 1, "action_total": 9, "remaining_actions": ["open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "navigate-to(plaything_4)", "grasp(plaything_4)", "navigate-to(carton_1)", "place-inside(plaything_4, carton_1)"], "action_accuracy": 0.1111111111111111, "failed": false}, "data/planning/igibson/medium/putting_away_toys_medium.pddl_Ihlen_1_int_0": {"action_correct": 3, "action_total": 13, "remaining_actions": ["place-next-to(plaything_4, plaything_2)", "open-container(carton_1)", "grasp(plaything_2)", "place-inside(plaything_2, carton_1)", "grasp(plaything_4)", "place-inside(plaything_4, carton_1)"], "action_accuracy": 0.23076923076923078, "failed": false}, "data/planning/igibson/medium/collect_misplaced_items_medium.pddl_Beechwood_0_int_23": {"action_correct": 2, "action_total": 14, "remaining_actions": ["grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"], "action_accuracy": 0.14285714285714285, "failed": false}, "data/planning/igibson/medium/collect_misplaced_items_medium.pddl_Beechwood_0_int_24": {"action_correct": 2, "action_total": 13, "remaining_actions": ["grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"], "action_accuracy": 0.15384615384615385, "failed": false}, "data/planning/igibson/medium/collect_misplaced_items_medium.pddl_Merom_1_int_0": {"action_correct": 1, "action_total": 14, "remaining_actions": ["place-next-to(sock_1, table_2)", "navigate-to(sock_2)", "grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)"], "action_accuracy": 0.07142857142857142, "failed": false}, "data/planning/igibson/medium/collect_misplaced_items_medium.pddl_Merom_1_int_22": {"action_correct": 5, "action_total": 22, "remaining_actions": ["grasp(sock_2)", "navigate-to(table_2)", "place-on(sock_2, table_2)", "navigate-to(gym_shoe_1)", "grasp(gym_shoe_1)", "navigate-to(table_2)", "place-on(gym_shoe_1, table_2)"], "action_accuracy": 0.22727272727272727, "failed": false}, "data/planning/igibson/medium/sorting_groceries_medium.pddl_Beechwood_0_int_23": {"action_correct": 6, "action_total": 9, "remaining_actions": ["open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"], "action_accuracy": 0.6666666666666666, "failed": false}, "data/planning/igibson/medium/sorting_groceries_medium.pddl_Beechwood_0_int_24": {"action_correct": 1, "action_total": 6, "remaining_actions": ["open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"], "action_accuracy": 0.16666666666666666, "failed": false}, "data/planning/igibson/medium/sorting_groceries_medium.pddl_Beechwood_0_int_29": {"action_correct": 3, "action_total": 24, "remaining_actions": ["place-next-to(apple_2, apple_1)", "grasp(apple_1)", "navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"], "action_accuracy": 0.125, "failed": false}, "data/planning/igibson/medium/sorting_groceries_medium.pddl_Pomaria_1_int_0": {"action_correct": 0, "action_total": 8, "remaining_actions": ["place-next-to(apple_1, apple_1)", "open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"], "action_accuracy": 0.0, "failed": false}, "data/planning/igibson/medium/sorting_groceries_medium.pddl_Pomaria_1_int_20": {"action_correct": 0, "action_total": 8, "remaining_actions": ["place-next-to(apple_1, apple_1)", "open-container(electric_refrigerator_1)", "grasp(apple_1)", "place-inside(apple_1, electric_refrigerator_1)"], "action_accuracy": 0.0, "failed": false}, "data/planning/igibson/medium/sorting_groceries_medium.pddl_Pomaria_1_int_23": {"action_correct": 2, "action_total": 8, "remaining_actions": ["navigate-to(electric_refrigerator_1)", "place-inside(apple_1, electric_refrigerator_1)"], "action_accuracy": 0.25, "failed": false}}, "predicate_stats": {"reachable": {"accuracy": 0.8119777158774373, "yes_accuracy": 0.9629629629629629, "yes_correct": 468, "yes_total": 486, "no_accuracy": 0.4956896551724138, "no_correct": 115, "no_total": 232, "correct": 583, "total": 718}, "holding": {"accuracy": 0.6433408577878104, "yes_accuracy": 0.5652173913043478, "yes_correct": 13, "yes_total": 23, "no_accuracy": 0.6476190476190476, "no_correct": 272, "no_total": 420, "correct": 285, "total": 443}, "ontop": {"accuracy": 0.8900945047252362, "yes_accuracy": 0.8181818181818182, "yes_correct": 198, "yes_total": 242, "no_accuracy": 0.8967495219885278, "no_correct": 2345, "no_total": 2615, "correct": 2543, "total": 2857}, "nextto": {"accuracy": 0.39481974098704936, "yes_accuracy": 0.8008130081300813, "yes_correct": 197, "yes_total": 246, "no_accuracy": 0.35656836461126007, "no_correct": 931, "no_total": 2611, "correct": 1128, "total": 2857}, "open": {"accuracy": 0.6862745098039216, "yes_accuracy": 0.07575757575757576, "yes_correct": 5, "yes_total": 66, "no_accuracy": 0.9782608695652174, "no_correct": 135, "no_total": 138, "correct": 140, "total": 204}, "inside": {"accuracy": 0.9674329501915708, "yes_accuracy": 0.0, "yes_correct": 0, "yes_total": 13, "no_accuracy": 0.9921414538310412, "no_correct": 505, "no_total": 509, "correct": 505, "total": 522}}, "predicate_accuracy": 0.682015524273122, "macro_predicate_accuracy": 0.7323233798955043, "action_accuracy": 0.12202380952380952, "task_accuracy": 0.0, "fail_ratio": 0.0, "metadata": {"model_name": "google/gemma-3-27b-it", "prompt_path": "data/prompts/benchmark/igibson/prompt_cot.md", "problems_dir": "data/planning/igibson/medium", "seed": 1, "replan": true, "fail_probability": 0.0, "enumerate_initial_state": false, "job_id": "7211617_2"}}